{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lefi A discord API wrapper focused on clean code, and usability Features Asynchronous - Almost everything is async except for few unavoidable ones. Object oriented - Allows for easy usage Get started here","title":"Home"},{"location":"#lefi","text":"A discord API wrapper focused on clean code, and usability","title":"Lefi"},{"location":"#features","text":"Asynchronous - Almost everything is async except for few unavoidable ones. Object oriented - Allows for easy usage Get started here","title":"Features"},{"location":"getting-started/","text":"Getting started Table of contents Installation Basic usage Installing To install the wrapper you can use pip , poetry or any other manager you use. Note: It is recommended to use poetry or any other venv when downloading Poetry poetry add git+https://github.com/an-dyy/Lefi.git --no-dev Note: If you plan on contributing, omit the --no-dev flag. Pip pip install git+https://github.com/an-dyy/Lefi.git Examples import os import asyncio import lefi async def main () -> None : token = os . getenv ( \"discord_token\" ) # NOTE: I'm on linux so I can just export, windows might need a `.env` client = lefi . Client ( token ) # type: ignore @client . once ( \"ready\" ) async def on_ready ( client_user : lefi . User ) -> None : print ( f \"LOGGED IN AS { client_user . id } \" ) @client . on ( \"message_create\" ) async def on_message_create ( message : lefi . Message ) -> None : print ( message ) await client . start () asyncio . run ( main ())","title":"Getting-Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#table-of-contents","text":"Installation Basic usage","title":"Table of contents"},{"location":"getting-started/#installing","text":"To install the wrapper you can use pip , poetry or any other manager you use. Note: It is recommended to use poetry or any other venv when downloading Poetry poetry add git+https://github.com/an-dyy/Lefi.git --no-dev Note: If you plan on contributing, omit the --no-dev flag. Pip pip install git+https://github.com/an-dyy/Lefi.git","title":"Installing"},{"location":"getting-started/#examples","text":"import os import asyncio import lefi async def main () -> None : token = os . getenv ( \"discord_token\" ) # NOTE: I'm on linux so I can just export, windows might need a `.env` client = lefi . Client ( token ) # type: ignore @client . once ( \"ready\" ) async def on_ready ( client_user : lefi . User ) -> None : print ( f \"LOGGED IN AS { client_user . id } \" ) @client . on ( \"message_create\" ) async def on_message_create ( message : lefi . Message ) -> None : print ( message ) await client . start () asyncio . run ( main ())","title":"Examples"},{"location":"API-Reference/cache/","text":"A class which acts as a cache for objects. Attributes: Name Type Description maxlen Optional[int] The max amount the cache can hold. __init__ ( self , maxlen = None , * args , ** kwargs ) special Parameters: Name Type Description Default maxlen Optional[int] The max amount the cache can hold. None Source code in lefi/state.py def __init__ ( self , maxlen : Optional [ int ] = None , * args , ** kwargs ): \"\"\" Parameters: maxlen (Optional[int]): The max amount the cache can hold. \"\"\" super () . __init__ ( * args , ** kwargs ) self . maxlen : Optional [ int ] = maxlen self . _max : int = 0","title":"Cache"},{"location":"API-Reference/cache/#lefi.state.Cache.__init__","text":"Parameters: Name Type Description Default maxlen Optional[int] The max amount the cache can hold. None Source code in lefi/state.py def __init__ ( self , maxlen : Optional [ int ] = None , * args , ** kwargs ): \"\"\" Parameters: maxlen (Optional[int]): The max amount the cache can hold. \"\"\" super () . __init__ ( * args , ** kwargs ) self . maxlen : Optional [ int ] = maxlen self . _max : int = 0","title":"__init__()"},{"location":"API-Reference/channel/","text":"Channel A class representing a discord channel. guild : Guild property readonly A lefi.Guild instance which the channel belongs to. id : int property readonly The channels id. name : str property readonly The channels name. type : ChannelType property readonly The type of the channel. nsfw : bool property readonly Whether or not the channel is marked as NSFW. position : int property readonly The position of the channel. overwrites : Dict [ Union [ Member , Role ], Overwrite ] property readonly A list of lefi.Overwrite s for the channel. overwrites_for ( self , target ) Returns the lefi.Overwrite for the given target. Source code in lefi/objects/channel.py def overwrites_for ( self , target : Union [ Member , Role ]) -> Optional [ Overwrite ]: \"\"\" Returns the [lefi.Overwrite][] for the given target. \"\"\" return self . _overwrites . get ( target ) permissions_for ( self , target ) Returns the permissions for the given target. Source code in lefi/objects/channel.py def permissions_for ( self , target : Union [ Member , Role ]) -> Permissions : \"\"\" Returns the permissions for the given target. \"\"\" base = target . permissions if base & Permissions . administrator : return Permissions . all () everyone = self . overwrites_for ( self . guild . default_role ) if everyone is not None : base |= everyone . allow base &= ~ everyone . deny overwrites = self . overwrites allow = Permissions ( 0 ) deny = Permissions ( 0 ) if isinstance ( target , Member ): for role in target . roles : overwrite = overwrites . get ( role ) if overwrite is not None : allow |= overwrite . allow deny |= overwrite . deny base |= allow base &= ~ deny member_overwrite = overwrites . get ( target ) if member_overwrite : base |= member_overwrite . allow base &= ~ member_overwrite . deny return base return base DMChannel A class that represents a Users DMChannel. id : int property readonly The ID of the DMChannel. type : int property readonly The type of the channel. receipients : List [ User ] property readonly A list of lefi.User instances which are the recipients. send ( self , content = None , * , embeds = None ) async Sends a message to the channel. Parameters: Name Type Description Default content Optional[str] The content of the message. None embeds Optional[List[lefi.Embed]] The list of embeds to send with the message. None Returns: Type Description Message The sent lefi.Message instance. Source code in lefi/objects/channel.py async def send ( self , content : Optional [ str ] = None , * , embeds : Optional [ List [ Embed ]] = None ) -> Message : \"\"\" Sends a message to the channel. Parameters: content (Optional[str]): The content of the message. embeds (Optional[List[lefi.Embed]]): The list of embeds to send with the message. Returns: The sent [lefi.Message][] instance. \"\"\" embeds = [] if embeds is None else embeds data = await self . _state . client . http . send_message ( channel_id = self . id , content = content , embeds = [ embed . to_dict () for embed in embeds ], ) return self . _state . create_message ( data , self ) TextChannel ( Channel ) A class that represents a TextChannel. topic : str property readonly The topic of the channel. last_message : Optional [ Message ] property readonly The last lefi.Message instance sent in the channel. rate_limit_per_user : int property readonly The amount of time needed before another message can be sent in the channel. default_auto_archive_duration : int property readonly The amount of time it takes to archive a thread inside of the channel. parent : Optional [ Channel ] property readonly The channels parent. fetch_history ( self , ** kwargs ) Makes an API call to grab messages from the channel. Parameters: Name Type Description Default **kwargs Any The option to pass to lefi.HTTPClient.get_channel_messages . {} Returns: Type Description AsyncIterator[Message] A list of the fetched lefi.Message instances. Source code in lefi/objects/channel.py async def fetch_history ( self , ** kwargs ) -> AsyncIterator [ Message ]: \"\"\" Makes an API call to grab messages from the channel. Parameters: **kwargs (Any): The option to pass to [lefi.HTTPClient.get_channel_messages][]. Returns: A list of the fetched [lefi.Message][] instances. \"\"\" data = await self . _state . http . get_channel_messages ( self . id , ** kwargs ) for payload in data : yield self . _state . create_message ( payload , self ) edit ( self , ** kwargs ) async Edits the channel. Parameters: Name Type Description Default **kwargs Any The options to pass to lefi.HTTPClient.edit_text_channel . {} Returns: Type Description TextChannel The lefi.TextChannel instance after editting. Source code in lefi/objects/channel.py async def edit ( self , ** kwargs ) -> TextChannel : \"\"\" Edits the channel. Parameters: **kwargs (Any): The options to pass to [lefi.HTTPClient.edit_text_channel][]. Returns: The [lefi.TextChannel][] instance after editting. \"\"\" data = await self . _state . http . edit_text_channel ( self . id , ** kwargs ) self . _data = data return self delete_messages ( self , messages ) async Bulk deletes messages from the channel. Parameters: Name Type Description Default messages Iterable[lefi.Message] The list of messages to delete. required Source code in lefi/objects/channel.py async def delete_messages ( self , messages : Iterable [ Message ]) -> None : \"\"\" Bulk deletes messages from the channel. Parameters: messages (Iterable[lefi.Message]): The list of messages to delete. \"\"\" await self . _state . http . bulk_delete_messages ( self . id , message_ids = [ msg . id for msg in messages ] ) send ( self , content = None , * , embeds = None , ** kwargs ) async Sends a message to the channel. Parameters: Name Type Description Default content Optional[str] The content of the message. None embeds Optional[List[lefi.Embed]] The list of embeds to send with the message. None **kwargs Any Extra options to pass to lefi.HTTPClient.send_message {} Returns: Type Description Message The sent lefi.Message instance. Source code in lefi/objects/channel.py async def send ( self , content : Optional [ str ] = None , * , embeds : Optional [ List [ Embed ]] = None , ** kwargs , ) -> Message : \"\"\" Sends a message to the channel. Parameters: content (Optional[str]): The content of the message. embeds (Optional[List[lefi.Embed]]): The list of embeds to send with the message. **kwargs (Any): Extra options to pass to [lefi.HTTPClient.send_message][] Returns: The sent [lefi.Message][] instance. \"\"\" embeds = [] if embeds is None else embeds data = await self . _state . client . http . send_message ( channel_id = self . id , content = content , embeds = [ embed . to_dict () for embed in embeds ], ** kwargs , ) return self . _state . create_message ( data , self ) fetch_message ( self , message_id ) async Makes an API call to receive a message. Parameters: Name Type Description Default message_id int The ID of the message. required Returns: Type Description Message The lefi.Message instance corresponding to the ID if found. Source code in lefi/objects/channel.py async def fetch_message ( self , message_id : int ) -> Message : \"\"\" Makes an API call to receive a message. Parameters: message_id (int): The ID of the message. Returns: The [lefi.Message][] instance corresponding to the ID if found. \"\"\" data = await self . _state . http . get_channel_message ( self . id , message_id ) return self . _state . create_message ( data , self ) VoiceChannel ( Channel ) Represents a VoiceChannel. user_limit : int property readonly The user limit of the voice channel. bitrate : int property readonly The bitrate of the voice channel. rtc_region : Optional [ str ] property readonly THe rtc region of the voice channel. parent property readonly The parent of the voice channel. edit ( self , ** kwargs ) async Edits the channel. Parameters: Name Type Description Default **kwargs Any The options to pass to lefi.HTTPClient.edit_voice_channel . {} Returns: Type Description VoiceChannel The lefi.VoiceChannel instance after editting. Source code in lefi/objects/channel.py async def edit ( self , ** kwargs ) -> VoiceChannel : \"\"\" Edits the channel. Parameters: **kwargs (Any): The options to pass to [lefi.HTTPClient.edit_voice_channel][]. Returns: The [lefi.VoiceChannel][] instance after editting. \"\"\" data = await self . _state . http . edit_voice_channel ( ** kwargs ) self . _data = data return self","title":"Channel"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel","text":"A class representing a discord channel.","title":"Channel"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.guild","text":"A lefi.Guild instance which the channel belongs to.","title":"guild"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.id","text":"The channels id.","title":"id"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.name","text":"The channels name.","title":"name"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.type","text":"The type of the channel.","title":"type"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.nsfw","text":"Whether or not the channel is marked as NSFW.","title":"nsfw"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.position","text":"The position of the channel.","title":"position"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.overwrites","text":"A list of lefi.Overwrite s for the channel.","title":"overwrites"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.overwrites_for","text":"Returns the lefi.Overwrite for the given target. Source code in lefi/objects/channel.py def overwrites_for ( self , target : Union [ Member , Role ]) -> Optional [ Overwrite ]: \"\"\" Returns the [lefi.Overwrite][] for the given target. \"\"\" return self . _overwrites . get ( target )","title":"overwrites_for()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.permissions_for","text":"Returns the permissions for the given target. Source code in lefi/objects/channel.py def permissions_for ( self , target : Union [ Member , Role ]) -> Permissions : \"\"\" Returns the permissions for the given target. \"\"\" base = target . permissions if base & Permissions . administrator : return Permissions . all () everyone = self . overwrites_for ( self . guild . default_role ) if everyone is not None : base |= everyone . allow base &= ~ everyone . deny overwrites = self . overwrites allow = Permissions ( 0 ) deny = Permissions ( 0 ) if isinstance ( target , Member ): for role in target . roles : overwrite = overwrites . get ( role ) if overwrite is not None : allow |= overwrite . allow deny |= overwrite . deny base |= allow base &= ~ deny member_overwrite = overwrites . get ( target ) if member_overwrite : base |= member_overwrite . allow base &= ~ member_overwrite . deny return base return base","title":"permissions_for()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel","text":"A class that represents a Users DMChannel.","title":"DMChannel"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel.id","text":"The ID of the DMChannel.","title":"id"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel.type","text":"The type of the channel.","title":"type"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel.receipients","text":"A list of lefi.User instances which are the recipients.","title":"receipients"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel.send","text":"Sends a message to the channel. Parameters: Name Type Description Default content Optional[str] The content of the message. None embeds Optional[List[lefi.Embed]] The list of embeds to send with the message. None Returns: Type Description Message The sent lefi.Message instance. Source code in lefi/objects/channel.py async def send ( self , content : Optional [ str ] = None , * , embeds : Optional [ List [ Embed ]] = None ) -> Message : \"\"\" Sends a message to the channel. Parameters: content (Optional[str]): The content of the message. embeds (Optional[List[lefi.Embed]]): The list of embeds to send with the message. Returns: The sent [lefi.Message][] instance. \"\"\" embeds = [] if embeds is None else embeds data = await self . _state . client . http . send_message ( channel_id = self . id , content = content , embeds = [ embed . to_dict () for embed in embeds ], ) return self . _state . create_message ( data , self )","title":"send()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel","text":"A class that represents a TextChannel.","title":"TextChannel"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.topic","text":"The topic of the channel.","title":"topic"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.last_message","text":"The last lefi.Message instance sent in the channel.","title":"last_message"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.rate_limit_per_user","text":"The amount of time needed before another message can be sent in the channel.","title":"rate_limit_per_user"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.default_auto_archive_duration","text":"The amount of time it takes to archive a thread inside of the channel.","title":"default_auto_archive_duration"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.parent","text":"The channels parent.","title":"parent"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.fetch_history","text":"Makes an API call to grab messages from the channel. Parameters: Name Type Description Default **kwargs Any The option to pass to lefi.HTTPClient.get_channel_messages . {} Returns: Type Description AsyncIterator[Message] A list of the fetched lefi.Message instances. Source code in lefi/objects/channel.py async def fetch_history ( self , ** kwargs ) -> AsyncIterator [ Message ]: \"\"\" Makes an API call to grab messages from the channel. Parameters: **kwargs (Any): The option to pass to [lefi.HTTPClient.get_channel_messages][]. Returns: A list of the fetched [lefi.Message][] instances. \"\"\" data = await self . _state . http . get_channel_messages ( self . id , ** kwargs ) for payload in data : yield self . _state . create_message ( payload , self )","title":"fetch_history()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.edit","text":"Edits the channel. Parameters: Name Type Description Default **kwargs Any The options to pass to lefi.HTTPClient.edit_text_channel . {} Returns: Type Description TextChannel The lefi.TextChannel instance after editting. Source code in lefi/objects/channel.py async def edit ( self , ** kwargs ) -> TextChannel : \"\"\" Edits the channel. Parameters: **kwargs (Any): The options to pass to [lefi.HTTPClient.edit_text_channel][]. Returns: The [lefi.TextChannel][] instance after editting. \"\"\" data = await self . _state . http . edit_text_channel ( self . id , ** kwargs ) self . _data = data return self","title":"edit()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.delete_messages","text":"Bulk deletes messages from the channel. Parameters: Name Type Description Default messages Iterable[lefi.Message] The list of messages to delete. required Source code in lefi/objects/channel.py async def delete_messages ( self , messages : Iterable [ Message ]) -> None : \"\"\" Bulk deletes messages from the channel. Parameters: messages (Iterable[lefi.Message]): The list of messages to delete. \"\"\" await self . _state . http . bulk_delete_messages ( self . id , message_ids = [ msg . id for msg in messages ] )","title":"delete_messages()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.send","text":"Sends a message to the channel. Parameters: Name Type Description Default content Optional[str] The content of the message. None embeds Optional[List[lefi.Embed]] The list of embeds to send with the message. None **kwargs Any Extra options to pass to lefi.HTTPClient.send_message {} Returns: Type Description Message The sent lefi.Message instance. Source code in lefi/objects/channel.py async def send ( self , content : Optional [ str ] = None , * , embeds : Optional [ List [ Embed ]] = None , ** kwargs , ) -> Message : \"\"\" Sends a message to the channel. Parameters: content (Optional[str]): The content of the message. embeds (Optional[List[lefi.Embed]]): The list of embeds to send with the message. **kwargs (Any): Extra options to pass to [lefi.HTTPClient.send_message][] Returns: The sent [lefi.Message][] instance. \"\"\" embeds = [] if embeds is None else embeds data = await self . _state . client . http . send_message ( channel_id = self . id , content = content , embeds = [ embed . to_dict () for embed in embeds ], ** kwargs , ) return self . _state . create_message ( data , self )","title":"send()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.fetch_message","text":"Makes an API call to receive a message. Parameters: Name Type Description Default message_id int The ID of the message. required Returns: Type Description Message The lefi.Message instance corresponding to the ID if found. Source code in lefi/objects/channel.py async def fetch_message ( self , message_id : int ) -> Message : \"\"\" Makes an API call to receive a message. Parameters: message_id (int): The ID of the message. Returns: The [lefi.Message][] instance corresponding to the ID if found. \"\"\" data = await self . _state . http . get_channel_message ( self . id , message_id ) return self . _state . create_message ( data , self )","title":"fetch_message()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel","text":"Represents a VoiceChannel.","title":"VoiceChannel"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.user_limit","text":"The user limit of the voice channel.","title":"user_limit"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.bitrate","text":"The bitrate of the voice channel.","title":"bitrate"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.rtc_region","text":"THe rtc region of the voice channel.","title":"rtc_region"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.parent","text":"The parent of the voice channel.","title":"parent"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.edit","text":"Edits the channel. Parameters: Name Type Description Default **kwargs Any The options to pass to lefi.HTTPClient.edit_voice_channel . {} Returns: Type Description VoiceChannel The lefi.VoiceChannel instance after editting. Source code in lefi/objects/channel.py async def edit ( self , ** kwargs ) -> VoiceChannel : \"\"\" Edits the channel. Parameters: **kwargs (Any): The options to pass to [lefi.HTTPClient.edit_voice_channel][]. Returns: The [lefi.VoiceChannel][] instance after editting. \"\"\" data = await self . _state . http . edit_voice_channel ( ** kwargs ) self . _data = data return self","title":"edit()"},{"location":"API-Reference/client/","text":"A class used to communicate with the discord API and its gateway. Attributes: Name Type Description pub_key Optional[str] The client's public key. Used when handling interactions over HTTP. loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop which is being used. http lefi.HTTPClient The HTTPClient to use for handling requests to the API. ws lefi.WebSocketClient The WebSocketClient which handles the gateway. __init__ ( self , token , * , intents = None , loop = None ) special Parameters: Name Type Description Default token str The clients token, used for authorization (logging in, etc...) This is required. required intents Optional[lefi.Intents] The intents to be used for the client. None loop Optional[asyncio.AbstractEventLoop] The loop to use. None Source code in lefi/client.py def __init__ ( self , token : str , * , intents : Intents = None , loop : Optional [ asyncio . AbstractEventLoop ] = None , ): \"\"\" Parameters: token (str): The clients token, used for authorization (logging in, etc...) This is required. intents (Optional[lefi.Intents]): The intents to be used for the client. loop (Optional[asyncio.AbstractEventLoop]): The loop to use. \"\"\" self . loop : asyncio . AbstractEventLoop = loop or asyncio . get_running_loop () self . http : HTTPClient = HTTPClient ( token , self . loop ) self . _state : State = State ( self , self . loop ) self . ws : WebSocketClient = WebSocketClient ( self , intents ) self . events : Dict [ str , Cache [ Callable [ ... , Any ]]] = {} self . once_events : Dict [ str , List [ Callable [ ... , Any ]]] = {} self . futures : Dict [ str , List [ Tuple [ asyncio . Future , Callable [ ... , bool ]]]] = {} add_listener ( self , func , event_name , overwrite = False ) Registers listener, basically connecting an event to a callback. Parameters: Name Type Description Default func Callable[..., Coroutine] The callback to register for an event. required event_name Optional[str] The event to register, if None it will pass the decorated functions name. required Source code in lefi/client.py def add_listener ( self , func : Callable [ ... , Coroutine ], event_name : Optional [ str ], overwrite : bool = False , ) -> None : \"\"\" Registers listener, basically connecting an event to a callback. Parameters: func (Callable[..., Coroutine]): The callback to register for an event. event_name (Optional[str]): The event to register, if None it will pass the decorated functions name. \"\"\" name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . events . setdefault ( name , Cache [ Callable [ ... , Coroutine ]]( maxlen = 1 if overwrite else None ) ) if overwrite is False : callbacks . maxlen = None elif overwrite is True : callbacks . maxlen = 1 callbacks [ func ] = func # type: ignore on ( self , event_name = None , overwrite = False ) A decorator that registers the decorated function to an event. Parameters: Name Type Description Default event_name Optional[str] The event to register. None overwrite bool Whether or not to clear every callback except for the current one being registered. False Note The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Examples: @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : await message . channel . send ( \"Got your message!\" ) @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : await message . channel . send ( \"Got your message!\" ) @client . on ( \"message_create\" ) async def on_message2 ( message : lefi . Message ) -> None : print ( message . content ) Source code in lefi/client.py def on ( self , event_name : Optional [ str ] = None , overwrite : bool = False ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Parameters: event_name (Optional[str]): The event to register. overwrite (bool): Whether or not to clear every callback except for the current one being registered. Note: The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: The decorated function after registering it as a listener. Example: ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: await message.channel.send(\"Got your message!\") ``` ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: await message.channel.send(\"Got your message!\") @client.on(\"message_create\") async def on_message2(message: lefi.Message) -> None: print(message.content) ``` \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: self . add_listener ( func , event_name , overwrite ) return func return inner once ( self , event_name = None ) A decorator that registers the decorated function to an event. Similar to lefi.Client.on but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: Name Type Description Default event_name Optional[str] The event to register. None Note Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with lefi.Client.once take precedence over the regular events. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Examples: @client . once ( \"ready\" ) async def on_ready ( client_user : lefi . User ) -> None : print ( f \"logged in as { client_user . username } \" ) Source code in lefi/client.py def once ( self , event_name : Optional [ str ] = None ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Similar to [lefi.Client.on][] but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: event_name (Optional[str]): The event to register. Note: Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with [lefi.Client.once][] take precedence over the regular events. Returns: The decorated function after registering it as a listener. Example: ```py @client.once(\"ready\") async def on_ready(client_user: lefi.User) -> None: print(f\"logged in as {client_user.username}\") ``` \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . once_events . setdefault ( name , []) callbacks . append ( func ) return func return inner connect ( self ) async A method which starts the connection to the gateway. Source code in lefi/client.py async def connect ( self ) -> None : \"\"\" A method which starts the connection to the gateway. \"\"\" await self . ws . start () login ( self ) async A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. Source code in lefi/client.py async def login ( self ) -> None : \"\"\" A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. \"\"\" await self . http . login () start ( self ) async A method which calls lefi.Client.login and lefi.Client.connect in that order. Source code in lefi/client.py async def start ( self ) -> None : \"\"\" A method which calls [lefi.Client.login][] and [lefi.Client.connect][] in that order. \"\"\" await asyncio . gather ( self . login (), self . connect ()) wait_for ( self , event , * , check = None , timeout = None ) async Waits for an event to be dispatched that passes the check. Parameters: Name Type Description Default event str The event to wait for. required check Callable[..., bool] A function that takes the same args as the event, and returns a bool. None timeout float The time to wait before stopping. None Returns: Type Description Any The return from a callback that matches with the event you are waiting for. Note The check has to take in the same args as the event. If no check is passed, everything will complete the check. Examples: @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : if message . content == \"wait for next!\" : next_message = await client . wait_for ( \"message_create\" , check = lambda msg : msg . author . id == 270700034985558017 ) await message . channel . send ( f \"got your message! ` { next_message . content } `\" ) Source code in lefi/client.py async def wait_for ( self , event : str , * , check : Callable [ ... , bool ] = None , timeout : float = None ) -> Any : \"\"\" Waits for an event to be dispatched that passes the check. Parameters: event (str): The event to wait for. check (Callable[..., bool]): A function that takes the same args as the event, and returns a bool. timeout (float): The time to wait before stopping. Returns: The return from a callback that matches with the event you are waiting for. Note: The check has to take in the same args as the event. If no check is passed, everything will complete the check. Example: ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: if message.content == \"wait for next!\": next_message = await client.wait_for( \"message_create\", check=lambda msg: msg.author.id == 270700034985558017 ) await message.channel.send(f\"got your message! `{next_message.content}`\") ``` \"\"\" future = self . loop . create_future () futures = self . futures . setdefault ( event , []) if check is None : check = lambda * _ : True futures . append (( future , check )) return await asyncio . wait_for ( future , timeout = timeout ) get_message ( self , id ) Grabs a lefi.Message instance if cached. Parameters: Name Type Description Default id int The message's ID. required Returns: Type Description Optional[Message] The lefi.Message instance related to the ID. Else None if not found. Source code in lefi/client.py def get_message ( self , id : int ) -> Optional [ Message ]: \"\"\" Grabs a [lefi.Message][] instance if cached. Parameters: id (int): The message's ID. Returns: The [lefi.Message][] instance related to the ID. Else None if not found. \"\"\" return self . _state . get_message ( id ) get_guild ( self , id ) Grabs a lefi.Guild instance if cached. Parameters: Name Type Description Default id int The guild's ID. required Returns: Type Description Optional[Guild] The lefi.Guild instance related to the ID. Else None if not found Source code in lefi/client.py def get_guild ( self , id : int ) -> Optional [ Guild ]: \"\"\" Grabs a [lefi.Guild][] instance if cached. Parameters: id (int): The guild's ID. Returns: The [lefi.Guild][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_guild ( id ) get_channel ( self , id ) Grabs a lefi.Channel instance if cached. Parameters: Name Type Description Default id int The channel's ID. required Returns: Type Description Optional[Union[TextChannel, VoiceChannel, DMChannel, CategoryChannel, Channel]] The lefi.Channel instance related to the ID. Else None if not found Source code in lefi/client.py def get_channel ( self , id : int ) -> Optional [ Union [ TextChannel , VoiceChannel , DMChannel , CategoryChannel , Channel ] ]: \"\"\" Grabs a [lefi.Channel][] instance if cached. Parameters: id (int): The channel's ID. Returns: The [lefi.Channel][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_channel ( id ) get_user ( self , id ) Grabs a lefi.User instance if cached. Parameters: Name Type Description Default id int The user's ID. required Returns: Type Description Optional[User] The lefi.User instance related to the ID. Else None if not found Source code in lefi/client.py def get_user ( self , id : int ) -> Optional [ User ]: \"\"\" Grabs a [lefi.User][] instance if cached. Parameters: id (int): The user's ID. Returns: The [lefi.User][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_user ( id ) get_emoji ( self , id ) Grabs a lefi.Emoji instance if cached. Parameters: Name Type Description Default id int The emoji's ID. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance related to the ID. Else None if not found Source code in lefi/client.py def get_emoji ( self , id : int ) -> Optional [ Emoji ]: \"\"\" Grabs a [lefi.Emoji][] instance if cached. Parameters: id (int): The emoji's ID. Returns: The [lefi.Emoji][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_emoji ( id ) fetch_invite ( self , code , ** kwargs ) async Fetches an invite from the API. Parameters: Name Type Description Default code str The invite code. required Returns: Type Description The lefi.Invite instance related to the code. Source code in lefi/client.py async def fetch_invite ( self , code : str , ** kwargs ): \"\"\" Fetches an invite from the API. Parameters: code (str): The invite code. Returns: The [lefi.Invite][] instance related to the code. \"\"\" data = await self . http . get_invite ( code , ** kwargs ) return Invite ( data = data , state = self . _state ) fetch_guild ( self , guild_id ) async Fetches a guild from the API. Parameters: Name Type Description Default guild_id int The guild's ID. required Returns: Type Description The lefi.Guild instance related to the ID. Source code in lefi/client.py async def fetch_guild ( self , guild_id : int ): \"\"\" Fetches a guild from the API. Parameters: guild_id (int): The guild's ID. Returns: The [lefi.Guild][] instance related to the ID. \"\"\" data = await self . http . get_guild ( guild_id ) return Guild ( data = data , state = self . _state ) fetch_template ( self , code ) async Fetches a template from the API. Parameters: Name Type Description Default code str The template code. required Returns: Type Description GuildTemplate The lefi.GuildTemplate instance related to the code. Source code in lefi/client.py async def fetch_template ( self , code : str ) -> GuildTemplate : \"\"\" Fetches a template from the API. Parameters: code (str): The template code. Returns: The [lefi.GuildTemplate][] instance related to the code. \"\"\" data = await self . http . get_guild_template ( code ) return GuildTemplate ( data = data , state = self . _state )","title":"Client"},{"location":"API-Reference/client/#lefi.client.Client.__init__","text":"Parameters: Name Type Description Default token str The clients token, used for authorization (logging in, etc...) This is required. required intents Optional[lefi.Intents] The intents to be used for the client. None loop Optional[asyncio.AbstractEventLoop] The loop to use. None Source code in lefi/client.py def __init__ ( self , token : str , * , intents : Intents = None , loop : Optional [ asyncio . AbstractEventLoop ] = None , ): \"\"\" Parameters: token (str): The clients token, used for authorization (logging in, etc...) This is required. intents (Optional[lefi.Intents]): The intents to be used for the client. loop (Optional[asyncio.AbstractEventLoop]): The loop to use. \"\"\" self . loop : asyncio . AbstractEventLoop = loop or asyncio . get_running_loop () self . http : HTTPClient = HTTPClient ( token , self . loop ) self . _state : State = State ( self , self . loop ) self . ws : WebSocketClient = WebSocketClient ( self , intents ) self . events : Dict [ str , Cache [ Callable [ ... , Any ]]] = {} self . once_events : Dict [ str , List [ Callable [ ... , Any ]]] = {} self . futures : Dict [ str , List [ Tuple [ asyncio . Future , Callable [ ... , bool ]]]] = {}","title":"__init__()"},{"location":"API-Reference/client/#lefi.client.Client.add_listener","text":"Registers listener, basically connecting an event to a callback. Parameters: Name Type Description Default func Callable[..., Coroutine] The callback to register for an event. required event_name Optional[str] The event to register, if None it will pass the decorated functions name. required Source code in lefi/client.py def add_listener ( self , func : Callable [ ... , Coroutine ], event_name : Optional [ str ], overwrite : bool = False , ) -> None : \"\"\" Registers listener, basically connecting an event to a callback. Parameters: func (Callable[..., Coroutine]): The callback to register for an event. event_name (Optional[str]): The event to register, if None it will pass the decorated functions name. \"\"\" name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . events . setdefault ( name , Cache [ Callable [ ... , Coroutine ]]( maxlen = 1 if overwrite else None ) ) if overwrite is False : callbacks . maxlen = None elif overwrite is True : callbacks . maxlen = 1 callbacks [ func ] = func # type: ignore","title":"add_listener()"},{"location":"API-Reference/client/#lefi.client.Client.on","text":"A decorator that registers the decorated function to an event. Parameters: Name Type Description Default event_name Optional[str] The event to register. None overwrite bool Whether or not to clear every callback except for the current one being registered. False Note The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Examples: @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : await message . channel . send ( \"Got your message!\" ) @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : await message . channel . send ( \"Got your message!\" ) @client . on ( \"message_create\" ) async def on_message2 ( message : lefi . Message ) -> None : print ( message . content ) Source code in lefi/client.py def on ( self , event_name : Optional [ str ] = None , overwrite : bool = False ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Parameters: event_name (Optional[str]): The event to register. overwrite (bool): Whether or not to clear every callback except for the current one being registered. Note: The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: The decorated function after registering it as a listener. Example: ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: await message.channel.send(\"Got your message!\") ``` ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: await message.channel.send(\"Got your message!\") @client.on(\"message_create\") async def on_message2(message: lefi.Message) -> None: print(message.content) ``` \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: self . add_listener ( func , event_name , overwrite ) return func return inner","title":"on()"},{"location":"API-Reference/client/#lefi.client.Client.once","text":"A decorator that registers the decorated function to an event. Similar to lefi.Client.on but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: Name Type Description Default event_name Optional[str] The event to register. None Note Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with lefi.Client.once take precedence over the regular events. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Examples: @client . once ( \"ready\" ) async def on_ready ( client_user : lefi . User ) -> None : print ( f \"logged in as { client_user . username } \" ) Source code in lefi/client.py def once ( self , event_name : Optional [ str ] = None ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Similar to [lefi.Client.on][] but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: event_name (Optional[str]): The event to register. Note: Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with [lefi.Client.once][] take precedence over the regular events. Returns: The decorated function after registering it as a listener. Example: ```py @client.once(\"ready\") async def on_ready(client_user: lefi.User) -> None: print(f\"logged in as {client_user.username}\") ``` \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . once_events . setdefault ( name , []) callbacks . append ( func ) return func return inner","title":"once()"},{"location":"API-Reference/client/#lefi.client.Client.connect","text":"A method which starts the connection to the gateway. Source code in lefi/client.py async def connect ( self ) -> None : \"\"\" A method which starts the connection to the gateway. \"\"\" await self . ws . start ()","title":"connect()"},{"location":"API-Reference/client/#lefi.client.Client.login","text":"A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. Source code in lefi/client.py async def login ( self ) -> None : \"\"\" A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. \"\"\" await self . http . login ()","title":"login()"},{"location":"API-Reference/client/#lefi.client.Client.start","text":"A method which calls lefi.Client.login and lefi.Client.connect in that order. Source code in lefi/client.py async def start ( self ) -> None : \"\"\" A method which calls [lefi.Client.login][] and [lefi.Client.connect][] in that order. \"\"\" await asyncio . gather ( self . login (), self . connect ())","title":"start()"},{"location":"API-Reference/client/#lefi.client.Client.wait_for","text":"Waits for an event to be dispatched that passes the check. Parameters: Name Type Description Default event str The event to wait for. required check Callable[..., bool] A function that takes the same args as the event, and returns a bool. None timeout float The time to wait before stopping. None Returns: Type Description Any The return from a callback that matches with the event you are waiting for. Note The check has to take in the same args as the event. If no check is passed, everything will complete the check. Examples: @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : if message . content == \"wait for next!\" : next_message = await client . wait_for ( \"message_create\" , check = lambda msg : msg . author . id == 270700034985558017 ) await message . channel . send ( f \"got your message! ` { next_message . content } `\" ) Source code in lefi/client.py async def wait_for ( self , event : str , * , check : Callable [ ... , bool ] = None , timeout : float = None ) -> Any : \"\"\" Waits for an event to be dispatched that passes the check. Parameters: event (str): The event to wait for. check (Callable[..., bool]): A function that takes the same args as the event, and returns a bool. timeout (float): The time to wait before stopping. Returns: The return from a callback that matches with the event you are waiting for. Note: The check has to take in the same args as the event. If no check is passed, everything will complete the check. Example: ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: if message.content == \"wait for next!\": next_message = await client.wait_for( \"message_create\", check=lambda msg: msg.author.id == 270700034985558017 ) await message.channel.send(f\"got your message! `{next_message.content}`\") ``` \"\"\" future = self . loop . create_future () futures = self . futures . setdefault ( event , []) if check is None : check = lambda * _ : True futures . append (( future , check )) return await asyncio . wait_for ( future , timeout = timeout )","title":"wait_for()"},{"location":"API-Reference/client/#lefi.client.Client.get_message","text":"Grabs a lefi.Message instance if cached. Parameters: Name Type Description Default id int The message's ID. required Returns: Type Description Optional[Message] The lefi.Message instance related to the ID. Else None if not found. Source code in lefi/client.py def get_message ( self , id : int ) -> Optional [ Message ]: \"\"\" Grabs a [lefi.Message][] instance if cached. Parameters: id (int): The message's ID. Returns: The [lefi.Message][] instance related to the ID. Else None if not found. \"\"\" return self . _state . get_message ( id )","title":"get_message()"},{"location":"API-Reference/client/#lefi.client.Client.get_guild","text":"Grabs a lefi.Guild instance if cached. Parameters: Name Type Description Default id int The guild's ID. required Returns: Type Description Optional[Guild] The lefi.Guild instance related to the ID. Else None if not found Source code in lefi/client.py def get_guild ( self , id : int ) -> Optional [ Guild ]: \"\"\" Grabs a [lefi.Guild][] instance if cached. Parameters: id (int): The guild's ID. Returns: The [lefi.Guild][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_guild ( id )","title":"get_guild()"},{"location":"API-Reference/client/#lefi.client.Client.get_channel","text":"Grabs a lefi.Channel instance if cached. Parameters: Name Type Description Default id int The channel's ID. required Returns: Type Description Optional[Union[TextChannel, VoiceChannel, DMChannel, CategoryChannel, Channel]] The lefi.Channel instance related to the ID. Else None if not found Source code in lefi/client.py def get_channel ( self , id : int ) -> Optional [ Union [ TextChannel , VoiceChannel , DMChannel , CategoryChannel , Channel ] ]: \"\"\" Grabs a [lefi.Channel][] instance if cached. Parameters: id (int): The channel's ID. Returns: The [lefi.Channel][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_channel ( id )","title":"get_channel()"},{"location":"API-Reference/client/#lefi.client.Client.get_user","text":"Grabs a lefi.User instance if cached. Parameters: Name Type Description Default id int The user's ID. required Returns: Type Description Optional[User] The lefi.User instance related to the ID. Else None if not found Source code in lefi/client.py def get_user ( self , id : int ) -> Optional [ User ]: \"\"\" Grabs a [lefi.User][] instance if cached. Parameters: id (int): The user's ID. Returns: The [lefi.User][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_user ( id )","title":"get_user()"},{"location":"API-Reference/client/#lefi.client.Client.get_emoji","text":"Grabs a lefi.Emoji instance if cached. Parameters: Name Type Description Default id int The emoji's ID. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance related to the ID. Else None if not found Source code in lefi/client.py def get_emoji ( self , id : int ) -> Optional [ Emoji ]: \"\"\" Grabs a [lefi.Emoji][] instance if cached. Parameters: id (int): The emoji's ID. Returns: The [lefi.Emoji][] instance related to the ID. Else None if not found \"\"\" return self . _state . get_emoji ( id )","title":"get_emoji()"},{"location":"API-Reference/client/#lefi.client.Client.fetch_invite","text":"Fetches an invite from the API. Parameters: Name Type Description Default code str The invite code. required Returns: Type Description The lefi.Invite instance related to the code. Source code in lefi/client.py async def fetch_invite ( self , code : str , ** kwargs ): \"\"\" Fetches an invite from the API. Parameters: code (str): The invite code. Returns: The [lefi.Invite][] instance related to the code. \"\"\" data = await self . http . get_invite ( code , ** kwargs ) return Invite ( data = data , state = self . _state )","title":"fetch_invite()"},{"location":"API-Reference/client/#lefi.client.Client.fetch_guild","text":"Fetches a guild from the API. Parameters: Name Type Description Default guild_id int The guild's ID. required Returns: Type Description The lefi.Guild instance related to the ID. Source code in lefi/client.py async def fetch_guild ( self , guild_id : int ): \"\"\" Fetches a guild from the API. Parameters: guild_id (int): The guild's ID. Returns: The [lefi.Guild][] instance related to the ID. \"\"\" data = await self . http . get_guild ( guild_id ) return Guild ( data = data , state = self . _state )","title":"fetch_guild()"},{"location":"API-Reference/client/#lefi.client.Client.fetch_template","text":"Fetches a template from the API. Parameters: Name Type Description Default code str The template code. required Returns: Type Description GuildTemplate The lefi.GuildTemplate instance related to the code. Source code in lefi/client.py async def fetch_template ( self , code : str ) -> GuildTemplate : \"\"\" Fetches a template from the API. Parameters: code (str): The template code. Returns: The [lefi.GuildTemplate][] instance related to the code. \"\"\" data = await self . http . get_guild_template ( code ) return GuildTemplate ( data = data , state = self . _state )","title":"fetch_template()"},{"location":"API-Reference/embed/","text":"Embed Represents an Embed. Attributes: Name Type Description title Optional[str] The title of the embed. description Optional[str] The description of the embed. color Optional[int] The color of the embed. url Optional[str] The url of the embed. timestamp Optional[datetime.datetime] The timestamp of the embed. footer Optional[lefi.EmbedFooter] The footer of the embed. image Optional[lefi.EmbedImage] The image of the embed. video Optional[lefi.EmbedVideo] The video of the embed. provider Optional[lefi.EmbedProvider] The provider of the embed. author Optional[lefi.EmbedAuthor] The author of the embed. fields Optional[List[lefi.EmbedField]] The list of fields for the embed. Note You shouldn't be creating all the classes to pass in. Rather use the set_ methods of lefi.Embed __init__ ( self , * , title = None , description = None , color = None , url = None , timestamp = None , footer = None , image = None , video = None , provider = None , author = None , fields = None ) special Parameters: Name Type Description Default title Optional[str] The title of the embed. None description Optional[str] The description of the embed. None color Optional[int] The color of the embed. None url Optional[str] The url of the embed. None timestamp Optional[datetime.datetime] The timestamp of the embed. None footer Optional[lefi.EmbedFooter] The footer of the embed. None image Optional[lefi.EmbedImage] The image of the embed. None video Optional[lefi.EmbedVideo] The video of the embed. None provider Optional[lefi.EmbedProvider] The provider of the embed. None author Optional[lefi.EmbedAuthor] The author of the embed. None fields Optional[List[lefi.EmbedField]] The list of fields for the embed. None Source code in lefi/objects/embed.py def __init__ ( self , * , title : Optional [ str ] = None , description : Optional [ str ] = None , color : Optional [ int ] = None , url : Optional [ str ] = None , timestamp : Optional [ datetime . datetime ] = None , footer : Optional [ EmbedFooter ] = None , image : Optional [ EmbedImage ] = None , video : Optional [ EmbedVideo ] = None , provider : Optional [ EmbedProvider ] = None , author : Optional [ EmbedAuthor ] = None , fields : Optional [ List [ EmbedField ]] = None ) -> None : \"\"\" Parameters: title (Optional[str]): The title of the embed. description (Optional[str]): The description of the embed. color (Optional[int]): The color of the embed. url (Optional[str]): The url of the embed. timestamp (Optional[datetime.datetime]): The timestamp of the embed. footer (Optional[lefi.EmbedFooter]): The footer of the embed. image (Optional[lefi.EmbedImage]): The image of the embed. video (Optional[lefi.EmbedVideo]): The video of the embed. provider (Optional[lefi.EmbedProvider]): The provider of the embed. author (Optional[lefi.EmbedAuthor]): The author of the embed. fields (Optional[List[lefi.EmbedField]]): The list of fields for the embed. \"\"\" self . title = title self . description = description self . color = color self . url = url self . timestamp = timestamp . isoformat () if timestamp is not None else timestamp self . footer = footer self . image = image self . video = video self . provider = provider self . author = author self . fields = [] if fields is None else fields set_footer ( self , * , text , icon_url = None ) Sets the footer of the embed. Parameters: Name Type Description Default text str The text of the footer. required icon_url str The icon url of the footer None Source code in lefi/objects/embed.py def set_footer ( self , * , text : str , icon_url : Optional [ str ] = None ) -> Embed : \"\"\" Sets the footer of the embed. Parameters: text (str): The text of the footer. icon_url (str): The icon url of the footer \"\"\" self . footer = EmbedFooter ( text = text , icon_url = icon_url ) return self set_image ( self , * , url , height = None , width = None ) Sets the image of the embed. Parameters: Name Type Description Default url str The images url. required height Optional[int] The height of the image. None width Optional[int] The width of the image. None Source code in lefi/objects/embed.py def set_image ( self , * , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> Embed : \"\"\" Sets the image of the embed. Parameters: url (str): The images url. height (Optional[int]): The height of the image. width (Optional[int]): The width of the image. \"\"\" self . image = EmbedImage ( url = url , height = height , width = width ) return self set_video ( self , * , url , height = None , width = None ) Sets the video of the embed. Parameters: Name Type Description Default url str The video url. required height Optional[int] The height of the video. None width Optional[int] The width of the video. None Source code in lefi/objects/embed.py def set_video ( self , * , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> Embed : \"\"\" Sets the video of the embed. Parameters: url (str): The video url. height (Optional[int]): The height of the video. width (Optional[int]): The width of the video. \"\"\" self . video = EmbedVideo ( url = url , height = height , width = width ) return self set_provider ( self , * , name = None , url = None ) Sets the provider of the embed. Parameters: Name Type Description Default name Optional[str] The name of the provider. None url Optional[str] The url of the provider. None Source code in lefi/objects/embed.py def set_provider ( self , * , name : Optional [ str ] = None , url : Optional [ str ] = None ) -> Embed : \"\"\" Sets the provider of the embed. Parameters: name (Optional[str]): The name of the provider. url (Optional[str]): The url of the provider. \"\"\" self . provider = EmbedProvider ( name = name , url = url ) return self set_author ( self , * , name , url = None , icon_url = None ) Sets the author of the embed. Parameters: Name Type Description Default name str The name of the author. required url Optional[str] The url of the author. None icon_url Optional[str] The icon url of the author. None Source code in lefi/objects/embed.py def set_author ( self , * , name : str , url : Optional [ str ] = None , icon_url : Optional [ str ] = None ) -> Embed : \"\"\" Sets the author of the embed. Parameters: name (str): The name of the author. url (Optional[str]): The url of the author. icon_url (Optional[str]): The icon url of the author. \"\"\" self . author = EmbedAuthor ( name = name , url = url , icon_url = icon_url ) return self add_field ( self , * , name , value , inline = True ) Adds a field to the embed. Parameters: Name Type Description Default name str The name of the field. required value str The vaue of the field. required inline bool Whether the field is inline or not. True Source code in lefi/objects/embed.py def add_field ( self , * , name : str , value : str , inline : bool = True ) -> Embed : \"\"\" Adds a field to the embed. Parameters: name (str): The name of the field. value (str): The vaue of the field. inline (bool): Whether the field is inline or not. \"\"\" self . fields . append ( EmbedField ( name = name , value = value , inline = inline )) return self to_dict ( self ) Turns the embed into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the embed. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the embed into a raw dict. Returns: The dict representing the embed. \"\"\" payload : dict = {} update_payload ( payload , title = self . title , description = self . description , color = self . color , url = self . url , timestamp = self . timestamp , footer = self . _to_dict ( self . footer ), image = self . _to_dict ( self . image ), video = self . _to_dict ( self . video ), provider = self . _to_dict ( self . provider ), author = self . _to_dict ( self . author ), fields = [ field . to_dict () for field in self . fields ], ) return payload EmbedAuthor Represents an Embed's author. Attributes: Name Type Description name str The name of the author. url str The url of the author. icon_url str The icon url of the author. __init__ ( self , * , name , url = None , icon_url = None ) special Parameters: Name Type Description Default name str The name of the author. required url Optional[str] The url of the author. None icon_url Optional[str] The icon url of the author. None Source code in lefi/objects/embed.py def __init__ ( self , * , name : str , url : Optional [ str ] = None , icon_url : Optional [ str ] = None ) -> None : \"\"\" Parameters: name (str): The name of the author. url (Optional[str]): The url of the author. icon_url (Optional[str]): The icon url of the author. \"\"\" self . name = name self . url = url self . icon_url = icon_url to_dict ( self ) Turns the author to a raw dict. Returns: Type Description Dict[str, Any] The dict representing the author. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the author to a raw dict. Returns: The dict representing the author. \"\"\" return update_payload ({}, name = self . name , url = self . url , icon_url = self . icon_url ) EmbedField Represents an Embed's field. Attributes: Name Type Description name str The name of the field. value str The value of the field. inline bool Whether the field is inline or not. __init__ ( self , * , name , value , inline = True ) special Parameters: Name Type Description Default name str The name of the field. required value str The value of the field. required inline bool Whether the field is inline or not. True Source code in lefi/objects/embed.py def __init__ ( self , * , name : str , value : str , inline : bool = True ) -> None : \"\"\" Parameters: name (str): The name of the field. value (str): The value of the field. inline (bool): Whether the field is inline or not. \"\"\" self . name = name self . value = value self . inline = inline to_dict ( self ) Turns the field into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the field. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the field into a raw dict. Returns: The dict representing the field. \"\"\" return update_payload ({}, name = self . name , value = self . value , inline = self . inline ) EmbedFooter Represents an Embed's footer. Attributes: Name Type Description text str The content of the footer. icon_url str The icon url of the footer. __init__ ( self , * , text , icon_url = None ) special Parameters: Name Type Description Default text str The text for the footer. required icon_url Optional[str] The icon url for the footer. None Source code in lefi/objects/embed.py def __init__ ( self , * , text : str , icon_url : Optional [ str ] = None ) -> None : \"\"\" Parameters: text (str): The text for the footer. icon_url (Optional[str]): The icon url for the footer. \"\"\" self . text = text self . icon_url = icon_url to_dict ( self ) Turns the footer into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the footer. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the footer into a raw dict. Returns: The dict representing the footer. \"\"\" payload = { \"text\" : self . text } update_payload ( payload , icon_url = self . icon_url ) return payload EmbedImage Represents an Embed's image. Attributes: Name Type Description url str The image's url. height Optional[int] The height of the image. width Optional[int] The width of the image. to_dict ( self ) Turns the image into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the image. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the image into a raw dict. Returns: The dict representing the image. \"\"\" payload = { \"url\" : self . url } update_payload ( payload , height = self . height , width = self . width ) return payload EmbedProvider Representing an Embed's provider. Attributes: Name Type Description name str The name of the provider. url str The url of the provider. __init__ ( self , * , name = None , url = None ) special Parameters: Name Type Description Default name str The name of the provider. None url str The url of the provider. None Source code in lefi/objects/embed.py def __init__ ( self , * , name : Optional [ str ] = None , url : Optional [ str ] = None ) -> None : \"\"\" Parameters: name (str): The name of the provider. url (str): The url of the provider. \"\"\" self . name = name self . url = url to_dict ( self ) Turns the provider into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the provider. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the provider into a raw dict. Returns: The dict representing the provider. \"\"\" return update_payload ({}, name = self . name , url = self . url ) EmbedVideo ( EmbedImage ) Represents a Embed's video. Attributes: Name Type Description url str The videos url. height Optional[int] The height of the video. width Optional[int] The width of the video. __init__ ( self , * , url , height = None , width = None ) special Parameters: Name Type Description Default url str The url of the video. required height Optional[int] The height of the video. None width Optional[int] The width of the video. None Source code in lefi/objects/embed.py def __init__ ( self , * , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> None : \"\"\" Parameters: url (str): The url of the video. height (Optional[int]): The height of the video. width (Optional[int]): The width of the video. \"\"\" super () . __init__ ( url = url , height = height , width = width ) to_dict ( self ) Turns the image into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the video. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the image into a raw dict. Returns: The dict representing the video. \"\"\" return update_payload ({}, ** super () . to_dict ())","title":"Embed"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed","text":"Represents an Embed. Attributes: Name Type Description title Optional[str] The title of the embed. description Optional[str] The description of the embed. color Optional[int] The color of the embed. url Optional[str] The url of the embed. timestamp Optional[datetime.datetime] The timestamp of the embed. footer Optional[lefi.EmbedFooter] The footer of the embed. image Optional[lefi.EmbedImage] The image of the embed. video Optional[lefi.EmbedVideo] The video of the embed. provider Optional[lefi.EmbedProvider] The provider of the embed. author Optional[lefi.EmbedAuthor] The author of the embed. fields Optional[List[lefi.EmbedField]] The list of fields for the embed. Note You shouldn't be creating all the classes to pass in. Rather use the set_ methods of lefi.Embed","title":"Embed"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.__init__","text":"Parameters: Name Type Description Default title Optional[str] The title of the embed. None description Optional[str] The description of the embed. None color Optional[int] The color of the embed. None url Optional[str] The url of the embed. None timestamp Optional[datetime.datetime] The timestamp of the embed. None footer Optional[lefi.EmbedFooter] The footer of the embed. None image Optional[lefi.EmbedImage] The image of the embed. None video Optional[lefi.EmbedVideo] The video of the embed. None provider Optional[lefi.EmbedProvider] The provider of the embed. None author Optional[lefi.EmbedAuthor] The author of the embed. None fields Optional[List[lefi.EmbedField]] The list of fields for the embed. None Source code in lefi/objects/embed.py def __init__ ( self , * , title : Optional [ str ] = None , description : Optional [ str ] = None , color : Optional [ int ] = None , url : Optional [ str ] = None , timestamp : Optional [ datetime . datetime ] = None , footer : Optional [ EmbedFooter ] = None , image : Optional [ EmbedImage ] = None , video : Optional [ EmbedVideo ] = None , provider : Optional [ EmbedProvider ] = None , author : Optional [ EmbedAuthor ] = None , fields : Optional [ List [ EmbedField ]] = None ) -> None : \"\"\" Parameters: title (Optional[str]): The title of the embed. description (Optional[str]): The description of the embed. color (Optional[int]): The color of the embed. url (Optional[str]): The url of the embed. timestamp (Optional[datetime.datetime]): The timestamp of the embed. footer (Optional[lefi.EmbedFooter]): The footer of the embed. image (Optional[lefi.EmbedImage]): The image of the embed. video (Optional[lefi.EmbedVideo]): The video of the embed. provider (Optional[lefi.EmbedProvider]): The provider of the embed. author (Optional[lefi.EmbedAuthor]): The author of the embed. fields (Optional[List[lefi.EmbedField]]): The list of fields for the embed. \"\"\" self . title = title self . description = description self . color = color self . url = url self . timestamp = timestamp . isoformat () if timestamp is not None else timestamp self . footer = footer self . image = image self . video = video self . provider = provider self . author = author self . fields = [] if fields is None else fields","title":"__init__()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_footer","text":"Sets the footer of the embed. Parameters: Name Type Description Default text str The text of the footer. required icon_url str The icon url of the footer None Source code in lefi/objects/embed.py def set_footer ( self , * , text : str , icon_url : Optional [ str ] = None ) -> Embed : \"\"\" Sets the footer of the embed. Parameters: text (str): The text of the footer. icon_url (str): The icon url of the footer \"\"\" self . footer = EmbedFooter ( text = text , icon_url = icon_url ) return self","title":"set_footer()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_image","text":"Sets the image of the embed. Parameters: Name Type Description Default url str The images url. required height Optional[int] The height of the image. None width Optional[int] The width of the image. None Source code in lefi/objects/embed.py def set_image ( self , * , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> Embed : \"\"\" Sets the image of the embed. Parameters: url (str): The images url. height (Optional[int]): The height of the image. width (Optional[int]): The width of the image. \"\"\" self . image = EmbedImage ( url = url , height = height , width = width ) return self","title":"set_image()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_video","text":"Sets the video of the embed. Parameters: Name Type Description Default url str The video url. required height Optional[int] The height of the video. None width Optional[int] The width of the video. None Source code in lefi/objects/embed.py def set_video ( self , * , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> Embed : \"\"\" Sets the video of the embed. Parameters: url (str): The video url. height (Optional[int]): The height of the video. width (Optional[int]): The width of the video. \"\"\" self . video = EmbedVideo ( url = url , height = height , width = width ) return self","title":"set_video()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_provider","text":"Sets the provider of the embed. Parameters: Name Type Description Default name Optional[str] The name of the provider. None url Optional[str] The url of the provider. None Source code in lefi/objects/embed.py def set_provider ( self , * , name : Optional [ str ] = None , url : Optional [ str ] = None ) -> Embed : \"\"\" Sets the provider of the embed. Parameters: name (Optional[str]): The name of the provider. url (Optional[str]): The url of the provider. \"\"\" self . provider = EmbedProvider ( name = name , url = url ) return self","title":"set_provider()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_author","text":"Sets the author of the embed. Parameters: Name Type Description Default name str The name of the author. required url Optional[str] The url of the author. None icon_url Optional[str] The icon url of the author. None Source code in lefi/objects/embed.py def set_author ( self , * , name : str , url : Optional [ str ] = None , icon_url : Optional [ str ] = None ) -> Embed : \"\"\" Sets the author of the embed. Parameters: name (str): The name of the author. url (Optional[str]): The url of the author. icon_url (Optional[str]): The icon url of the author. \"\"\" self . author = EmbedAuthor ( name = name , url = url , icon_url = icon_url ) return self","title":"set_author()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.add_field","text":"Adds a field to the embed. Parameters: Name Type Description Default name str The name of the field. required value str The vaue of the field. required inline bool Whether the field is inline or not. True Source code in lefi/objects/embed.py def add_field ( self , * , name : str , value : str , inline : bool = True ) -> Embed : \"\"\" Adds a field to the embed. Parameters: name (str): The name of the field. value (str): The vaue of the field. inline (bool): Whether the field is inline or not. \"\"\" self . fields . append ( EmbedField ( name = name , value = value , inline = inline )) return self","title":"add_field()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.to_dict","text":"Turns the embed into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the embed. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the embed into a raw dict. Returns: The dict representing the embed. \"\"\" payload : dict = {} update_payload ( payload , title = self . title , description = self . description , color = self . color , url = self . url , timestamp = self . timestamp , footer = self . _to_dict ( self . footer ), image = self . _to_dict ( self . image ), video = self . _to_dict ( self . video ), provider = self . _to_dict ( self . provider ), author = self . _to_dict ( self . author ), fields = [ field . to_dict () for field in self . fields ], ) return payload","title":"to_dict()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedAuthor","text":"Represents an Embed's author. Attributes: Name Type Description name str The name of the author. url str The url of the author. icon_url str The icon url of the author.","title":"EmbedAuthor"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedAuthor.__init__","text":"Parameters: Name Type Description Default name str The name of the author. required url Optional[str] The url of the author. None icon_url Optional[str] The icon url of the author. None Source code in lefi/objects/embed.py def __init__ ( self , * , name : str , url : Optional [ str ] = None , icon_url : Optional [ str ] = None ) -> None : \"\"\" Parameters: name (str): The name of the author. url (Optional[str]): The url of the author. icon_url (Optional[str]): The icon url of the author. \"\"\" self . name = name self . url = url self . icon_url = icon_url","title":"__init__()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedAuthor.to_dict","text":"Turns the author to a raw dict. Returns: Type Description Dict[str, Any] The dict representing the author. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the author to a raw dict. Returns: The dict representing the author. \"\"\" return update_payload ({}, name = self . name , url = self . url , icon_url = self . icon_url )","title":"to_dict()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedField","text":"Represents an Embed's field. Attributes: Name Type Description name str The name of the field. value str The value of the field. inline bool Whether the field is inline or not.","title":"EmbedField"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedField.__init__","text":"Parameters: Name Type Description Default name str The name of the field. required value str The value of the field. required inline bool Whether the field is inline or not. True Source code in lefi/objects/embed.py def __init__ ( self , * , name : str , value : str , inline : bool = True ) -> None : \"\"\" Parameters: name (str): The name of the field. value (str): The value of the field. inline (bool): Whether the field is inline or not. \"\"\" self . name = name self . value = value self . inline = inline","title":"__init__()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedField.to_dict","text":"Turns the field into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the field. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the field into a raw dict. Returns: The dict representing the field. \"\"\" return update_payload ({}, name = self . name , value = self . value , inline = self . inline )","title":"to_dict()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedFooter","text":"Represents an Embed's footer. Attributes: Name Type Description text str The content of the footer. icon_url str The icon url of the footer.","title":"EmbedFooter"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedFooter.__init__","text":"Parameters: Name Type Description Default text str The text for the footer. required icon_url Optional[str] The icon url for the footer. None Source code in lefi/objects/embed.py def __init__ ( self , * , text : str , icon_url : Optional [ str ] = None ) -> None : \"\"\" Parameters: text (str): The text for the footer. icon_url (Optional[str]): The icon url for the footer. \"\"\" self . text = text self . icon_url = icon_url","title":"__init__()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedFooter.to_dict","text":"Turns the footer into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the footer. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the footer into a raw dict. Returns: The dict representing the footer. \"\"\" payload = { \"text\" : self . text } update_payload ( payload , icon_url = self . icon_url ) return payload","title":"to_dict()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedImage","text":"Represents an Embed's image. Attributes: Name Type Description url str The image's url. height Optional[int] The height of the image. width Optional[int] The width of the image.","title":"EmbedImage"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedImage.to_dict","text":"Turns the image into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the image. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the image into a raw dict. Returns: The dict representing the image. \"\"\" payload = { \"url\" : self . url } update_payload ( payload , height = self . height , width = self . width ) return payload","title":"to_dict()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedProvider","text":"Representing an Embed's provider. Attributes: Name Type Description name str The name of the provider. url str The url of the provider.","title":"EmbedProvider"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedProvider.__init__","text":"Parameters: Name Type Description Default name str The name of the provider. None url str The url of the provider. None Source code in lefi/objects/embed.py def __init__ ( self , * , name : Optional [ str ] = None , url : Optional [ str ] = None ) -> None : \"\"\" Parameters: name (str): The name of the provider. url (str): The url of the provider. \"\"\" self . name = name self . url = url","title":"__init__()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedProvider.to_dict","text":"Turns the provider into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the provider. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the provider into a raw dict. Returns: The dict representing the provider. \"\"\" return update_payload ({}, name = self . name , url = self . url )","title":"to_dict()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedVideo","text":"Represents a Embed's video. Attributes: Name Type Description url str The videos url. height Optional[int] The height of the video. width Optional[int] The width of the video.","title":"EmbedVideo"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedVideo.__init__","text":"Parameters: Name Type Description Default url str The url of the video. required height Optional[int] The height of the video. None width Optional[int] The width of the video. None Source code in lefi/objects/embed.py def __init__ ( self , * , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> None : \"\"\" Parameters: url (str): The url of the video. height (Optional[int]): The height of the video. width (Optional[int]): The width of the video. \"\"\" super () . __init__ ( url = url , height = height , width = width )","title":"__init__()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.EmbedVideo.to_dict","text":"Turns the image into a raw dict. Returns: Type Description Dict[str, Any] The dict representing the video. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict [ str , Any ]: \"\"\" Turns the image into a raw dict. Returns: The dict representing the video. \"\"\" return update_payload ({}, ** super () . to_dict ())","title":"to_dict()"},{"location":"API-Reference/errors/","text":"BadRequest ( HTTPException ) Represents a 400 error Forbidden ( HTTPException ) Represents a 403 error HTTPException ( Exception ) Error representing an error received from the API. Attributes: Name Type Description data Union[Dict[str, Any], str] data received from the API. messsage str The message for the error. code int The code of the error. NotFound ( HTTPException ) Represents a 404 error Unauthorized ( HTTPException ) Represents a 401 error","title":"Errors"},{"location":"API-Reference/errors/#lefi.errors.BadRequest","text":"Represents a 400 error","title":"BadRequest"},{"location":"API-Reference/errors/#lefi.errors.Forbidden","text":"Represents a 403 error","title":"Forbidden"},{"location":"API-Reference/errors/#lefi.errors.HTTPException","text":"Error representing an error received from the API. Attributes: Name Type Description data Union[Dict[str, Any], str] data received from the API. messsage str The message for the error. code int The code of the error.","title":"HTTPException"},{"location":"API-Reference/errors/#lefi.errors.NotFound","text":"Represents a 404 error","title":"NotFound"},{"location":"API-Reference/errors/#lefi.errors.Unauthorized","text":"Represents a 401 error","title":"Unauthorized"},{"location":"API-Reference/guild/","text":"Represents a Guild. id : int property readonly The ID of the guild. name : str property readonly The name of the guild. icon : str property readonly The icon of the guild. icon_hash : str property readonly The icon hash of the guild. splash : str property readonly The guild's splash. discovery_splash : str property readonly The guilds discovery splash. owner_id : int property readonly The ID of the owner. channels : List [ GuildChannels ] property readonly The list of lefi.Channel instances belonging to the guild. members : List [ Member ] property readonly The list of lefi.Member instances belonging to the guild. roles : List [ Role ] property readonly The list of lefi.Role instances belonging to the guild. emojis : List [ Emoji ] property readonly The list of lefi.Emoji instances belonging to the guild. default_role : Role property readonly The guild's default role. member_count : int property readonly The guild's member count afk_channel_id : int property readonly The ID of the guild's AFK channel. afk_channel : Optional [ GuildChannels ] property readonly The guild's AFK channel. features : List [ str ] property readonly The guild's features. mfa_level : MFALevel property readonly The guild's MFA level. application_id : Optional [ int ] property readonly The ID of the guild's application. edit ( self , ** kwargs ) async Edits the guild. Parameters: Name Type Description Default **kwargs Any Options to pass to lefi.HTTPClient.modify_guild {} Returns: Type Description Guild The guild after editting Source code in lefi/objects/guild.py async def edit ( self , ** kwargs ) -> Guild : \"\"\" Edits the guild. Parameters: **kwargs (Any): Options to pass to [lefi.HTTPClient.modify_guild][] Returns: The guild after editting \"\"\" data = await self . _state . http . modify_guild ( self . id , ** kwargs ) self . _data = data return self create_role ( self , name , ** kwargs ) async Creates a new role in the guild. Parameters: Name Type Description Default name str The name of the role. required **kwargs Any Extra options to pass to lefi.HTTPClient.create_guild_role . {} Returns: Type Description Role The newly created lefi.Role instance. Source code in lefi/objects/guild.py async def create_role ( self , name : str , ** kwargs ) -> Role : \"\"\" Creates a new role in the guild. Parameters: name (str): The name of the role. **kwargs (Any): Extra options to pass to [lefi.HTTPClient.create_guild_role][]. Returns: The newly created [lefi.Role][] instance. \"\"\" data = await self . _state . http . create_guild_role ( self . id , name = name , ** kwargs ) role = Role ( self . _state , data , self ) self . _roles [ role . id ] = role return role kick ( self , user ) async Kicks a member from the guild. Parameters: Name Type Description Default user lefi.User The user to kick. required Source code in lefi/objects/guild.py async def kick ( self , user : Snowflake ) -> None : \"\"\" Kicks a member from the guild. Parameters: user (lefi.User): The user to kick. \"\"\" await self . _state . http . remove_guild_member ( self . id , user . id ) ban ( self , user , * , delete_message_days = 0 ) async Bans a member from the guild. Parameters: Name Type Description Default member lefi.Member The member to ban. required delete_message_days int The number of days to delete messages for. 0 Source code in lefi/objects/guild.py async def ban ( self , user : Snowflake , * , delete_message_days : int = 0 ) -> None : \"\"\" Bans a member from the guild. Parameters: member (lefi.Member): The member to ban. delete_message_days (int): The number of days to delete messages for. \"\"\" await self . _state . http . create_guild_ban ( self . id , user . id , delete_message_days = delete_message_days ) unban ( self , user ) async Unbans a member from the guild. Parameters: Name Type Description Default user lefi.User The user to unban. required Source code in lefi/objects/guild.py async def unban ( self , user : Snowflake ) -> None : \"\"\" Unbans a member from the guild. Parameters: user (lefi.User): The user to unban. \"\"\" await self . _state . http . remove_guild_ban ( self . id , user . id ) fetch_bans ( self ) async Fetches the bans from the guild. Returns: Type Description List[BanEntry] A list of lefi.BanEntry instances. Source code in lefi/objects/guild.py async def fetch_bans ( self ) -> List [ BanEntry ]: \"\"\" Fetches the bans from the guild. Returns: A list of [lefi.BanEntry][] instances. \"\"\" data = await self . _state . http . get_guild_bans ( self . id ) return [ BanEntry ( payload [ \"user\" ], payload [ \"reason\" ]) for payload in data ] fetch_ban ( self , user ) async Fetches the ban from the guild. Parameters: Name Type Description Default user lefi.User The user to fetch the ban for. required Returns: Type Description BanEntry The lefi.BanEntry instance. Source code in lefi/objects/guild.py async def fetch_ban ( self , user : Snowflake ) -> BanEntry : \"\"\" Fetches the ban from the guild. Parameters: user (lefi.User): The user to fetch the ban for. Returns: The [lefi.BanEntry][] instance. \"\"\" data = await self . _state . http . get_guild_ban ( self . id , user . id ) return BanEntry ( data [ \"user\" ], data [ \"reason\" ]) fetch_invites ( self ) async Fetches the guild's invites. Returns: Type Description List[Invite] A list of lefi.Invite instances. Source code in lefi/objects/guild.py async def fetch_invites ( self ) -> List [ Invite ]: \"\"\" Fetches the guild's invites. Returns: A list of [lefi.Invite][] instances. \"\"\" data = await self . _state . http . get_guild_invites ( self . id ) return [ Invite ( self . _state , payload ) for payload in data ] fetch_integrations ( self ) async Fetches the guild's integrations. Returns: Type Description List[Integration] A list of lefi.Integration instances. Source code in lefi/objects/guild.py async def fetch_integrations ( self ) -> List [ Integration ]: \"\"\" Fetches the guild's integrations. Returns: A list of [lefi.Integration][] instances. \"\"\" data = await self . _state . http . get_guild_integrations ( self . id ) return [ Integration ( self . _state , payload , self ) for payload in data ] fetch_vanity_url ( self ) async Fetches the guild's vanity url. Returns: Type Description The vanity url. Source code in lefi/objects/guild.py async def fetch_vanity_url ( self ): \"\"\" Fetches the guild's vanity url. Returns: The vanity url. \"\"\" data = await self . _state . http . get_guild_vanity_url ( self . id ) return PartialInvite ( data ) fetch_templates ( self ) async Fetches the guild's templates. Returns: Type Description List[GuildTemplate] A list of lefi.GuildTemplate instances. Source code in lefi/objects/guild.py async def fetch_templates ( self ) -> List [ GuildTemplate ]: \"\"\" Fetches the guild's templates. Returns: A list of [lefi.GuildTemplate][] instances. \"\"\" data = await self . _state . http . get_guild_templates ( self . id ) return [ GuildTemplate ( self . _state , payload ) for payload in data ] query ( self , q , * , limit = 1 ) Queries the guild for a specific string. Parameters: Name Type Description Default q str The query string. required limit int The maximum number of results to return. 1 Returns: Type Description AsyncIterator[Member] A list of lefi.Member instances. Source code in lefi/objects/guild.py async def query ( self , q : str , * , limit : int = 1 ) -> AsyncIterator [ Member ]: \"\"\" Queries the guild for a specific string. Parameters: q (str): The query string. limit (int): The maximum number of results to return. Returns: A list of [lefi.Member][] instances. \"\"\" from .member import Member data = await self . _state . http . search_guild_members ( self . id , query = q , limit = limit ) for payload in data : member = Member ( self . _state , payload , self ) yield member get_member ( self , member_id ) Gets a member from the guilds member cache. Parameters: Name Type Description Default member_id int The ID of the member. required Returns: Type Description Optional[Member] The lefi.Member instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_member ( self , member_id : int ) -> Optional [ Member ]: \"\"\" Gets a member from the guilds member cache. Parameters: member_id (int): The ID of the member. Returns: The [lefi.Member][] instance corresponding to the ID if found. \"\"\" return self . _members . get ( member_id ) get_channel ( self , channel_id ) Gets a channel from the guilds channel cache. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Optional[GuildChannels] The lefi.Channel instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_channel ( self , channel_id : int ) -> Optional [ GuildChannels ]: \"\"\" Gets a channel from the guilds channel cache. Parameters: channel_id (int): The ID of the channel. Returns: The [lefi.Channel][] instance corresponding to the ID if found. \"\"\" return self . _channels . get ( channel_id ) get_role ( self , role_id ) Gets a role from the guilds role cache. Parameters: Name Type Description Default role_id int The ID of the role. required Returns: Type Description Optional[Role] The lefi.Role instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_role ( self , role_id : int ) -> Optional [ Role ]: \"\"\" Gets a role from the guilds role cache. Parameters: role_id (int): The ID of the role. Returns: The [lefi.Role][] instance corresponding to the ID if found. \"\"\" return self . _roles . get ( role_id ) get_emoji ( self , emoji_id ) Gets an emoji from the guilds emoji cache. Parameters: Name Type Description Default emoji_id int The ID of the emoji. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_emoji ( self , emoji_id : int ) -> Optional [ Emoji ]: \"\"\" Gets an emoji from the guilds emoji cache. Parameters: emoji_id (int): The ID of the emoji. Returns: The [lefi.Emoji][] instance corresponding to the ID if found. \"\"\" return self . _emojis . get ( emoji_id )","title":"Guild"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.id","text":"The ID of the guild.","title":"id"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.name","text":"The name of the guild.","title":"name"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.icon","text":"The icon of the guild.","title":"icon"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.icon_hash","text":"The icon hash of the guild.","title":"icon_hash"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.splash","text":"The guild's splash.","title":"splash"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.discovery_splash","text":"The guilds discovery splash.","title":"discovery_splash"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.owner_id","text":"The ID of the owner.","title":"owner_id"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.channels","text":"The list of lefi.Channel instances belonging to the guild.","title":"channels"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.members","text":"The list of lefi.Member instances belonging to the guild.","title":"members"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.roles","text":"The list of lefi.Role instances belonging to the guild.","title":"roles"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.emojis","text":"The list of lefi.Emoji instances belonging to the guild.","title":"emojis"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.default_role","text":"The guild's default role.","title":"default_role"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.member_count","text":"The guild's member count","title":"member_count"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.afk_channel_id","text":"The ID of the guild's AFK channel.","title":"afk_channel_id"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.afk_channel","text":"The guild's AFK channel.","title":"afk_channel"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.features","text":"The guild's features.","title":"features"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.mfa_level","text":"The guild's MFA level.","title":"mfa_level"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.application_id","text":"The ID of the guild's application.","title":"application_id"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.edit","text":"Edits the guild. Parameters: Name Type Description Default **kwargs Any Options to pass to lefi.HTTPClient.modify_guild {} Returns: Type Description Guild The guild after editting Source code in lefi/objects/guild.py async def edit ( self , ** kwargs ) -> Guild : \"\"\" Edits the guild. Parameters: **kwargs (Any): Options to pass to [lefi.HTTPClient.modify_guild][] Returns: The guild after editting \"\"\" data = await self . _state . http . modify_guild ( self . id , ** kwargs ) self . _data = data return self","title":"edit()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.create_role","text":"Creates a new role in the guild. Parameters: Name Type Description Default name str The name of the role. required **kwargs Any Extra options to pass to lefi.HTTPClient.create_guild_role . {} Returns: Type Description Role The newly created lefi.Role instance. Source code in lefi/objects/guild.py async def create_role ( self , name : str , ** kwargs ) -> Role : \"\"\" Creates a new role in the guild. Parameters: name (str): The name of the role. **kwargs (Any): Extra options to pass to [lefi.HTTPClient.create_guild_role][]. Returns: The newly created [lefi.Role][] instance. \"\"\" data = await self . _state . http . create_guild_role ( self . id , name = name , ** kwargs ) role = Role ( self . _state , data , self ) self . _roles [ role . id ] = role return role","title":"create_role()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.kick","text":"Kicks a member from the guild. Parameters: Name Type Description Default user lefi.User The user to kick. required Source code in lefi/objects/guild.py async def kick ( self , user : Snowflake ) -> None : \"\"\" Kicks a member from the guild. Parameters: user (lefi.User): The user to kick. \"\"\" await self . _state . http . remove_guild_member ( self . id , user . id )","title":"kick()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.ban","text":"Bans a member from the guild. Parameters: Name Type Description Default member lefi.Member The member to ban. required delete_message_days int The number of days to delete messages for. 0 Source code in lefi/objects/guild.py async def ban ( self , user : Snowflake , * , delete_message_days : int = 0 ) -> None : \"\"\" Bans a member from the guild. Parameters: member (lefi.Member): The member to ban. delete_message_days (int): The number of days to delete messages for. \"\"\" await self . _state . http . create_guild_ban ( self . id , user . id , delete_message_days = delete_message_days )","title":"ban()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.unban","text":"Unbans a member from the guild. Parameters: Name Type Description Default user lefi.User The user to unban. required Source code in lefi/objects/guild.py async def unban ( self , user : Snowflake ) -> None : \"\"\" Unbans a member from the guild. Parameters: user (lefi.User): The user to unban. \"\"\" await self . _state . http . remove_guild_ban ( self . id , user . id )","title":"unban()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_bans","text":"Fetches the bans from the guild. Returns: Type Description List[BanEntry] A list of lefi.BanEntry instances. Source code in lefi/objects/guild.py async def fetch_bans ( self ) -> List [ BanEntry ]: \"\"\" Fetches the bans from the guild. Returns: A list of [lefi.BanEntry][] instances. \"\"\" data = await self . _state . http . get_guild_bans ( self . id ) return [ BanEntry ( payload [ \"user\" ], payload [ \"reason\" ]) for payload in data ]","title":"fetch_bans()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_ban","text":"Fetches the ban from the guild. Parameters: Name Type Description Default user lefi.User The user to fetch the ban for. required Returns: Type Description BanEntry The lefi.BanEntry instance. Source code in lefi/objects/guild.py async def fetch_ban ( self , user : Snowflake ) -> BanEntry : \"\"\" Fetches the ban from the guild. Parameters: user (lefi.User): The user to fetch the ban for. Returns: The [lefi.BanEntry][] instance. \"\"\" data = await self . _state . http . get_guild_ban ( self . id , user . id ) return BanEntry ( data [ \"user\" ], data [ \"reason\" ])","title":"fetch_ban()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_invites","text":"Fetches the guild's invites. Returns: Type Description List[Invite] A list of lefi.Invite instances. Source code in lefi/objects/guild.py async def fetch_invites ( self ) -> List [ Invite ]: \"\"\" Fetches the guild's invites. Returns: A list of [lefi.Invite][] instances. \"\"\" data = await self . _state . http . get_guild_invites ( self . id ) return [ Invite ( self . _state , payload ) for payload in data ]","title":"fetch_invites()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_integrations","text":"Fetches the guild's integrations. Returns: Type Description List[Integration] A list of lefi.Integration instances. Source code in lefi/objects/guild.py async def fetch_integrations ( self ) -> List [ Integration ]: \"\"\" Fetches the guild's integrations. Returns: A list of [lefi.Integration][] instances. \"\"\" data = await self . _state . http . get_guild_integrations ( self . id ) return [ Integration ( self . _state , payload , self ) for payload in data ]","title":"fetch_integrations()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_vanity_url","text":"Fetches the guild's vanity url. Returns: Type Description The vanity url. Source code in lefi/objects/guild.py async def fetch_vanity_url ( self ): \"\"\" Fetches the guild's vanity url. Returns: The vanity url. \"\"\" data = await self . _state . http . get_guild_vanity_url ( self . id ) return PartialInvite ( data )","title":"fetch_vanity_url()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_templates","text":"Fetches the guild's templates. Returns: Type Description List[GuildTemplate] A list of lefi.GuildTemplate instances. Source code in lefi/objects/guild.py async def fetch_templates ( self ) -> List [ GuildTemplate ]: \"\"\" Fetches the guild's templates. Returns: A list of [lefi.GuildTemplate][] instances. \"\"\" data = await self . _state . http . get_guild_templates ( self . id ) return [ GuildTemplate ( self . _state , payload ) for payload in data ]","title":"fetch_templates()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.query","text":"Queries the guild for a specific string. Parameters: Name Type Description Default q str The query string. required limit int The maximum number of results to return. 1 Returns: Type Description AsyncIterator[Member] A list of lefi.Member instances. Source code in lefi/objects/guild.py async def query ( self , q : str , * , limit : int = 1 ) -> AsyncIterator [ Member ]: \"\"\" Queries the guild for a specific string. Parameters: q (str): The query string. limit (int): The maximum number of results to return. Returns: A list of [lefi.Member][] instances. \"\"\" from .member import Member data = await self . _state . http . search_guild_members ( self . id , query = q , limit = limit ) for payload in data : member = Member ( self . _state , payload , self ) yield member","title":"query()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.get_member","text":"Gets a member from the guilds member cache. Parameters: Name Type Description Default member_id int The ID of the member. required Returns: Type Description Optional[Member] The lefi.Member instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_member ( self , member_id : int ) -> Optional [ Member ]: \"\"\" Gets a member from the guilds member cache. Parameters: member_id (int): The ID of the member. Returns: The [lefi.Member][] instance corresponding to the ID if found. \"\"\" return self . _members . get ( member_id )","title":"get_member()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.get_channel","text":"Gets a channel from the guilds channel cache. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Optional[GuildChannels] The lefi.Channel instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_channel ( self , channel_id : int ) -> Optional [ GuildChannels ]: \"\"\" Gets a channel from the guilds channel cache. Parameters: channel_id (int): The ID of the channel. Returns: The [lefi.Channel][] instance corresponding to the ID if found. \"\"\" return self . _channels . get ( channel_id )","title":"get_channel()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.get_role","text":"Gets a role from the guilds role cache. Parameters: Name Type Description Default role_id int The ID of the role. required Returns: Type Description Optional[Role] The lefi.Role instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_role ( self , role_id : int ) -> Optional [ Role ]: \"\"\" Gets a role from the guilds role cache. Parameters: role_id (int): The ID of the role. Returns: The [lefi.Role][] instance corresponding to the ID if found. \"\"\" return self . _roles . get ( role_id )","title":"get_role()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.get_emoji","text":"Gets an emoji from the guilds emoji cache. Parameters: Name Type Description Default emoji_id int The ID of the emoji. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_emoji ( self , emoji_id : int ) -> Optional [ Emoji ]: \"\"\" Gets an emoji from the guilds emoji cache. Parameters: emoji_id (int): The ID of the emoji. Returns: The [lefi.Emoji][] instance corresponding to the ID if found. \"\"\" return self . _emojis . get ( emoji_id )","title":"get_emoji()"},{"location":"API-Reference/http/","text":"A class used to send and handle requests to the discord API. Attributes: Name Type Description token str The clients token, used for authorization. loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop being used. session aiohttp.ClientSession The aiohttp.ClientSession to use for sending requests. Danger This class is used internally, this is not intended to be called directly . __init__ ( self , token , loop ) special Parameters: Name Type Description Default token str The token to use for authorzation. required loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop to use. required session aiohttp.ClientSession The aiohttp.ClientSession to use for sending requests. required Source code in lefi/http.py def __init__ ( self , token : str , loop : asyncio . AbstractEventLoop ) -> None : \"\"\" Parameters: token (str): The token to use for authorzation. loop (asyncio.AbstractEventLoop): The [asyncio.AbstractEventLoop][] to use. session (aiohttp.ClientSession): The [aiohttp.ClientSession][] to use for sending requests. \"\"\" self . token : str = token self . loop : asyncio . AbstractEventLoop = loop self . session : aiohttp . ClientSession = None # type: ignore self . ratelimiter = RatelimitHandler ( self ) self . _lock = asyncio . Lock () request ( self , method , route , ** kwargs ) async Makes a request to the discord API. Parameters: Name Type Description Default method str The method for the request. required route lefi.Route The endpoint which to send the request to. required **kwargs Any Any extra options to pass to aiohttp.ClientSession.request {} Returns: Type Description Any The data returned from the request. Source code in lefi/http.py async def request ( self , method : str , route : Route , ** kwargs ) -> Any : \"\"\" Makes a request to the discord API. Parameters: method (str): The method for the request. route (lefi.Route): The endpoint which to send the request to. **kwargs (Any): Any extra options to pass to [aiohttp.ClientSession.request][] Returns: The data returned from the request. Raises: [lefi.errors.HTTPException][] if any error was received from the request. \"\"\" if self . session is None or self . session . closed : self . session = await self . _create_session () headers : Dict = { \"Authorization\" : f \"Bot { self . token } \" } if reason := kwargs . get ( \"reason\" ): headers [ \"X-Audit-Log-Reason\" ] = reason if form := kwargs . pop ( \"form\" , []): formdata = aiohttp . FormData () payload = kwargs . pop ( \"json\" , None ) if payload : formdata . add_field ( \"payload_json\" , value = json . dumps ( payload )) for params in form : formdata . add_field ( ** params ) kwargs [ \"data\" ] = formdata await self . ratelimiter . global_ . wait () head = await self . session . request ( \"HEAD\" , route . url , headers = headers ) semaphore = self . ratelimiter . set ( route . bucket , int ( head . headers . get ( \"X-Ratelimit-Limit\" , 1 )) ) async with self . _lock : await semaphore . acquire () resp = await self . session . request ( method , route . url , ** kwargs , headers = headers ) reset_after : float = float ( resp . headers . get ( \"X-Ratelimit-Reset-After\" , 0 )) remaining : int = int ( resp . headers . get ( \"X-Ratelimit-Remaining\" , 1 )) if resp . status in ( 200 , 201 , 204 , 304 ): self . ratelimiter . release ( route . bucket , reset_after ) try : return await resp . json () except aiohttp . ContentTypeError : return await resp . text () if remaining == 0 and resp . status != 429 : self . ratelimiter . release ( route . bucket , reset_after ) elif resp . status == 429 : data = await resp . json () if data . get ( \"global\" , False ): self . ratelimiter . global_ . clear () self . loop . call_later ( data [ \"retry_after\" ], self . ratelimiter . global_ . set ) await asyncio . sleep ( data [ \"retry_after\" ]) error = self . ERRORS . get ( resp . status , HTTPException ) raise error ( await resp . json ()) get_bot_gateway ( self ) async A method which gets the gateway url. Returns: Type Description Dict A dict which should contain the url. Source code in lefi/http.py async def get_bot_gateway ( self ) -> Dict : \"\"\" A method which gets the gateway url. Returns: A dict which should contain the url. \"\"\" return await self . request ( \"GET\" , Route ( \"/gateway/bot\" )) ws_connect ( self , url ) async A method which attempts to connect to the websocket. Returns: Type Description aiohttp.ClientWebSocketResponse A aiohttp.ClientWebSocketResponse instance. Source code in lefi/http.py async def ws_connect ( self , url : str ) -> aiohttp . ClientWebSocketResponse : \"\"\" A method which attempts to connect to the websocket. Returns: A [aiohttp.ClientWebSocketResponse][] instance. \"\"\" return await self . session . ws_connect ( url ) login ( self ) async Checks to see if the token given is valid. Source code in lefi/http.py async def login ( self ) -> None : \"\"\" Checks to see if the token given is valid. Raises: ValueError if an invalid token was passed. \"\"\" try : await self . get_current_user () except ( Forbidden , Unauthorized ): raise ValueError ( \"Invalid token\" ) get_channel ( self , channel_id ) async Makes an API call to get a channel. Parameters: Name Type Description Default channel_id int The channel's ID. required Returns: Type Description Dict[str, Any] A dict representing the channel. Source code in lefi/http.py async def get_channel ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a channel. Parameters: channel_id (int): The channel's ID. Returns: A dict representing the channel. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } \" ), channel_id = channel_id ) edit_text_channel ( self , channel_id , * , name = None , type = None , position = None , topic = None , nsfw = None , rate_limit_per_user = None , permission_overwrites = None , default_auto_archive_duration = None ) async Makes an API call to edit a text channel. Parameters: Name Type Description Default channel_id int The channel id representing the channel to edit. required name Optional[str] The new name for the channel. None type Optional[int] The new type for the channel. None position Optional[int] The new position for the channel. None topic Optional[str] The new topic for the channel. None nsfw Optional[bool] Whether or not the channel should be NSFW. None rate_limit_per_user Optional[int] The new slowmode of the channel. None permissions_overwrites Optional[List[Dict[str, Any]]] The new permission overwrites for the channel. required default_auto_archive_duration Optional[List[Dict[str, Any]]] New time for threads to auto archive. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_text_channel ( self , channel_id : int , * , name : Optional [ str ] = None , type : Optional [ int ] = None , position : Optional [ int ] = None , topic : Optional [ str ] = None , nsfw : Optional [ bool ] = None , rate_limit_per_user : Optional [ int ] = None , permission_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , default_auto_archive_duration : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a text channel. Parameters: channel_id (int): The channel id representing the channel to edit. name (Optional[str]): The new name for the channel. type (Optional[int]): The new type for the channel. position (Optional[int]): The new position for the channel. topic (Optional[str]): The new topic for the channel. nsfw (Optional[bool]): Whether or not the channel should be NSFW. rate_limit_per_user (Optional[int]): The new slowmode of the channel. permissions_overwrites (Optional[List[Dict[str, Any]]]): The new permission overwrites for the channel. default_auto_archive_duration (Optional[List[Dict[str, Any]]]): New time for threads to auto archive. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , type = type , position = position , topic = topic , nsfw = nsfw , rate_limit_per_user = rate_limit_per_user , permission_overwrites = permission_overwrites , default_auto_archive_duration = default_auto_archive_duration , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ), json = payload , ) edit_voice_channel ( self , channel_id , * , name = None , position = None , bitrate = None , user_limit = None , rtc_region = None , video_quality_mode = None , sync_permissions = None , permissions_overwrites = None ) async Makes an API call to edit a voice channel. Parameters: Name Type Description Default channel_id int The ID representing the voice channel to edit. required name Optional[str] The new name to give the channel. None position Optional[int] The new position of the channel. None bitrate Optional[int] The new bitrate of the channel. None user_limit Optional[int] The new user limit of the channel. None rtc_region Optional[str] The new rtc region of the channel. None video_quality_mode Optional[int] The new video quality of the channel. None sync_permissions Optional[bool] Whether or not to sync the permissions. None permissions_overwrites Optional[List[Dict[str, Any]]] The new permissions ovewrites for the channel. None Returns: Type Description Dict[str, Any] The data received from the API after the call. Source code in lefi/http.py async def edit_voice_channel ( self , channel_id : int , * , name : Optional [ str ] = None , position : Optional [ int ] = None , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , rtc_region : Optional [ str ] = None , video_quality_mode : Optional [ int ] = None , sync_permissions : Optional [ bool ] = None , permissions_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a voice channel. Parameters: channel_id (int): The ID representing the voice channel to edit. name (Optional[str]): The new name to give the channel. position (Optional[int]): The new position of the channel. bitrate (Optional[int]): The new bitrate of the channel. user_limit (Optional[int]): The new user limit of the channel. rtc_region (Optional[str]): The new rtc region of the channel. video_quality_mode (Optional[int]): The new video quality of the channel. sync_permissions (Optional[bool]): Whether or not to sync the permissions. permissions_overwrites (Optional[List[Dict[str, Any]]]): The new permissions ovewrites for the channel. Returns: The data received from the API after the call. \"\"\" payload = update_payload ( {}, name = name , position = position , bitrate = bitrate , user_limit = user_limit , rtc_region = rtc_region , video_quality_mode = video_quality_mode , sync_permissions = sync_permissions , permissions_overwrites = permissions_overwrites , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ), json = payload , ) get_channel_messages ( self , channel_id , * , around = None , before = None , after = None , limit = 50 ) async Makes an API call to get a list of messages in a channel. Only returns messages within the range of the parameters passed. Parameters: Name Type Description Default channel_id int The ID representing the channel. required around Optional[int] Gets messages around this message ID. None before Optional[int] Gets messages before this message ID. None after Optional[int] Gets messages after this message ID. None limit int THe amount of messages to grab. 50 Returns: Type Description List[Dict[str, Any]] The data received after making the call. Source code in lefi/http.py async def get_channel_messages ( self , channel_id : int , * , around : Optional [ int ] = None , before : Optional [ int ] = None , after : Optional [ int ] = None , limit : int = 50 , ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get a list of messages in a channel. Only returns messages within the range of the parameters passed. Parameters: channel_id (int): The ID representing the channel. around (Optional[int]): Gets messages around this message ID. before (Optional[int]): Gets messages before this message ID. after (Optional[int]): Gets messages after this message ID. limit (int): THe amount of messages to grab. Returns: The data received after making the call. \"\"\" params = { \"limit\" : limit } update_payload ( params , around = around , before = before , after = after ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages\" , channel_id = channel_id ), params = params , ) get_channel_message ( self , channel_id , message_id ) async Makes an API call to get a specific message by ID. Parameters: Name Type Description Default channel_id int The channel ID which the message is in. required message_id int The messages ID. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_channel_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a specific message by ID. Parameters: channel_id (int): The channel ID which the message is in. message_id (int): The messages ID. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), ) send_message ( self , channel_id , content = None , * , tts = False , embeds = None , allowed_mentions = None , message_reference = None , components = None , sticker_ids = None , files = None ) async Makes an API call to send a message. Parameters: Name Type Description Default channel_id int The ID of the channel which to send the message in. required content Optional[str] The content of the message. None tts bool Whether or not to send the message with text-to-speech. False embeds Optional[List[Dict[str, Any]]] The list of embeds to send. None message_reference Optional[Dict[str, Any]] The messages to reference when sending the message. None components Optional[List[Dict[str, Any]]] The components to attach to the message. None sticker_ids Optional[List[int]] The stickers to send with the message. None Note Max embeds that can sent at a time is 10. Source code in lefi/http.py async def send_message ( self , channel_id : int , content : Optional [ str ] = None , * , tts : bool = False , embeds : Optional [ List [ Dict [ str , Any ]]] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , message_reference : Optional [ Dict [ str , Any ]] = None , components : Optional [ List [ Dict [ str , Any ]]] = None , sticker_ids : Optional [ List [ int ]] = None , files : Optional [ List [ io . BufferedIOBase ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to send a message. Parameters: channel_id (int): The ID of the channel which to send the message in. content (Optional[str]): The content of the message. tts (bool): Whether or not to send the message with text-to-speech. embeds (Optional[List[Dict[str, Any]]]): The list of embeds to send. message_reference (Optional[Dict[str, Any]]): The messages to reference when sending the message. components (Optional[List[Dict[str, Any]]]): The components to attach to the message. sticker_ids (Optional[List[int]]): The stickers to send with the message. Note: Max embeds that can sent at a time is 10. \"\"\" payload = { \"tts\" : tts } files = files or [] form = [] for index , file in enumerate ( files ): form . append ( { \"name\" : f \"file- { index } \" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) update_payload ( payload , content = content , embeds = embeds , allowed_mentions = allowed_mentions , message_reference = message_reference , components = components , sticker_ids = sticker_ids , ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages\" , channel_id = channel_id ), json = payload , form = form , ) crosspost_message ( self , channel_id , message_id ) async Makes an API call to crosspost a message. Parameters: Name Type Description Default channel_id int The ID of the channel to crosspost to. required message_id int The ID of the message which to crosspost. required Returns: Type Description Dict[str, Any] The data received after making the call. Source code in lefi/http.py async def crosspost_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to crosspost a message. Parameters: channel_id (int): The ID of the channel to crosspost to. message_id (int): The ID of the message which to crosspost. Returns: The data received after making the call. \"\"\" return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /crosspost\" , channel_id = channel_id , ), ) create_reaction ( self , channel_id , message_id , emoji ) async Makes an API call to add a reaction to a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message which to add the reaction to. required emoji str The emoji which to add. required Returns: Type Description The data received from the API after making the call. Source code in lefi/http.py async def create_reaction ( self , channel_id : int , message_id : int , emoji : str ): \"\"\" Makes an API call to add a reaction to a message. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message which to add the reaction to. emoji (str): The emoji which to add. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } /@me\" , channel_id = channel_id , ), ) delete_reaction ( self , channel_id , message_id , emoji , user_id = None ) async Makes an API call to delete a reaction. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required emoji str The emoji to remove from the message's reactions. required user_id Optional[int] The ID of the user to remove from the reactions. None Returns: Type Description None The data received from the API after making the call. Note If no user_id is given it will delete the client's reaction. Source code in lefi/http.py async def delete_reaction ( self , channel_id : int , message_id : int , emoji : str , user_id : Optional [ int ] = None , ) -> None : \"\"\" Makes an API call to delete a reaction. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. emoji (str): The emoji to remove from the message's reactions. user_id (Optional[int]): The ID of the user to remove from the reactions. Returns: The data received from the API after making the call. Note: If no user_id is given it will delete the client's reaction. \"\"\" if user_id is not None : path = f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } / { user_id } \" else : path = f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } /@me\" await self . request ( \"DELETE\" , Route ( path , channel_id = channel_id )) get_reactions ( self , channel_id , message_id , emoji , * , after = None , limit = 25 ) async Makes an API call to get a list of users who reacted to a message.. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required emoji str The emoji from which to grab users from. required after int Grab users after this user ID. None limit int The max amount of users to grab. 25 Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_reactions ( self , channel_id : int , message_id : int , emoji : str , * , after : Optional [ int ] = None , limit : int = 25 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a list of users who reacted to a message.. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. emoji (str): The emoji from which to grab users from. after (int): Grab users after this user ID. limit (int): The max amount of users to grab. Returns: The data received from the API after making the call. \"\"\" params = { \"limit\" : limit } update_payload ( params , after = after ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } \" , channel_id = channel_id , ), params = params , ) delete_all_reactions ( self , channel_id , message_id , emoji ) async Makes an API call to remove all reactions of a message. Parameters: Name Type Description Default channel_id int The channel which the target message is in. required message_id int The ID of the message. required emoji str The reaction to remove. required Returns: Type Description Dict[str, Any] The data received from the API After making the call. Source code in lefi/http.py async def delete_all_reactions ( self , channel_id : int , message_id : int , emoji : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to remove all reactions of a message. Parameters: channel_id (int): The channel which the target message is in. message_id (int): The ID of the message. emoji (str): The reaction to remove. Returns: The data received from the API After making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } \" , channel_id = channel_id , ), ) edit_message ( self , channel_id , message_id , * , content = None , embeds = None , flags = None , allowed_mentions = None , attachments = None , components = None ) async Makes an API call to edit a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required content Optional[str] The new content of the message. None embeds Optional[List[Dict[str, Any]]] The new embeds of the message. None flags Optional[int] The new flags of the message. None allowed_mentions Optional[int] The new allowed mentions of the message. None attachments Optional[List[Dict[str, Any]]] The new attachments of the message. None components Optional[List[Dict[str, Any]]] The new components of the message. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_message ( self , channel_id : int , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , flags : Optional [ int ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , components : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a message. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. content (Optional[str]): The new content of the message. embeds (Optional[List[Dict[str, Any]]]): The new embeds of the message. flags (Optional[int]): The new flags of the message. allowed_mentions (Optional[int]): The new allowed mentions of the message. attachments (Optional[List[Dict[str, Any]]]): The new attachments of the message. components (Optional[List[Dict[str, Any]]]): The new components of the message. Returns: The data received from the API after making the call. \"\"\" payload : dict = {} update_payload ( payload , content = content , embeds = embeds , flags = flags , allowed_mentions = allowed_mentions , attachments = attachments , components = components , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), json = payload , ) delete_message ( self , channel_id , message_id ) async Makes an API call to delete a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_id int The ID Of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a message. Parameters: channel_id (int): The ID of the channel which the message is in. message_id (int): The ID Of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), ) bulk_delete_messages ( self , channel_id , message_ids ) async Makes an API call to delete multiple messages. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_ids List[int] The list of ID's representing messages of which to delete. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def bulk_delete_messages ( self , channel_id : int , message_ids : List [ int ] ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete multiple messages. Parameters: channel_id (int): The ID of the channel which the message is in. message_ids (List[int]): The list of ID's representing messages of which to delete. Returns: The data received from the API after making the call. \"\"\" payload = { \"messages\" : message_ids } return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/bulk-delete\" , channel_id = channel_id ), json = payload , ) edit_channel_permissions ( self , channel_id , overwrite_id , * , allow = None , deny = None , type = None ) async Makes an API call to edit a channels permissions. Parameters: Name Type Description Default channel_id int The ID of the channel. required overwrite_id int The ID of the overwrite. required allow Optional[int] The bitwise value of all allowed permissions. None deny Optional[int] The bitwise value of all denied permissison. None type Optional[int] The type, 0 being a role and 1 being a member. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_channel_permissions ( self , channel_id : int , overwrite_id : int , * , allow : Optional [ int ] = None , deny : Optional [ int ] = None , type : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a channels permissions. Parameters: channel_id (int): The ID of the channel. overwrite_id (int): The ID of the overwrite. allow (Optional[int]): The bitwise value of all allowed permissions. deny (Optional[int]): The bitwise value of all denied permissison. type (Optional[int]): The type, 0 being a role and 1 being a member. Returns: The data received from the API after making the call. \"\"\" payload : dict = {} update_payload ( payload , allow = allow , deny = deny , type = type ) return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /permissions/ { overwrite_id } \" , channel_id = channel_id , ), json = payload , ) delete_channel_permissions ( self , channel_id , overwrite_id ) async Makes an API call to delete an overwrite from a channel. Parameters: Name Type Description Default channel_id int The ID of the channel. required overwrite_id int The ID of the overwrite. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_channel_permissions ( self , channel_id : int , overwrite_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete an overwrite from a channel. Parameters: channel_id (int): The ID of the channel. overwrite_id (int): The ID of the overwrite. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /permissions/ { overwrite_id } \" , channel_id = channel_id , ), ) get_channel_invites ( self , channel_id ) async Makes an API call to get a channels invites. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_channel_invites ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a channels invites. Parameters: channel_id (int): The ID of the channel. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /invites\" , channel_id = channel_id ) ) create_channel_invite ( self , channel_id , * , max_age = 86400 , max_uses = 0 , temporary = False , unique = False , target_type = None , target_user_id = None , target_application_id = None ) async Makes an API call to create an invite. Parameters: Name Type Description Default channel_id int The ID of the channel. required max_age int The max age of the invite. 86400 max_uses int The max uses of the invite. 0 if unlimited. 0 temporary bool Whether or not the invite is temporary. False unique bool Whether or not the invite is unique. False target_type Optional[int] The type of the invite. For voice channels. None target_user_id Optional[int] The ID of the user whose stream to invite to. For voice channels. None target_application_id Optional[int] The ID of embedded application to invite from. For target type 2. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_channel_invite ( self , channel_id : int , * , max_age : int = 86400 , max_uses : int = 0 , temporary : bool = False , unique : bool = False , target_type : Optional [ int ] = None , target_user_id : Optional [ int ] = None , target_application_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an invite. Parameters: channel_id (int): The ID of the channel. max_age (int): The max age of the invite. max_uses (int): The max uses of the invite. 0 if unlimited. temporary (bool): Whether or not the invite is temporary. unique (bool): Whether or not the invite is unique. target_type (Optional[int]): The type of the invite. For voice channels. target_user_id (Optional[int]): The ID of the user whose stream to invite to. For voice channels. target_application_id (Optional[int]): The ID of embedded application to invite from. For target type 2. Returns: The data received from the API after making the call. \"\"\" payload = { \"max_age\" : max_age , \"max_uses\" : max_uses , \"temporary\" : temporary , \"unique\" : unique , } update_payload ( payload , target_type = target_type , target_user_id = target_user_id , target_application_id = target_application_id , ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /invites\" , channel_id = channel_id ), json = payload , ) follow_news_channel ( self , channel_id , webhook_channel_id ) async Makes an API call to follow a news channel to send messages to a target channel. Parameters: Name Type Description Default channel_id int The ID Of the channel. required webhook_channel_id int The target channel. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def follow_news_channel ( self , channel_id : int , webhook_channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to follow a news channel to send messages to a target channel. Parameters: channel_id (int): The ID Of the channel. webhook_channel_id (int): The target channel. Returns: The data received from the API after making the call. \"\"\" payload = { \"webhook_channel_id\" : webhook_channel_id } return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /followers/@me\" , channel_id = channel_id ), json = payload , ) trigger_typing ( self , channel_id ) async Makes an API call to trigger typing. Parameters: Name Type Description Default channel_id int The ID of the channel which to trigger typing in. required Returns: Type Description Dict[str, Any] The data received from the API After making the call. Source code in lefi/http.py async def trigger_typing ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to trigger typing. Parameters: channel_id (int): The ID of the channel which to trigger typing in. Returns: The data received from the API After making the call. \"\"\" return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /typing\" , channel_id = channel_id ) ) get_pinned_messages ( self , channel_id ) async Makes an API call to get the pinned messages of a channel. Parameters: Name Type Description Default channel_id int The ID of the channel which to grab pinned messages from. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_pinned_messages ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the pinned messages of a channel. Parameters: channel_id (int): The ID of the channel which to grab pinned messages from. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /pins\" , channel_id = channel_id ) ) pin_message ( self , channel_id , message_id ) async Makes an API call to pin a message. Parameters: Name Type Description Default channel_id int The ID of the channel where the message is. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def pin_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to pin a message. Parameters: channel_id (int): The ID of the channel where the message is. message_id (int): The ID of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /pins/ { message_id } \" , channel_id = channel_id ), ) unpin_message ( self , channel_id , message_id ) async Makes an API call to unpin a message. Parameters: Name Type Description Default channel_id int The ID Of the channel where the message is. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def unpin_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to unpin a message. Parameters: channel_id (int): The ID Of the channel where the message is. message_id (int): The ID of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /pins/ { message_id } \" , channel_id = channel_id ), ) start_thread_with_message ( self , channel_id , message_id , * , name , auto_archive_duration ) async Makes an API call to start a thread with a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_id int The ID Of the message. required name str The name of the thread. required auto_archive_duration int The time it takes to auto archive the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def start_thread_with_message ( self , channel_id : int , message_id : int , * , name : str , auto_archive_duration : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to start a thread with a message. Parameters: channel_id (int): The ID of the channel which the message is in. message_id (int): The ID Of the message. name (str): The name of the thread. auto_archive_duration (int): The time it takes to auto archive the thread. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name , \"auto_archive_duration\" : auto_archive_duration } return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /threads\" , channel_id = channel_id , ), json = payload , ) start_thread_without_message ( self , channel_id , * , name , auto_archive_duration , type = None , invitable = None ) async Makes an API call to start a thread without a message. Parameters: Name Type Description Default channel_id int The ID of the channel where the thread will be created. required name str The name of the thread. required auto_archive_duration int The time it takes to auto archive the thread. required type int The type of the thread to create. None invitable bool Whether or not members can invite other members to the thread. Only in private threads. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def start_thread_without_message ( self , channel_id : int , * , name : str , auto_archive_duration : int , type : Optional [ int ] = None , invitable : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to start a thread without a message. Parameters: channel_id (int): The ID of the channel where the thread will be created. name (str): The name of the thread. auto_archive_duration (int): The time it takes to auto archive the thread. type (int): The type of the thread to create. invitable (bool): Whether or not members can invite other members to the thread. Only in private threads. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name , \"auto_archive_duration\" : auto_archive_duration } update_payload ( payload , type = type , invitable = invitable ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /threads\" , channel_id = channel_id ), json = payload , ) join_thread ( self , channel_id ) async Makes an API call which makes the client join the given thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def join_thread ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which makes the client join the given thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /thread-members/@me\" , channel_id = channel_id ), ) add_thread_member ( self , channel_id , user_id ) async Makes an API call which adds another member to the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required user_id int The ID of the user to add. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def add_thread_member ( self , channel_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which adds another member to the thread. Parameters: channel_id (int): The ID of the thread. user_id (int): The ID of the user to add. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /thread-members/ { user_id } \" , channel_id = channel_id , ), ) leave_thread ( self , channel_id ) async Makes an API call which makes the client leave the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def leave_thread ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which makes the client leave the thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /thread-members/@me\" , channel_id = channel_id ), ) remove_thread_member ( self , channel_id , user_id ) async Makes an API call which removes a member from the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required user_id int The ID of the user to remove. required Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def remove_thread_member ( self , channel_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which removes a member from the thread. Parameters: channel_id (int): The ID of the thread. user_id (int): The ID of the user to remove. Returns: The data received from the API after making the call \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /thread-members/ { user_id } \" , channel_id = channel_id , ), ) list_thread_members ( self , channel_id ) async Makes an API call to get all of the members of a thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_thread_members ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get all of the members of a thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /thread-members\" , channel_id = channel_id ), ) list_public_archived_threads ( self , channel_id , * , before = None , limit = None ) async Makes an API call which list all the public archived threads in the channel. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_public_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call which list all the public archived threads in the channel. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /threads/archived/public\" , channel_id = channel_id ), params = params , ) list_private_archived_threads ( self , channel_id , * , before = None , limit = None ) async Makes an API call which list all the private archived threads in the channel. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description The data received from the API after making the call Source code in lefi/http.py async def list_private_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ): \"\"\" Makes an API call which list all the private archived threads in the channel. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /threads/archived/private\" , channel_id = channel_id , ), params = params , ) list_joined_private_archived_threads ( self , channel_id , * , before = None , limit = None ) async Makes an API call which list all the private archived threads in the channel which the client has joined. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_joined_private_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call which list all the private archived threads in the channel which the client has joined. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /users/@me/threads/archived/private\" , channel_id = channel_id , ), params = params , ) list_guild_emojis ( self , guild_id ) async Makes an API call to get a list of the guilds emojis. Parameters: Name Type Description Default guild_id int The ID of the guild to grab from. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def list_guild_emojis ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a list of the guilds emojis. Parameters: guild_id (int): The ID of the guild to grab from. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /emojis\" , guild_id = guild_id ) ) get_guild_emoji ( self , guild_id , emoji_id ) async Makes an API call to get an emoji from the guild. Parameters: Name Type Description Default guild_id int The ID of the guild to grab from. required emoji_id int The ID of the emoji to get. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_guild_emoji ( self , guild_id : int , emoji_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get an emoji from the guild. Parameters: guild_id (int): The ID of the guild to grab from. emoji_id (int): The ID of the emoji to get. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ) ) create_guild_emoji ( self , guild_id , * , name , image , roles = None ) async Makes an API call to create an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild to create the emoji in. required name str The name of the emoji. required image str The image of the emoji. required roles Optional[List[int]] The list of roles that can use this emoji. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_guild_emoji ( self , guild_id : int , * , name : str , image : bytes , roles : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an emoji. Parameters: guild_id (int): The ID of the guild to create the emoji in. name (str): The name of the emoji. image (str): The image of the emoji. roles (Optional[List[int]]): The list of roles that can use this emoji. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name , \"image\" : bytes_to_data_uri ( image ), \"roles\" : [] if roles is None else roles , } return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /emojis\" , guild_id = guild_id ), json = payload , ) modify_guild_emoji ( self , guild_id , emoji_id , * , name , roles = None ) async Makes an API call to edit an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild where the emoji is. required emoji_id int The ID of the emoji. required name str The new name of the emoji. required roles Optional[List[int]] The new list of roles that can use this emoji. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def modify_guild_emoji ( self , guild_id : int , emoji_id : int , * , name : str , roles : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit an emoji. Parameters: guild_id (int): The ID of the guild where the emoji is. emoji_id (int): The ID of the emoji. name (str): The new name of the emoji. roles (Optional[List[int]]): The new list of roles that can use this emoji. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name } update_payload ( payload , roles = roles ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ), json = payload , ) delete_guild_emoji ( self , guild_id , emoji_id ) async Makes an API call which deletes an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild where the emoji is in. required emoji_id int The ID of the emoji to delete. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_guild_emoji ( self , guild_id : int , emoji_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which deletes an emoji. Parameters: guild_id (int): The ID of the guild where the emoji is in. emoji_id (int): The ID of the emoji to delete. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ) ) create_guild ( self , name , * , region = None , icon = None , verification_level = None , default_message_notifications = None , explicit_content_filter = None , roles = None , channels = None , afk_channel = None , afk_timeout = None , system_channel_id = None , system_channel_flags = None ) async Makes an API call to create a guild. Parameters: Name Type Description Default name str The name of the guild. required region Optional[str] The region of the guild. None icon Optional[str] The icon of the guild. None verification_level Optional[int] The verification level of the guild. None default_message_notifications Optional[int] The default message notifications of the guild. None explicit_content_filter Optional[int] The explicit content filter of the guild. None roles Optional[List[Dict[str, Any]]] The list of roles to create. None channels Optional[List[Dict[str, Any]]]] The list of channels to create. None afk_channel Optional[int] The ID of the AFK channel. None afk_timeout Optional[int] The AFK timeout of the guild. None system_channel_id Optional[int] The ID of the system channel. None system_channel_flags Optional[int] The flags of the system channel. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_guild ( self , name : str , * , region : Optional [ str ] = None , icon : Optional [ bytes ] = None , verification_level : Optional [ int ] = None , default_message_notifications : Optional [ int ] = None , explicit_content_filter : Optional [ int ] = None , roles : Optional [ List [ Dict [ str , Any ]]] = None , channels : Optional [ List [ Dict [ str , Any ]]] = None , afk_channel : Optional [ int ] = None , afk_timeout : Optional [ int ] = None , system_channel_id : Optional [ int ] = None , system_channel_flags : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild. Parameters: name (str): The name of the guild. region (Optional[str]): The region of the guild. icon (Optional[str]): The icon of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. explicit_content_filter (Optional[int]): The explicit content filter of the guild. roles (Optional[List[Dict[str, Any]]]): The list of roles to create. channels (Optional[List[Dict[str, Any]]]]): The list of channels to create. afk_channel (Optional[int]): The ID of the AFK channel. afk_timeout (Optional[int]): The AFK timeout of the guild. system_channel_id (Optional[int]): The ID of the system channel. system_channel_flags (Optional[int]): The flags of the system channel. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , region = region , icon = icon , verification_level = verification_level , default_message_notifications = default_message_notifications , explicit_content_filter = explicit_content_filter , roles = roles , channels = channels , afk_channel = afk_channel , afk_timeout = afk_timeout , system_channel_id = system_channel_id , system_channel_flags = system_channel_flags , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( \"/guilds\" ), json = payload ) get_guild ( self , guild_id , * , with_counts = False ) async Makes an API call to get a guild. Parameters: Name Type Description Default guild_id int The ID of the guild to get. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_guild ( self , guild_id : int , * , with_counts : bool = False ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild. Parameters: guild_id (int): The ID of the guild to get. Returns: The data received from the API after making the call. \"\"\" params = { \"with_counts\" : with_counts } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id ), params = params ) get_guild_preview ( self , guild_id ) async Makes an API call to get a guild's preview. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_preview ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's preview. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /preview\" , guild_id = guild_id ) ) modify_guild ( self , guild_id , * , name = None , region = None , verification_level = None , default_message_notifications = None , afk_channel = None , afk_timeout = None , icon = None , owner_id = None , splash = None , discovery_splash = None , banner = None , system_channel_id = None , system_channel_flags = None , rules_channel_id = None , public_updates_channel_id = None , preferred_locale = None , features = None , description = None ) async Makes an API call to modify a guild. Parameters guild_id (int): The ID of the guild to edit. name (Optional[str]): The name of the guild. region (Optional[str]): The region of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. afk_channel (Optional[int]): The AFK channel of the guild. afk_timeout (Optional[int]): The AFK timeout of the guild. icon (Optional[str]): The icon of the guild. owner_id (Optional[int]): The ID of the owner of the guild. splash (Optional[str]): The splash of the guild. discovery_splash (Optional[str]): The discovery splash of the guild. banner (Optional[str]): The banner of the guild. system_channel_id (Optional[int]): The ID of the system channel of the guild. system_channel_flags (Optional[int]): The flags of the system channel of the guild. rules_channel_id (Optional[int]): The ID of the rules channel of the guild. public_updates_channel_id (Optional[int]): The ID of the public updates channel of the guild. preferred_locale (Optional[str]): The preferred locale of the guild. features (Optional[List[str]]): The features of the guild. description (Optional[str]): The description of the guild. Returns: Type Description The data returned from the API. Source code in lefi/http.py async def modify_guild ( self , guild_id : int , * , name : Optional [ str ] = None , region : Optional [ str ] = None , verification_level : Optional [ int ] = None , default_message_notifications : Optional [ int ] = None , afk_channel : Optional [ int ] = None , afk_timeout : Optional [ int ] = None , icon : Optional [ bytes ] = None , owner_id : Optional [ int ] = None , splash : Optional [ bytes ] = None , discovery_splash : Optional [ bytes ] = None , banner : Optional [ bytes ] = None , system_channel_id : Optional [ int ] = None , system_channel_flags : Optional [ int ] = None , rules_channel_id : Optional [ int ] = None , public_updates_channel_id : Optional [ int ] = None , preferred_locale : Optional [ str ] = None , features : Optional [ List [ str ]] = None , description : Optional [ str ] = None , ): \"\"\" Makes an API call to modify a guild. Parameters guild_id (int): The ID of the guild to edit. name (Optional[str]): The name of the guild. region (Optional[str]): The region of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. afk_channel (Optional[int]): The AFK channel of the guild. afk_timeout (Optional[int]): The AFK timeout of the guild. icon (Optional[str]): The icon of the guild. owner_id (Optional[int]): The ID of the owner of the guild. splash (Optional[str]): The splash of the guild. discovery_splash (Optional[str]): The discovery splash of the guild. banner (Optional[str]): The banner of the guild. system_channel_id (Optional[int]): The ID of the system channel of the guild. system_channel_flags (Optional[int]): The flags of the system channel of the guild. rules_channel_id (Optional[int]): The ID of the rules channel of the guild. public_updates_channel_id (Optional[int]): The ID of the public updates channel of the guild. preferred_locale (Optional[str]): The preferred locale of the guild. features (Optional[List[str]]): The features of the guild. description (Optional[str]): The description of the guild. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , region = region , verification_level = verification_level , default_message_notifications = default_message_notifications , afk_channel = afk_channel , afk_timeout = afk_timeout , icon = icon , owner_id = owner_id , splash = splash , discovery_splash = discovery_splash , banner = banner , system_channel_id = system_channel_id , system_channel_flags = system_channel_flags , rules_channel_id = rules_channel_id , public_updates_channel_id = public_updates_channel_id , preferred_locale = preferred_locale , features = features , description = description , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) if \"splash\" in payload : payload [ \"splash\" ] = bytes_to_data_uri ( payload [ \"splash\" ]) if \"discovery_splash\" in payload : payload [ \"discovery_splash\" ] = bytes_to_data_uri ( payload [ \"discovery_splash\" ]) if \"banner\" in payload : payload [ \"banner\" ] = bytes_to_data_uri ( payload [ \"banner\" ]) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id ), json = payload ) delete_guild ( self , guild_id ) async Makes an API call to delete a guild. Parameters: Name Type Description Default guild_id int The ID of the guild to delete. required Source code in lefi/http.py async def delete_guild ( self , guild_id : int ): \"\"\" Makes an API call to delete a guild. Parameters: guild_id (int): The ID of the guild to delete. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id )) get_guild_channels ( self , guild_id ) async Makes an API call to get a guild's channels. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_channels ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's channels. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /channels\" , guild_id = guild_id ) ) create_guild_channel ( self , guild_id , name , * , type = None , topic = None , bitrate = None , user_limit = None , position = None , permission_overwrites = None , parent_id = None , nsfw = None ) async Makes an API call to create a channel in a guild. Parameters guild_id (int): The ID of the guild. name (str): The name of the channel. type (Optional[int]): The type of the channel. topic (Optional[str]): The topic of the channel. bitrate (Optional[int]): The bitrate of the channel. user_limit (Optional[int]): The user limit of the channel. position (Optional[int]): The position of the channel. permission_overwrites (Optional[List[Dict[str, Any]]]): The permission overwrites of the channel. parent_id (Optional[int]): The ID of the parent of the channel. nsfw (Optional[bool]): Whether the channel is NSFW. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_channel ( self , guild_id : int , name : str , * , type : Optional [ int ] = None , topic : Optional [ str ] = None , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , position : Optional [ int ] = None , permission_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , parent_id : Optional [ int ] = None , nsfw : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a channel in a guild. Parameters guild_id (int): The ID of the guild. name (str): The name of the channel. type (Optional[int]): The type of the channel. topic (Optional[str]): The topic of the channel. bitrate (Optional[int]): The bitrate of the channel. user_limit (Optional[int]): The user limit of the channel. position (Optional[int]): The position of the channel. permission_overwrites (Optional[List[Dict[str, Any]]]): The permission overwrites of the channel. parent_id (Optional[int]): The ID of the parent of the channel. nsfw (Optional[bool]): Whether the channel is NSFW. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , type = type , topic = topic , bitrate = bitrate , user_limit = user_limit , position = position , permission_overwrites = permission_overwrites , parent_id = parent_id , nsfw = nsfw , ) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /channels\" , guild_id = guild_id ), json = payload , ) list_active_threads ( self , guild_id ) async Makes an API call to get a guild's active threads. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_active_threads ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's active threads. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /threads/active\" , guild_id = guild_id ) ) get_guild_member ( self , guild_id , member_id ) async Makes an API call to get a guild member. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_member ( self , guild_id : int , member_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild member. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ) ) list_guild_members ( self , guild_id , * , limit = 1 , after = 0 ) async Makes an API call to get a guild's members. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_guild_members ( self , guild_id : int , * , limit : int = 1 , after : int = 0 ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's members. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" params = { \"limit\" : limit , \"after\" : after } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members\" , guild_id = guild_id ), params = params , ) search_guild_members ( self , guild_id , * , query , limit = 1 ) async Makes an API call to search a guild's members. Parameters: Name Type Description Default guild_id int The ID of the guild. required query str The query to search for. required limit Optional[int] The number of members to return. 1 Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def search_guild_members ( self , guild_id : int , * , query : str , limit : int = 1 ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to search a guild's members. Parameters: guild_id (int): The ID of the guild. query (str): The query to search for. limit (Optional[int]): The number of members to return. Returns: The data returned from the API. \"\"\" params = { \"limit\" : limit , \"query\" : query } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members/search\" , guild_id = guild_id ), params = params , ) add_guild_member ( self , guild_id , member_id , access_token , * , nick = None , roles = None , mute = None , deaf = None ) async Makes an API call to add a member to a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required access_token str An oauth2 access token. required nick Optional[str] The nickname of the member. None roles Optional[List[int]] The roles of the member. None mute Optional[bool] Whether the member is muted. None deaf Optional[bool] Whether the member is deafened. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def add_guild_member ( self , guild_id : int , member_id : int , access_token : str , * , nick : Optional [ str ] = None , roles : Optional [ List [ int ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to add a member to a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. access_token (str): An oauth2 access token. nick (Optional[str]): The nickname of the member. roles (Optional[List[int]]): The roles of the member. mute (Optional[bool]): Whether the member is muted. deaf (Optional[bool]): Whether the member is deafened. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, access_token = access_token , nick = nick , roles = roles , mute = mute , deaf = deaf ) return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ), json = payload , ) edit_guild_member ( self , guild_id , member_id , * , nick = None , roles = None , mute = None , deaf = None , channel_id = None ) async Makes an API call to edit a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required nick Optional[str] The nickname of the member. None roles Optional[List[int]] The roles of the member. None mute Optional[bool] Whether the member is muted. None deaf Optional[bool] Whether the member is deafened. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_guild_member ( self , guild_id : int , member_id : int , * , nick : Optional [ str ] = None , roles : Optional [ List [ int ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , channel_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. nick (Optional[str]): The nickname of the member. roles (Optional[List[int]]): The roles of the member. mute (Optional[bool]): Whether the member is muted. deaf (Optional[bool]): Whether the member is deafened. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, nick = nick , roles = roles , mute = mute , deaf = deaf , channel_id = channel_id ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ), json = payload , ) edit_current_member ( self , guild_id , * , nick = None ) async Makes an API call to edit the current userin a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required nick Optional[str] The nickname of the member. None Returns: Type Description The data returned from the API. Source code in lefi/http.py async def edit_current_member ( self , guild_id : int , * , nick : Optional [ str ] = None ): \"\"\" Makes an API call to edit the current userin a guild. Parameters: guild_id (int): The ID of the guild. nick (Optional[str]): The nickname of the member. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, nick = nick ) return await self . request ( \"PATCH\" , Route ( f \"/users/@me/guilds/ { guild_id } \" , guild_id = guild_id ), json = payload , ) add_guild_member_role ( self , guild_id , member_id , role_id ) async Makes an API call to add a role to a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def add_guild_member_role ( self , guild_id : int , member_id : int , role_id : int ): \"\"\" Makes an API call to add a role to a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } /roles/ { role_id } \" , guild_id = guild_id , ), ) remove_guild_member_role ( self , guild_id , member_id , role_id ) async Makes an API call to remove a role from a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_member_role ( self , guild_id : int , member_id : int , role_id : int ): \"\"\" Makes an API call to remove a role from a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } /roles/ { role_id } \" , guild_id = guild_id , ), ) remove_guild_member ( self , guild_id , member_id ) async Makes an API call to remove a member from a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_member ( self , guild_id : int , member_id : int ): \"\"\" Makes an API call to remove a member from a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" ), guild_id = guild_id , ) get_guild_bans ( self , guild_id ) async Makes an API call to get the bans of a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_bans ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the bans of a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /bans\" ), guild_id = guild_id ) get_guild_ban ( self , guild_id , user_id ) async Makes an API call to get the ban of a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_ban ( self , guild_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the ban of a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" ), guild_id = guild_id ) create_guild_ban ( self , guild_id , user_id , * , delete_message_days = 0 ) async Makes an API call to ban a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required delete_message_days int The number of days to delete messages for. 0 Returns: Type Description The data returned from the API. Source code in lefi/http.py async def create_guild_ban ( self , guild_id : int , user_id : int , * , delete_message_days : int = 0 ): \"\"\" Makes an API call to ban a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. delete_message_days (int): The number of days to delete messages for. Returns: The data returned from the API. \"\"\" payload = { \"delete_message_days\" : delete_message_days } return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" , guild_id = guild_id ), json = payload , ) remove_guild_ban ( self , guild_id , user_id ) async Makes an API call to unban a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_ban ( self , guild_id : int , user_id : int ): \"\"\" Makes an API call to unban a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" ), guild_id = guild_id ) get_guild_roles ( self , guild_id ) async Makes an API call to get the roles of a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_roles ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the roles of a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /roles\" ), guild_id = guild_id ) create_guild_role ( self , guild_id , * , name = None , permissions = None , color = None , hoist = False , mentionable = False , icon = None , unicode_emoji = None ) async Makes an API call to create a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required name Optional[str] The name of the role. None permissions Optional[int] The permissions of the role. None color Optional[int] The color of the role. None hoist bool Whether the role is hoisted. False mentionable bool Whether the role is mentionable. False icon Optional[str] The icon of the role. None unicode_emoji Optional[str] The unicode emoji of the role. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_role ( self , guild_id : int , * , name : Optional [ str ] = None , permissions : Optional [ int ] = None , color : Optional [ int ] = None , hoist : bool = False , mentionable : bool = False , icon : Optional [ bytes ] = None , unicode_emoji : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a role in a guild. Parameters: guild_id (int): The ID of the guild. name (Optional[str]): The name of the role. permissions (Optional[int]): The permissions of the role. color (Optional[int]): The color of the role. hoist (bool): Whether the role is hoisted. mentionable (bool): Whether the role is mentionable. icon (Optional[str]): The icon of the role. unicode_emoji (Optional[str]): The unicode emoji of the role. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , permissions = permissions , color = color , hoist = hoist , mentionable = mentionable , icon = icon , unicode_emoji = unicode_emoji , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /roles\" , guild_id = guild_id ), json = payload ) modify_guild_role ( self , guild_id , role_id , * , name = None , permissions = None , color = None , hoist = None , mentionable = None , icon = None , unicode_emoji = None ) async Makes an API call to modify a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required role_id int The ID of the role. required name Optional[str] The name of the role. None permissions Optional[int] The permissions of the role. None color Optional[int] The color of the role. None hoist Optional[bool] Whether the role is hoisted. None mentionable Optional[bool] Whether the role is mentionable. None icon Optional[str] The icon of the role. None unicode_emoji Optional[str] The unicode emoji of the role. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_role ( self , guild_id : int , role_id : int , * , name : Optional [ str ] = None , permissions : Optional [ int ] = None , color : Optional [ int ] = None , hoist : Optional [ bool ] = None , mentionable : Optional [ bool ] = None , icon : Optional [ bytes ] = None , unicode_emoji : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a role in a guild. Parameters: guild_id (int): The ID of the guild. role_id (int): The ID of the role. name (Optional[str]): The name of the role. permissions (Optional[int]): The permissions of the role. color (Optional[int]): The color of the role. hoist (Optional[bool]): Whether the role is hoisted. mentionable (Optional[bool]): Whether the role is mentionable. icon (Optional[str]): The icon of the role. unicode_emoji (Optional[str]): The unicode emoji of the role. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , permissions = permissions , color = color , hoist = hoist , mentionable = mentionable , icon = icon , unicode_emoji = unicode_emoji , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /roles/ { role_id } \" , guild_id = guild_id ), json = payload , ) delete_guild_role ( self , guild_id , role_id ) async Makes an API call to delete a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_guild_role ( self , guild_id : int , role_id : int ): \"\"\" Makes an API call to delete a role in a guild. Parameters: guild_id (int): The ID of the guild. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /roles/ { role_id } \" ), guild_id = guild_id ) get_guild_prune_count ( self , guild_id , * , days = 7 , include_roles = None ) async Makes an API call to get the number of members to prune in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required days int The number of days to count. 7 include_roles Optional[List[int]] The IDs of the roles to include. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_prune_count ( self , guild_id : int , * , days : int = 7 , include_roles : Optional [ List [ int ]] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the number of members to prune in a guild. Parameters: guild_id (int): The ID of the guild. days (int): The number of days to count. include_roles (Optional[List[int]]): The IDs of the roles to include. Returns: The data returned from the API. \"\"\" payload = { \"days\" : str ( days )} if include_roles is not None : payload [ \"include_roles\" ] = \",\" . join ( map ( str , include_roles )) return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /prune\" , guild_id = guild_id ), json = payload ) begin_guild_prune ( self , guild_id , * , days = 7 , compute_prune_count = True , include_roles = None ) async Makes an API call to begin pruning a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required days int The number of days to count. 7 compute_prune_count bool Whether to compute the prune count. True include_roles Optional[List[int]] The IDs of the roles to include. None Returns: Type Description The data returned from the API. Source code in lefi/http.py async def begin_guild_prune ( self , guild_id : int , * , days : int = 7 , compute_prune_count : bool = True , include_roles : Optional [ List [ int ]] = None , ): \"\"\" Makes an API call to begin pruning a guild. Parameters: guild_id (int): The ID of the guild. days (int): The number of days to count. compute_prune_count (bool): Whether to compute the prune count. include_roles (Optional[List[int]]): The IDs of the roles to include. Returns: The data returned from the API. \"\"\" payload = { \"days\" : str ( days ), \"compute_prune_count\" : compute_prune_count } if include_roles is not None : payload [ \"include_roles\" ] = \",\" . join ( map ( str , include_roles )) await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /prune\" , guild_id = guild_id ), json = payload ) get_guild_voice_regions ( self , guild_id ) async Makes an API call to get the voice regions in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_voice_regions ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the voice regions in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /regions\" ), guild_id = guild_id ) get_guild_invites ( self , guild_id ) async Makes an API call to get the invites in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_invites ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the invites in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /invites\" ), guild_id = guild_id ) get_guild_integrations ( self , guild_id ) async Makes an API call to get the integrations in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_integrations ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the integrations in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /integrations\" ), guild_id = guild_id ) delete_guild_integration ( self , guild_id , integration_id ) async Makes an API call to delete an integration in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required integration_id int The ID of the integration. required Source code in lefi/http.py async def delete_guild_integration ( self , guild_id : int , integration_id : int ): \"\"\" Makes an API call to delete an integration in a guild. Parameters: guild_id (int): The ID of the guild. integration_id (int): The ID of the integration. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /integrations/ { integration_id } \" , guild_id = guild_id ), ) get_guild_widget_settings ( self , guild_id ) async Makes an API call to get the widget settings in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget_settings ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget settings in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget\" ), guild_id = guild_id ) get_guild_widget ( self , guild_id ) async Makes an API call to get the widget in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget.json\" ), guild_id = guild_id ) get_guild_vanity_url ( self , guild_id ) async Makes an API call to get the vanity URL in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_vanity_url ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the vanity URL in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /vanity-url\" ), guild_id = guild_id ) get_guild_widget_image ( self , guild_id , * , style = None ) async Makes an API call to get the widget image in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required style Optional[str] The style of the image. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget_image ( self , guild_id : int , * , style : Optional [ str ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget image in a guild. Parameters: guild_id (int): The ID of the guild. style (Optional[str]): The style of the image. Returns: The data returned from the API. \"\"\" payload = { \"style\" : style or \"shield\" } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget.png\" , guild_id = guild_id ), json = payload , ) get_guild_welcome_screen ( self , guild_id ) async Makes an API call to get the welcome screen in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_welcome_screen ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the welcome screen in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /welcome-screen\" ), guild_id = guild_id ) modify_guild_welcome_screen ( self , guild_id , * , enabled = None , description = None , welcome_channels = None ) async Makes an API call to modify the welcome screen in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required enabled Optional[bool] Whether the welcome screen is enabled. None description Optional[str] The welcome screen description. None welcome_channels Optional[List[int]] The IDs of the welcome channels. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_welcome_screen ( self , guild_id : int , * , enabled : Optional [ bool ] = None , description : Optional [ str ] = None , welcome_channels : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify the welcome screen in a guild. Parameters: guild_id (int): The ID of the guild. enabled (Optional[bool]): Whether the welcome screen is enabled. description (Optional[str]): The welcome screen description. welcome_channels (Optional[List[int]]): The IDs of the welcome channels. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, enabled = enabled , description = description , welcome_channels = welcome_channels , ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /welcome-screen\" , guild_id = guild_id ), json = payload , ) get_guild_template ( self , code ) async Makes an API call to get a guild template. Parameters: Name Type Description Default code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_template ( self , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild template. Parameters: code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/templates/ { code } \" )) create_guild_from_template ( self , code , * , name , icon = None ) async Makes an API call to create a guild from a template. Parameters: Name Type Description Default code str The code of the template. required name str The name of the guild. required icon Optional[str] The icon of the guild. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_from_template ( self , code : str , * , name : str , icon : Optional [ bytes ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild from a template. Parameters: code (str): The code of the template. name (str): The name of the guild. icon (Optional[str]): The icon of the guild. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , icon = icon ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( f \"/guilds/templates/ { code } \" ), json = payload ) get_guild_templates ( self , guild_id ) async Makes an API call to get the templates in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_templates ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the templates in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /templates\" , guild_id = guild_id ) ) create_guild_template ( self , guild_id , * , name , description = None ) async Makes an API call to create a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required name str The name of the template. required description Optional[str] The description of the template. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_template ( self , guild_id : int , * , name : str , description : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a template for a guild. Parameters: guild_id (int): The ID of the guild. name (str): The name of the template. description (Optional[str]): The description of the template. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description ) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /templates\" , guild_id = guild_id ), json = payload , ) sync_guild_template ( self , guild_id , code ) async Makes an API call to sync a template for a guild guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def sync_guild_template ( self , guild_id : int , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to sync a template for a guild guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } /sync\" , guild_id = guild_id ), ) modify_guild_template ( self , guild_id , code , * , name = None , description = None ) async Makes an API call to modify a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required name Optional[str] The name of the template. None description Optional[str] The description of the template. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_template ( self , guild_id : int , code : str , * , name : Optional [ str ] = None , description : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a template for a guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. name (Optional[str]): The name of the template. description (Optional[str]): The description of the template. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } \" , guild_id = guild_id ), json = payload , ) delete_guild_template ( self , guild_id , code ) async Makes an API call to delete a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_guild_template ( self , guild_id : int , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a template for a guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } \" , guild_id = guild_id ) ) get_invite ( self , code , * , with_counts = False , with_expiration = False ) async Makes an API call to get an invite. Parameters: Name Type Description Default code str The code of the invite. required with_counts bool Whether to include the invite counts. False with_expiration bool Whether to include the invite expiration. False Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_invite ( self , code : str , * , with_counts : bool = False , with_expiration : bool = False ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get an invite. Parameters: code (str): The code of the invite. with_counts (bool): Whether to include the invite counts. with_expiration (bool): Whether to include the invite expiration. Returns: The data returned from the API. \"\"\" params = { \"with_counts\" : with_counts , \"with_expiration\" : with_expiration } return await self . request ( \"GET\" , Route ( f \"/invites/ { code } \" ), params = params ) delete_invite ( self , code ) async Makes an API call to delete an invite. Parameters: Name Type Description Default code str The code of the invite. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_invite ( self , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete an invite. Parameters: code (str): The code of the invite. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/invites/ { code } \" )) create_stage_instance ( self , * , channel_id , topic , privacy_level = None ) async Makes an API call to create a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required topic str The topic of the stage instance. required privacy_level Optional[int] The privacy level of the stage instance. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_stage_instance ( self , * , channel_id : int , topic : str , privacy_level : Optional [ int ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a stage instance. Parameters: channel_id (int): The ID of the channel. topic (str): The topic of the stage instance. privacy_level (Optional[int]): The privacy level of the stage instance. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, channel_id = channel_id , topic = topic , privacy_level = privacy_level ) return await self . request ( \"POST\" , Route ( \"/stage-instances\" , channel_id = channel_id ), json = payload ) get_stage_instance ( self , channel_id ) async Makes an API call to get a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_stage_instance ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a stage instance. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/stage-instances/ { channel_id } \" , channel_id = channel_id ) ) modify_stage_instance ( self , channel_id , * , topic = None , privacy_level = None ) async Makes an API call to modify a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required topic Optional[str] The topic of the stage instance. None privacy_level Optional[int] The privacy level of the stage instance. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_stage_instance ( self , channel_id : int , * , topic : Optional [ str ] = None , privacy_level : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a stage instance. Parameters: channel_id (int): The ID of the channel. topic (Optional[str]): The topic of the stage instance. privacy_level (Optional[int]): The privacy level of the stage instance. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, topic = topic , privacy_level = privacy_level ) return await self . request ( \"PATCH\" , Route ( f \"/stage-instances/ { channel_id } \" , channel_id = channel_id ), json = payload , ) delete_stage_instance ( self , channel_id ) async Makes an API call to delete a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_stage_instance ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a stage instance. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/stage-instances/ { channel_id } \" ), channel_id = channel_id ) get_sticker ( self , sticker_id ) async Makes an API call to get a sticker. Parameters: Name Type Description Default sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_sticker ( self , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a sticker. Parameters: sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/stickers/ { sticker_id } \" )) list_nitro_sticker_packs ( self ) async Makes an API call to list nitro sticker packs. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_nitro_sticker_packs ( self ) -> Dict [ str , Any ]: \"\"\" Makes an API call to list nitro sticker packs. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/sticker-packs\" )) list_guild_stickers ( self , guild_id ) async Makes an API call to list stickers for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_guild_stickers ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to list stickers for a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /stickers\" , guild_id = guild_id ) ) get_guild_sticker ( self , guild_id , sticker_id ) async Makes an API call to get a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_sticker ( self , guild_id : int , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ) ) modify_guild_sticker ( self , guild_id , sticker_id , * , name = None , description = None , tags = None ) async Makes an API call to modify a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required name Optional[str] The name of the sticker. None description Optional[str] The description of the sticker. None tags Optional[str] The tags of the sticker. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_sticker ( self , guild_id : int , sticker_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , tags : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. name (Optional[str]): The name of the sticker. description (Optional[str]): The description of the sticker. tags (Optional[str]): The tags of the sticker. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description , tags = tags ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ), json = payload , ) delete_guild_sticker ( self , guild_id , sticker_id ) async Makes an API call to delete a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_guild_sticker ( self , guild_id : int , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ), ) get_current_user ( self ) async Makes an API call to get the current user. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_current_user ( self ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the current user. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/users/@me\" )) modify_current_user ( self , * , username = None , avatar = None ) async Makes an API call to modify the current user. Parameters: Name Type Description Default username Optional[str] The username of the user. None avatar Optional[str] The avatar of the user. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_current_user ( self , * , username : Optional [ str ] = None , avatar : Optional [ bytes ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify the current user. Parameters: username (Optional[str]): The username of the user. avatar (Optional[str]): The avatar of the user. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, username = username , avatar = avatar ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) return await self . request ( \"PATCH\" , Route ( \"/users/@me\" ), json = payload ) get_current_user_guilds ( self ) async Makes an API call to get the current user's guilds. Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_current_user_guilds ( self ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the current user's guilds. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/users/@me/guilds\" )) leave_guild ( self , guild_id ) async Makes an API call to leave a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Source code in lefi/http.py async def leave_guild ( self , guild_id : int ): \"\"\" Makes an API call to leave a guild. Parameters: guild_id (int): The ID of the guild. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/users/@me/guilds/ { guild_id } \" , guild_id = guild_id ) ) create_dm_channel ( self , recipient_id ) async Makes an API call which creates a DM channel to a user. Parameters: Name Type Description Default recipient_id int The ID of the user which to open the DM channel to. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_dm_channel ( self , recipient_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which creates a DM channel to a user. Parameters: recipient_id (int): The ID of the user which to open the DM channel to. Returns: The data received from the API after making the call. \"\"\" payload = { \"recipient_id\" : recipient_id } return await self . request ( \"POST\" , Route ( \"/users/@me/channels\" ), json = payload ) list_voice_regions ( self ) async Makes an API call to list voice regions. Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def list_voice_regions ( self ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to list voice regions. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/voice/regions\" )) create_webhook ( self , channel_id , * , name , avatar = None ) async Makes an API call to create a webhook. Parameters: Name Type Description Default channel_id int The ID of the channel to create the webhook in. required name str The name of the webhook. required avatar Optional[bytes] The avatar of the webhook. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_webhook ( self , channel_id : int , * , name : str , avatar : Optional [ bytes ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a webhook. Parameters: channel_id (int): The ID of the channel to create the webhook in. name (str): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. Returns: The data returned from the API. \"\"\" payload = { \"name\" : name , \"avatar\" : bytes_to_data_uri ( avatar ) if avatar else None , } return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /webhooks\" , channel_id = channel_id ), json = payload , ) get_channel_webhooks ( self , channel_id ) async Makes an API call to get the webhooks for a channel. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_channel_webhooks ( self , channel_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the webhooks for a channel. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /webhooks\" , channel_id = channel_id ) ) get_guild_webhooks ( self , guild_id ) async Makes an API call to get the webhooks for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_webhooks ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the webhooks for a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /webhooks\" , guild_id = guild_id ) ) get_webhook ( self , webhook_id ) async Makes an API call to get a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook ( self , webhook_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook. Parameters: webhook_id (int): The ID of the webhook. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ) ) get_webhook_with_token ( self , webhook_id , webhook_token ) async Makes an API call to get a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook_with_token ( self , webhook_id : int , webhook_token : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhookd_token = webhook_token , ), ) modify_webhook ( self , webhook_id , * , name = None , avatar = None , channel_id = None ) async Makes an API call to modify a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required name Optional[str] The name of the webhook. None avatar Optional[bytes] The avatar of the webhook. None channel_id Optional[int] The ID of the channel to move the webhook to. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_webhook ( self , webhook_id : int , * , name : Optional [ str ] = None , avatar : Optional [ bytes ] = None , channel_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a webhook. Parameters: webhook_id (int): The ID of the webhook. name (Optional[str]): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. channel_id (Optional[int]): The ID of the channel to move the webhook to. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , avatar = avatar , channel_id = channel_id ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ), json = payload , ) modify_webhook_with_token ( self , webhook_id , webhook_token , * , name = None , avatar = None ) async Makes an API call to modify a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required name Optional[str] The name of the webhook. None avatar Optional[bytes] The avatar of the webhook. None Source code in lefi/http.py async def modify_webhook_with_token ( self , webhook_id : int , webhook_token : str , * , name : Optional [ str ] = None , avatar : Optional [ bytes ] = None , ): \"\"\" Makes an API call to modify a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. name (Optional[str]): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. \"\"\" payload = update_payload ( {}, name = name , avatar = avatar , ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , ) delete_webhook ( self , webhook_id ) async Makes an API call to delete a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required Source code in lefi/http.py async def delete_webhook ( self , webhook_id : int ) -> None : \"\"\" Makes an API call to delete a webhook. Parameters: webhook_id (int): The ID of the webhook. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ) ) delete_webhook_with_token ( self , webhook_id , webhook_token ) async Makes an API call to delete a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required Source code in lefi/http.py async def delete_webhook_with_token ( self , webhook_id : int , webhook_token : str ) -> None : \"\"\" Makes an API call to delete a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), ) execute_webhook ( self , webhook_id , webhook_token , * , content = None , username = None , avatar_url = None , tts = None , file = None , embeds = None , allowed_mentions = None , componenets = None , wait = None , thread_id = None ) async Makes an API call to execute a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required content Optional[str] The content of the message. None username Optional[str] The username of the webhook. None avatar_url Optional[str] The avatar url of the webhook. None tts Optional[bool] Whether the message should be TTS. None file Optional[io.BufferedIOBase] The file to upload. None embeds Optional[List[Dict[str, Any]]] The embeds to send. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions. None componenets Optional[List[Dict[str, Any]]] The components to send. None wait Optional[bool] Whether to wait for server confirmation before response. None thread_id Optional[int] The ID of the thread to post to. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def execute_webhook ( self , webhook_id : int , webhook_token : str , * , content : Optional [ str ] = None , username : Optional [ str ] = None , avatar_url : Optional [ str ] = None , tts : Optional [ bool ] = None , file : Optional [ io . BufferedIOBase ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , wait : Optional [ bool ] = None , thread_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to execute a webhook. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. content (Optional[str]): The content of the message. username (Optional[str]): The username of the webhook. avatar_url (Optional[str]): The avatar url of the webhook. tts (Optional[bool]): Whether the message should be TTS. file (Optional[io.BufferedIOBase]): The file to upload. embeds (Optional[List[Dict[str, Any]]]): The embeds to send. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions. componenets (Optional[List[Dict[str, Any]]]): The components to send. wait (Optional[bool]): Whether to wait for server confirmation before response. thread_id (Optional[int]): The ID of the thread to post to. Returns: The data returned from the API. \"\"\" form = [] payload = update_payload ( {}, content = content , username = username , avatar_url = avatar_url , tts = tts , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , ) params = update_payload ({}, wait = wait , thread_id = thread_id ) if file : form . append ( { \"name\" : \"file\" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) return await self . request ( \"POST\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , form = form , params = params , ) get_webhook_message ( self , webhook_id , webhook_token , message_id ) async Makes an API call to get a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), ) edit_webhook_message ( self , webhook_id , webhook_token , message_id , * , content = None , embeds = None , file = None , allowed_mentions = None , componenets = None , attachments = None ) async Makes an API call to edit a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required content Optional[str] The content of the message. None embeds Optional[List[Dict[str, Any]]] The embeds to send. None file Optional[io.BufferedIOBase] The file to upload. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions. None componenets Optional[List[Dict[str, Any]]] The components to send. None attachments Optional[List[Dict[str, Any]]] The attachments to send. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ io . BufferedIOBase ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. content (Optional[str]): The content of the message. embeds (Optional[List[Dict[str, Any]]]): The embeds to send. file (Optional[io.BufferedIOBase]): The file to upload. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions. componenets (Optional[List[Dict[str, Any]]]): The components to send. attachments (Optional[List[Dict[str, Any]]]): The attachments to send. Returns: The data returned from the API. \"\"\" form = [] payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) if file : form . append ( { \"name\" : \"file\" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , form = form , ) delete_webhook_message ( self , webhook_id , webhook_token , message_id ) async Makes an API call to delete a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int ): \"\"\" Makes an API call to delete a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), ) get_global_application_commands ( self , application_id ) async Makes an API call to get global application commands. Parameters: Name Type Description Default application_id int The ID of the application. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_global_application_commands ( self , application_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get global application commands. Parameters: application_id (int): The ID of the application. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /commands\" ) ) create_global_application_command ( self , application_id , * , name , description , options = None , default_permission = True , type = 1 ) async Makes an API call to create a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required name str The name of the command. required description str The description of the command. required options Optional[List[Dict[str, Any]]] The options of the command. None default_permission bool Whether the command is enabled by default. True type int The type of the command. 1 Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_global_application_command ( self , application_id : int , * , name : str , description : str , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : bool = True , type : int = 1 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a global application command. Parameters: application_id (int): The ID of the application. name (str): The name of the command. description (str): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (bool): Whether the command is enabled by default. type (int): The type of the command. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , type = type , ) return await self . request ( \"POST\" , Route ( f \"/applications/ { application_id } /commands\" ), json = payload ) get_global_application_command ( self , application_id , command_id ) async Makes an API call to get a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_global_application_command ( self , application_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ) ) edit_global_application_command ( self , application_id , command_id , * , name = None , description = None , options = None , default_permission = None ) async Makes an API call to edit a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required name Optional[str] The name of the command. None description Optional[str] The description of the command. None options Optional[List[Dict[str, Any]]] The options of the command. None default_permission Optional[bool] Whether the command is enabled by default. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_global_application_command ( self , application_id : int , command_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. name (Optional[str]): The name of the command. description (Optional[str]): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (Optional[bool]): Whether the command is enabled by default. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , ) return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ), json = payload , ) delete_global_application_command ( self , application_id , command_id ) async Makes an API call to delete a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required Source code in lefi/http.py async def delete_global_application_command ( self , application_id : int , command_id : int ) -> None : \"\"\" Makes an API call to delete a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ) ) bulk_overwrite_global_application_commands ( self , application_id , * , commands ) async Makes an API call to bulk overwrite global application commands. Parameters: Name Type Description Default application_id int The ID of the application. required commands List[Dict[str, Any]] The commands to overwrite. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def bulk_overwrite_global_application_commands ( self , application_id : int , * , commands : List [ Dict [ str , Any ]] ) -> Dict [ str , Any ]: \"\"\" Makes an API call to bulk overwrite global application commands. Parameters: application_id (int): The ID of the application. commands (List[Dict[str, Any]]): The commands to overwrite. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/applications/ { application_id } /commands\" ), json = commands ) get_guild_application_commands ( self , application_id , guild_id ) async Makes an API call to get guild application commands. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_application_commands ( self , application_id : int , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get guild application commands. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), ) create_guild_application_command ( self , application_id , guild_id , * , name , description , options = None , default_permission = True , type = 1 ) async Makes an API call to create a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required name str The name of the command. required description str The description of the command. required options Optional[List[Dict[str, Any]]] The options of the command. None default_permission bool Whether the command is enabled by default. True type int The type of the command. 1 Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_application_command ( self , application_id : int , guild_id : int , * , name : str , description : str , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : bool = True , type : int = 1 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild application command. Parameters: application_id (int): The ID of the application. name (str): The name of the command. description (str): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (bool): Whether the command is enabled by default. type (int): The type of the command. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , type = type , ) return await self . request ( \"POST\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), json = payload , ) get_guild_application_command ( self , application_id , guild_id , command_id ) async Makes an API call to get a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_application_command ( self , application_id : int , guild_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), ) edit_guild_application_command ( self , application_id , guild_id , command_id , * , name = None , description = None , options = None , default_permission = None ) async Makes an API call to edit a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required name Optional[str] The name of the command. None description Optional[str] The description of the command. None options Optional[List[Dict[str, Any]]] The options of the command. None default_permission Optional[bool] Whether the command is enabled by default. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_guild_application_command ( self , application_id : int , guild_id : int , command_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. name (Optional[str]): The name of the command. description (Optional[str]): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (Optional[bool]): Whether the command is enabled by default. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , ) return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), json = payload , ) delete_guild_application_command ( self , application_id , guild_id , command_id ) async Makes an API call to delete a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Source code in lefi/http.py async def delete_guild_application_command ( self , application_id : int , guild_id : int , command_id : int ): \"\"\" Makes an API call to delete a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), ) bulk_overwrite_guild_application_commands ( self , application_id , guild_id , * , commands ) async Makes an API call to bulk overwrite guild application commands. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required commands List[Dict[str, Any]] The commands to overwrite. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def bulk_overwrite_guild_application_commands ( self , application_id : int , guild_id : int , * , commands : List [ Dict [ str , Any ]] ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to bulk overwrite guild application commands. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. commands (List[Dict[str, Any]]): The commands to overwrite. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), json = commands , ) get_guild_application_command_permissions ( self , application_id , guild_id ) async Makes an API call to get guild application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_application_command_permissions ( self , application_id : int , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get guild application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/permissions\" , guild_id = guild_id , ), ) get_application_command_permissions ( self , application_id , guild_id , command_id ) async Makes an API call to get application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_application_command_permissions ( self , application_id : int , guild_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } /permissions\" , guild_id = guild_id , ), ) edit_application_command_permissions ( self , application_id , guild_id , command_id , * , permissions ) async Makes an API call to edit application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required permissions List[Dict[str, Any]] The permissions to edit. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def edit_application_command_permissions ( self , application_id : int , guild_id : int , command_id : int , * , permissions : List [ Dict [ str , Any ]], ): \"\"\" Makes an API call to edit application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. permissions (List[Dict[str, Any]]): The permissions to edit. Returns: The data returned from the API. \"\"\" payload = { \"permissions\" : permissions } return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } /permissions\" , guild_id = guild_id , ), json = payload , ) batch_edit_application_command_permissions ( self , application_id , guild_id , * , permissions ) async Makes an API call to batch edit application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required permissions List[Dict[str, Any]] The permissions to edit. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def batch_edit_application_command_permissions ( self , application_id : int , guild_id : int , * , permissions : List [ Dict [ str , Any ]] ): \"\"\" Makes an API call to batch edit application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. permissions (List[Dict[str, Any]]): The permissions to edit. Returns: The data returned from the API. \"\"\" return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/permissions\" , guild_id = guild_id , ), json = permissions , ) create_interaction_response ( self , interaction_id , interaction_token , * , type , data = None ) async Makes an API call to create an interaction response. Parameters: Name Type Description Default interaction_id int The ID of the interaction. required interaction_token str The token of the interaction. required type int The type of the response. required data Optional[Dict[str, Any]] The data of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_interaction_response ( self , interaction_id : int , interaction_token : str , * , type : int , data : Optional [ Dict [ str , Any ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an interaction response. Parameters: interaction_id (int): The ID of the interaction. interaction_token (str): The token of the interaction. type (int): The type of the response. data (Optional[Dict[str, Any]]): The data of the response. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, type = type , data = data ) return await self . request ( \"POST\" , Route ( f \"/interactions/ { interaction_id } / { interaction_token } /callback\" ), json = payload , ) get_original_interaction_response ( self , application_id , interaction_token ) async Makes an API call to get the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_original_interaction_response ( self , application_id : int , interaction_token : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), ) edit_original_interaction_response ( self , application_id , interaction_token , * , content = None , embeds = None , file = None , allowed_mentions = None , componenets = None , attachments = None ) async Makes an API call to edit the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[io.BufferedIOBase] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_original_interaction_response ( self , application_id : int , interaction_token : str , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ io . BufferedIOBase ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[io.BufferedIOBase]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. Returns: The data returned from the API. \"\"\" form = [] payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) if file : form . append ( { \"name\" : \"file\" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), json = payload , form = form , ) delete_original_interaction_response ( self , application_id , interaction_token ) async Makes an API call to delete the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_original_interaction_response ( self , application_id : int , interaction_token : str ): \"\"\" Makes an API call to delete the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. Returns: The data returned from the API. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), ) create_followup_message ( self , application_id , interaction_token , * , content = None , embeds = None , file = None , allowed_mentions = None , componenets = None , attachments = None , flags = None ) async Makes an API call to create a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[io.BufferedIOBase] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None flags Optional[int] The flags of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_followup_message ( self , application_id : int , interaction_token : str , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ io . BufferedIOBase ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , flags : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[io.BufferedIOBase]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. flags (Optional[int]): The flags of the response. Returns: The data returned from the API. \"\"\" form = [] payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , flags = flags , ) if file : form . append ( { \"name\" : \"file\" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) return await self . request ( \"POST\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages\" ), json = payload , form = form , ) get_followup_message ( self , application_id , interaction_token , message_id ) async Makes an API call to get a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_followup_message ( self , application_id : int , interaction_token : str , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), ) edit_followup_message ( self , application_id , interaction_token , message_id , * , content = None , embeds = None , file = None , allowed_mentions = None , componenets = None , attachments = None ) async Makes an API call to edit a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[io.BufferedIOBase] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_followup_message ( self , application_id : int , interaction_token : str , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ io . BufferedIOBase ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[io.BufferedIOBase]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. Returns: The data returned from the API. \"\"\" form = [] payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) if file : form . append ( { \"name\" : \"file\" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), json = payload , form = form , ) delete_followup_message ( self , application_id , interaction_token , message_id ) async Makes an API call to delete a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required Source code in lefi/http.py async def delete_followup_message ( self , application_id : int , interaction_token : str , message_id : int ): \"\"\" Makes an API call to delete a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), )","title":"HTTPClient"},{"location":"API-Reference/http/#lefi.http.HTTPClient.__init__","text":"Parameters: Name Type Description Default token str The token to use for authorzation. required loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop to use. required session aiohttp.ClientSession The aiohttp.ClientSession to use for sending requests. required Source code in lefi/http.py def __init__ ( self , token : str , loop : asyncio . AbstractEventLoop ) -> None : \"\"\" Parameters: token (str): The token to use for authorzation. loop (asyncio.AbstractEventLoop): The [asyncio.AbstractEventLoop][] to use. session (aiohttp.ClientSession): The [aiohttp.ClientSession][] to use for sending requests. \"\"\" self . token : str = token self . loop : asyncio . AbstractEventLoop = loop self . session : aiohttp . ClientSession = None # type: ignore self . ratelimiter = RatelimitHandler ( self ) self . _lock = asyncio . Lock ()","title":"__init__()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.request","text":"Makes a request to the discord API. Parameters: Name Type Description Default method str The method for the request. required route lefi.Route The endpoint which to send the request to. required **kwargs Any Any extra options to pass to aiohttp.ClientSession.request {} Returns: Type Description Any The data returned from the request. Source code in lefi/http.py async def request ( self , method : str , route : Route , ** kwargs ) -> Any : \"\"\" Makes a request to the discord API. Parameters: method (str): The method for the request. route (lefi.Route): The endpoint which to send the request to. **kwargs (Any): Any extra options to pass to [aiohttp.ClientSession.request][] Returns: The data returned from the request. Raises: [lefi.errors.HTTPException][] if any error was received from the request. \"\"\" if self . session is None or self . session . closed : self . session = await self . _create_session () headers : Dict = { \"Authorization\" : f \"Bot { self . token } \" } if reason := kwargs . get ( \"reason\" ): headers [ \"X-Audit-Log-Reason\" ] = reason if form := kwargs . pop ( \"form\" , []): formdata = aiohttp . FormData () payload = kwargs . pop ( \"json\" , None ) if payload : formdata . add_field ( \"payload_json\" , value = json . dumps ( payload )) for params in form : formdata . add_field ( ** params ) kwargs [ \"data\" ] = formdata await self . ratelimiter . global_ . wait () head = await self . session . request ( \"HEAD\" , route . url , headers = headers ) semaphore = self . ratelimiter . set ( route . bucket , int ( head . headers . get ( \"X-Ratelimit-Limit\" , 1 )) ) async with self . _lock : await semaphore . acquire () resp = await self . session . request ( method , route . url , ** kwargs , headers = headers ) reset_after : float = float ( resp . headers . get ( \"X-Ratelimit-Reset-After\" , 0 )) remaining : int = int ( resp . headers . get ( \"X-Ratelimit-Remaining\" , 1 )) if resp . status in ( 200 , 201 , 204 , 304 ): self . ratelimiter . release ( route . bucket , reset_after ) try : return await resp . json () except aiohttp . ContentTypeError : return await resp . text () if remaining == 0 and resp . status != 429 : self . ratelimiter . release ( route . bucket , reset_after ) elif resp . status == 429 : data = await resp . json () if data . get ( \"global\" , False ): self . ratelimiter . global_ . clear () self . loop . call_later ( data [ \"retry_after\" ], self . ratelimiter . global_ . set ) await asyncio . sleep ( data [ \"retry_after\" ]) error = self . ERRORS . get ( resp . status , HTTPException ) raise error ( await resp . json ())","title":"request()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_bot_gateway","text":"A method which gets the gateway url. Returns: Type Description Dict A dict which should contain the url. Source code in lefi/http.py async def get_bot_gateway ( self ) -> Dict : \"\"\" A method which gets the gateway url. Returns: A dict which should contain the url. \"\"\" return await self . request ( \"GET\" , Route ( \"/gateway/bot\" ))","title":"get_bot_gateway()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.ws_connect","text":"A method which attempts to connect to the websocket. Returns: Type Description aiohttp.ClientWebSocketResponse A aiohttp.ClientWebSocketResponse instance. Source code in lefi/http.py async def ws_connect ( self , url : str ) -> aiohttp . ClientWebSocketResponse : \"\"\" A method which attempts to connect to the websocket. Returns: A [aiohttp.ClientWebSocketResponse][] instance. \"\"\" return await self . session . ws_connect ( url )","title":"ws_connect()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.login","text":"Checks to see if the token given is valid. Source code in lefi/http.py async def login ( self ) -> None : \"\"\" Checks to see if the token given is valid. Raises: ValueError if an invalid token was passed. \"\"\" try : await self . get_current_user () except ( Forbidden , Unauthorized ): raise ValueError ( \"Invalid token\" )","title":"login()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_channel","text":"Makes an API call to get a channel. Parameters: Name Type Description Default channel_id int The channel's ID. required Returns: Type Description Dict[str, Any] A dict representing the channel. Source code in lefi/http.py async def get_channel ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a channel. Parameters: channel_id (int): The channel's ID. Returns: A dict representing the channel. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } \" ), channel_id = channel_id )","title":"get_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_text_channel","text":"Makes an API call to edit a text channel. Parameters: Name Type Description Default channel_id int The channel id representing the channel to edit. required name Optional[str] The new name for the channel. None type Optional[int] The new type for the channel. None position Optional[int] The new position for the channel. None topic Optional[str] The new topic for the channel. None nsfw Optional[bool] Whether or not the channel should be NSFW. None rate_limit_per_user Optional[int] The new slowmode of the channel. None permissions_overwrites Optional[List[Dict[str, Any]]] The new permission overwrites for the channel. required default_auto_archive_duration Optional[List[Dict[str, Any]]] New time for threads to auto archive. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_text_channel ( self , channel_id : int , * , name : Optional [ str ] = None , type : Optional [ int ] = None , position : Optional [ int ] = None , topic : Optional [ str ] = None , nsfw : Optional [ bool ] = None , rate_limit_per_user : Optional [ int ] = None , permission_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , default_auto_archive_duration : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a text channel. Parameters: channel_id (int): The channel id representing the channel to edit. name (Optional[str]): The new name for the channel. type (Optional[int]): The new type for the channel. position (Optional[int]): The new position for the channel. topic (Optional[str]): The new topic for the channel. nsfw (Optional[bool]): Whether or not the channel should be NSFW. rate_limit_per_user (Optional[int]): The new slowmode of the channel. permissions_overwrites (Optional[List[Dict[str, Any]]]): The new permission overwrites for the channel. default_auto_archive_duration (Optional[List[Dict[str, Any]]]): New time for threads to auto archive. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , type = type , position = position , topic = topic , nsfw = nsfw , rate_limit_per_user = rate_limit_per_user , permission_overwrites = permission_overwrites , default_auto_archive_duration = default_auto_archive_duration , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ), json = payload , )","title":"edit_text_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_voice_channel","text":"Makes an API call to edit a voice channel. Parameters: Name Type Description Default channel_id int The ID representing the voice channel to edit. required name Optional[str] The new name to give the channel. None position Optional[int] The new position of the channel. None bitrate Optional[int] The new bitrate of the channel. None user_limit Optional[int] The new user limit of the channel. None rtc_region Optional[str] The new rtc region of the channel. None video_quality_mode Optional[int] The new video quality of the channel. None sync_permissions Optional[bool] Whether or not to sync the permissions. None permissions_overwrites Optional[List[Dict[str, Any]]] The new permissions ovewrites for the channel. None Returns: Type Description Dict[str, Any] The data received from the API after the call. Source code in lefi/http.py async def edit_voice_channel ( self , channel_id : int , * , name : Optional [ str ] = None , position : Optional [ int ] = None , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , rtc_region : Optional [ str ] = None , video_quality_mode : Optional [ int ] = None , sync_permissions : Optional [ bool ] = None , permissions_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a voice channel. Parameters: channel_id (int): The ID representing the voice channel to edit. name (Optional[str]): The new name to give the channel. position (Optional[int]): The new position of the channel. bitrate (Optional[int]): The new bitrate of the channel. user_limit (Optional[int]): The new user limit of the channel. rtc_region (Optional[str]): The new rtc region of the channel. video_quality_mode (Optional[int]): The new video quality of the channel. sync_permissions (Optional[bool]): Whether or not to sync the permissions. permissions_overwrites (Optional[List[Dict[str, Any]]]): The new permissions ovewrites for the channel. Returns: The data received from the API after the call. \"\"\" payload = update_payload ( {}, name = name , position = position , bitrate = bitrate , user_limit = user_limit , rtc_region = rtc_region , video_quality_mode = video_quality_mode , sync_permissions = sync_permissions , permissions_overwrites = permissions_overwrites , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ), json = payload , )","title":"edit_voice_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_channel_messages","text":"Makes an API call to get a list of messages in a channel. Only returns messages within the range of the parameters passed. Parameters: Name Type Description Default channel_id int The ID representing the channel. required around Optional[int] Gets messages around this message ID. None before Optional[int] Gets messages before this message ID. None after Optional[int] Gets messages after this message ID. None limit int THe amount of messages to grab. 50 Returns: Type Description List[Dict[str, Any]] The data received after making the call. Source code in lefi/http.py async def get_channel_messages ( self , channel_id : int , * , around : Optional [ int ] = None , before : Optional [ int ] = None , after : Optional [ int ] = None , limit : int = 50 , ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get a list of messages in a channel. Only returns messages within the range of the parameters passed. Parameters: channel_id (int): The ID representing the channel. around (Optional[int]): Gets messages around this message ID. before (Optional[int]): Gets messages before this message ID. after (Optional[int]): Gets messages after this message ID. limit (int): THe amount of messages to grab. Returns: The data received after making the call. \"\"\" params = { \"limit\" : limit } update_payload ( params , around = around , before = before , after = after ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages\" , channel_id = channel_id ), params = params , )","title":"get_channel_messages()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_channel_message","text":"Makes an API call to get a specific message by ID. Parameters: Name Type Description Default channel_id int The channel ID which the message is in. required message_id int The messages ID. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_channel_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a specific message by ID. Parameters: channel_id (int): The channel ID which the message is in. message_id (int): The messages ID. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), )","title":"get_channel_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.send_message","text":"Makes an API call to send a message. Parameters: Name Type Description Default channel_id int The ID of the channel which to send the message in. required content Optional[str] The content of the message. None tts bool Whether or not to send the message with text-to-speech. False embeds Optional[List[Dict[str, Any]]] The list of embeds to send. None message_reference Optional[Dict[str, Any]] The messages to reference when sending the message. None components Optional[List[Dict[str, Any]]] The components to attach to the message. None sticker_ids Optional[List[int]] The stickers to send with the message. None Note Max embeds that can sent at a time is 10. Source code in lefi/http.py async def send_message ( self , channel_id : int , content : Optional [ str ] = None , * , tts : bool = False , embeds : Optional [ List [ Dict [ str , Any ]]] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , message_reference : Optional [ Dict [ str , Any ]] = None , components : Optional [ List [ Dict [ str , Any ]]] = None , sticker_ids : Optional [ List [ int ]] = None , files : Optional [ List [ io . BufferedIOBase ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to send a message. Parameters: channel_id (int): The ID of the channel which to send the message in. content (Optional[str]): The content of the message. tts (bool): Whether or not to send the message with text-to-speech. embeds (Optional[List[Dict[str, Any]]]): The list of embeds to send. message_reference (Optional[Dict[str, Any]]): The messages to reference when sending the message. components (Optional[List[Dict[str, Any]]]): The components to attach to the message. sticker_ids (Optional[List[int]]): The stickers to send with the message. Note: Max embeds that can sent at a time is 10. \"\"\" payload = { \"tts\" : tts } files = files or [] form = [] for index , file in enumerate ( files ): form . append ( { \"name\" : f \"file- { index } \" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) update_payload ( payload , content = content , embeds = embeds , allowed_mentions = allowed_mentions , message_reference = message_reference , components = components , sticker_ids = sticker_ids , ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages\" , channel_id = channel_id ), json = payload , form = form , )","title":"send_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.crosspost_message","text":"Makes an API call to crosspost a message. Parameters: Name Type Description Default channel_id int The ID of the channel to crosspost to. required message_id int The ID of the message which to crosspost. required Returns: Type Description Dict[str, Any] The data received after making the call. Source code in lefi/http.py async def crosspost_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to crosspost a message. Parameters: channel_id (int): The ID of the channel to crosspost to. message_id (int): The ID of the message which to crosspost. Returns: The data received after making the call. \"\"\" return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /crosspost\" , channel_id = channel_id , ), )","title":"crosspost_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_reaction","text":"Makes an API call to add a reaction to a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message which to add the reaction to. required emoji str The emoji which to add. required Returns: Type Description The data received from the API after making the call. Source code in lefi/http.py async def create_reaction ( self , channel_id : int , message_id : int , emoji : str ): \"\"\" Makes an API call to add a reaction to a message. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message which to add the reaction to. emoji (str): The emoji which to add. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } /@me\" , channel_id = channel_id , ), )","title":"create_reaction()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_reaction","text":"Makes an API call to delete a reaction. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required emoji str The emoji to remove from the message's reactions. required user_id Optional[int] The ID of the user to remove from the reactions. None Returns: Type Description None The data received from the API after making the call. Note If no user_id is given it will delete the client's reaction. Source code in lefi/http.py async def delete_reaction ( self , channel_id : int , message_id : int , emoji : str , user_id : Optional [ int ] = None , ) -> None : \"\"\" Makes an API call to delete a reaction. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. emoji (str): The emoji to remove from the message's reactions. user_id (Optional[int]): The ID of the user to remove from the reactions. Returns: The data received from the API after making the call. Note: If no user_id is given it will delete the client's reaction. \"\"\" if user_id is not None : path = f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } / { user_id } \" else : path = f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } /@me\" await self . request ( \"DELETE\" , Route ( path , channel_id = channel_id ))","title":"delete_reaction()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_reactions","text":"Makes an API call to get a list of users who reacted to a message.. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required emoji str The emoji from which to grab users from. required after int Grab users after this user ID. None limit int The max amount of users to grab. 25 Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_reactions ( self , channel_id : int , message_id : int , emoji : str , * , after : Optional [ int ] = None , limit : int = 25 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a list of users who reacted to a message.. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. emoji (str): The emoji from which to grab users from. after (int): Grab users after this user ID. limit (int): The max amount of users to grab. Returns: The data received from the API after making the call. \"\"\" params = { \"limit\" : limit } update_payload ( params , after = after ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } \" , channel_id = channel_id , ), params = params , )","title":"get_reactions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_all_reactions","text":"Makes an API call to remove all reactions of a message. Parameters: Name Type Description Default channel_id int The channel which the target message is in. required message_id int The ID of the message. required emoji str The reaction to remove. required Returns: Type Description Dict[str, Any] The data received from the API After making the call. Source code in lefi/http.py async def delete_all_reactions ( self , channel_id : int , message_id : int , emoji : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to remove all reactions of a message. Parameters: channel_id (int): The channel which the target message is in. message_id (int): The ID of the message. emoji (str): The reaction to remove. Returns: The data received from the API After making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } \" , channel_id = channel_id , ), )","title":"delete_all_reactions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_message","text":"Makes an API call to edit a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required content Optional[str] The new content of the message. None embeds Optional[List[Dict[str, Any]]] The new embeds of the message. None flags Optional[int] The new flags of the message. None allowed_mentions Optional[int] The new allowed mentions of the message. None attachments Optional[List[Dict[str, Any]]] The new attachments of the message. None components Optional[List[Dict[str, Any]]] The new components of the message. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_message ( self , channel_id : int , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , flags : Optional [ int ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , components : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a message. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. content (Optional[str]): The new content of the message. embeds (Optional[List[Dict[str, Any]]]): The new embeds of the message. flags (Optional[int]): The new flags of the message. allowed_mentions (Optional[int]): The new allowed mentions of the message. attachments (Optional[List[Dict[str, Any]]]): The new attachments of the message. components (Optional[List[Dict[str, Any]]]): The new components of the message. Returns: The data received from the API after making the call. \"\"\" payload : dict = {} update_payload ( payload , content = content , embeds = embeds , flags = flags , allowed_mentions = allowed_mentions , attachments = attachments , components = components , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), json = payload , )","title":"edit_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_message","text":"Makes an API call to delete a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_id int The ID Of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a message. Parameters: channel_id (int): The ID of the channel which the message is in. message_id (int): The ID Of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), )","title":"delete_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.bulk_delete_messages","text":"Makes an API call to delete multiple messages. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_ids List[int] The list of ID's representing messages of which to delete. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def bulk_delete_messages ( self , channel_id : int , message_ids : List [ int ] ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete multiple messages. Parameters: channel_id (int): The ID of the channel which the message is in. message_ids (List[int]): The list of ID's representing messages of which to delete. Returns: The data received from the API after making the call. \"\"\" payload = { \"messages\" : message_ids } return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/bulk-delete\" , channel_id = channel_id ), json = payload , )","title":"bulk_delete_messages()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_channel_permissions","text":"Makes an API call to edit a channels permissions. Parameters: Name Type Description Default channel_id int The ID of the channel. required overwrite_id int The ID of the overwrite. required allow Optional[int] The bitwise value of all allowed permissions. None deny Optional[int] The bitwise value of all denied permissison. None type Optional[int] The type, 0 being a role and 1 being a member. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_channel_permissions ( self , channel_id : int , overwrite_id : int , * , allow : Optional [ int ] = None , deny : Optional [ int ] = None , type : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a channels permissions. Parameters: channel_id (int): The ID of the channel. overwrite_id (int): The ID of the overwrite. allow (Optional[int]): The bitwise value of all allowed permissions. deny (Optional[int]): The bitwise value of all denied permissison. type (Optional[int]): The type, 0 being a role and 1 being a member. Returns: The data received from the API after making the call. \"\"\" payload : dict = {} update_payload ( payload , allow = allow , deny = deny , type = type ) return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /permissions/ { overwrite_id } \" , channel_id = channel_id , ), json = payload , )","title":"edit_channel_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_channel_permissions","text":"Makes an API call to delete an overwrite from a channel. Parameters: Name Type Description Default channel_id int The ID of the channel. required overwrite_id int The ID of the overwrite. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_channel_permissions ( self , channel_id : int , overwrite_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete an overwrite from a channel. Parameters: channel_id (int): The ID of the channel. overwrite_id (int): The ID of the overwrite. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /permissions/ { overwrite_id } \" , channel_id = channel_id , ), )","title":"delete_channel_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_channel_invites","text":"Makes an API call to get a channels invites. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_channel_invites ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a channels invites. Parameters: channel_id (int): The ID of the channel. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /invites\" , channel_id = channel_id ) )","title":"get_channel_invites()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_channel_invite","text":"Makes an API call to create an invite. Parameters: Name Type Description Default channel_id int The ID of the channel. required max_age int The max age of the invite. 86400 max_uses int The max uses of the invite. 0 if unlimited. 0 temporary bool Whether or not the invite is temporary. False unique bool Whether or not the invite is unique. False target_type Optional[int] The type of the invite. For voice channels. None target_user_id Optional[int] The ID of the user whose stream to invite to. For voice channels. None target_application_id Optional[int] The ID of embedded application to invite from. For target type 2. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_channel_invite ( self , channel_id : int , * , max_age : int = 86400 , max_uses : int = 0 , temporary : bool = False , unique : bool = False , target_type : Optional [ int ] = None , target_user_id : Optional [ int ] = None , target_application_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an invite. Parameters: channel_id (int): The ID of the channel. max_age (int): The max age of the invite. max_uses (int): The max uses of the invite. 0 if unlimited. temporary (bool): Whether or not the invite is temporary. unique (bool): Whether or not the invite is unique. target_type (Optional[int]): The type of the invite. For voice channels. target_user_id (Optional[int]): The ID of the user whose stream to invite to. For voice channels. target_application_id (Optional[int]): The ID of embedded application to invite from. For target type 2. Returns: The data received from the API after making the call. \"\"\" payload = { \"max_age\" : max_age , \"max_uses\" : max_uses , \"temporary\" : temporary , \"unique\" : unique , } update_payload ( payload , target_type = target_type , target_user_id = target_user_id , target_application_id = target_application_id , ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /invites\" , channel_id = channel_id ), json = payload , )","title":"create_channel_invite()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.follow_news_channel","text":"Makes an API call to follow a news channel to send messages to a target channel. Parameters: Name Type Description Default channel_id int The ID Of the channel. required webhook_channel_id int The target channel. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def follow_news_channel ( self , channel_id : int , webhook_channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to follow a news channel to send messages to a target channel. Parameters: channel_id (int): The ID Of the channel. webhook_channel_id (int): The target channel. Returns: The data received from the API after making the call. \"\"\" payload = { \"webhook_channel_id\" : webhook_channel_id } return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /followers/@me\" , channel_id = channel_id ), json = payload , )","title":"follow_news_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.trigger_typing","text":"Makes an API call to trigger typing. Parameters: Name Type Description Default channel_id int The ID of the channel which to trigger typing in. required Returns: Type Description Dict[str, Any] The data received from the API After making the call. Source code in lefi/http.py async def trigger_typing ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to trigger typing. Parameters: channel_id (int): The ID of the channel which to trigger typing in. Returns: The data received from the API After making the call. \"\"\" return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /typing\" , channel_id = channel_id ) )","title":"trigger_typing()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_pinned_messages","text":"Makes an API call to get the pinned messages of a channel. Parameters: Name Type Description Default channel_id int The ID of the channel which to grab pinned messages from. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_pinned_messages ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the pinned messages of a channel. Parameters: channel_id (int): The ID of the channel which to grab pinned messages from. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /pins\" , channel_id = channel_id ) )","title":"get_pinned_messages()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.pin_message","text":"Makes an API call to pin a message. Parameters: Name Type Description Default channel_id int The ID of the channel where the message is. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def pin_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to pin a message. Parameters: channel_id (int): The ID of the channel where the message is. message_id (int): The ID of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /pins/ { message_id } \" , channel_id = channel_id ), )","title":"pin_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.unpin_message","text":"Makes an API call to unpin a message. Parameters: Name Type Description Default channel_id int The ID Of the channel where the message is. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def unpin_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to unpin a message. Parameters: channel_id (int): The ID Of the channel where the message is. message_id (int): The ID of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /pins/ { message_id } \" , channel_id = channel_id ), )","title":"unpin_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.start_thread_with_message","text":"Makes an API call to start a thread with a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_id int The ID Of the message. required name str The name of the thread. required auto_archive_duration int The time it takes to auto archive the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def start_thread_with_message ( self , channel_id : int , message_id : int , * , name : str , auto_archive_duration : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to start a thread with a message. Parameters: channel_id (int): The ID of the channel which the message is in. message_id (int): The ID Of the message. name (str): The name of the thread. auto_archive_duration (int): The time it takes to auto archive the thread. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name , \"auto_archive_duration\" : auto_archive_duration } return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /threads\" , channel_id = channel_id , ), json = payload , )","title":"start_thread_with_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.start_thread_without_message","text":"Makes an API call to start a thread without a message. Parameters: Name Type Description Default channel_id int The ID of the channel where the thread will be created. required name str The name of the thread. required auto_archive_duration int The time it takes to auto archive the thread. required type int The type of the thread to create. None invitable bool Whether or not members can invite other members to the thread. Only in private threads. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def start_thread_without_message ( self , channel_id : int , * , name : str , auto_archive_duration : int , type : Optional [ int ] = None , invitable : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to start a thread without a message. Parameters: channel_id (int): The ID of the channel where the thread will be created. name (str): The name of the thread. auto_archive_duration (int): The time it takes to auto archive the thread. type (int): The type of the thread to create. invitable (bool): Whether or not members can invite other members to the thread. Only in private threads. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name , \"auto_archive_duration\" : auto_archive_duration } update_payload ( payload , type = type , invitable = invitable ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /threads\" , channel_id = channel_id ), json = payload , )","title":"start_thread_without_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.join_thread","text":"Makes an API call which makes the client join the given thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def join_thread ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which makes the client join the given thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /thread-members/@me\" , channel_id = channel_id ), )","title":"join_thread()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.add_thread_member","text":"Makes an API call which adds another member to the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required user_id int The ID of the user to add. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def add_thread_member ( self , channel_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which adds another member to the thread. Parameters: channel_id (int): The ID of the thread. user_id (int): The ID of the user to add. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /thread-members/ { user_id } \" , channel_id = channel_id , ), )","title":"add_thread_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.leave_thread","text":"Makes an API call which makes the client leave the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def leave_thread ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which makes the client leave the thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /thread-members/@me\" , channel_id = channel_id ), )","title":"leave_thread()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.remove_thread_member","text":"Makes an API call which removes a member from the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required user_id int The ID of the user to remove. required Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def remove_thread_member ( self , channel_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which removes a member from the thread. Parameters: channel_id (int): The ID of the thread. user_id (int): The ID of the user to remove. Returns: The data received from the API after making the call \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /thread-members/ { user_id } \" , channel_id = channel_id , ), )","title":"remove_thread_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_thread_members","text":"Makes an API call to get all of the members of a thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_thread_members ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get all of the members of a thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /thread-members\" , channel_id = channel_id ), )","title":"list_thread_members()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_public_archived_threads","text":"Makes an API call which list all the public archived threads in the channel. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_public_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call which list all the public archived threads in the channel. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /threads/archived/public\" , channel_id = channel_id ), params = params , )","title":"list_public_archived_threads()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_private_archived_threads","text":"Makes an API call which list all the private archived threads in the channel. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description The data received from the API after making the call Source code in lefi/http.py async def list_private_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ): \"\"\" Makes an API call which list all the private archived threads in the channel. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /threads/archived/private\" , channel_id = channel_id , ), params = params , )","title":"list_private_archived_threads()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_joined_private_archived_threads","text":"Makes an API call which list all the private archived threads in the channel which the client has joined. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_joined_private_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call which list all the private archived threads in the channel which the client has joined. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /users/@me/threads/archived/private\" , channel_id = channel_id , ), params = params , )","title":"list_joined_private_archived_threads()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_guild_emojis","text":"Makes an API call to get a list of the guilds emojis. Parameters: Name Type Description Default guild_id int The ID of the guild to grab from. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def list_guild_emojis ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a list of the guilds emojis. Parameters: guild_id (int): The ID of the guild to grab from. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /emojis\" , guild_id = guild_id ) )","title":"list_guild_emojis()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_emoji","text":"Makes an API call to get an emoji from the guild. Parameters: Name Type Description Default guild_id int The ID of the guild to grab from. required emoji_id int The ID of the emoji to get. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_guild_emoji ( self , guild_id : int , emoji_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get an emoji from the guild. Parameters: guild_id (int): The ID of the guild to grab from. emoji_id (int): The ID of the emoji to get. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ) )","title":"get_guild_emoji()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_emoji","text":"Makes an API call to create an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild to create the emoji in. required name str The name of the emoji. required image str The image of the emoji. required roles Optional[List[int]] The list of roles that can use this emoji. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_guild_emoji ( self , guild_id : int , * , name : str , image : bytes , roles : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an emoji. Parameters: guild_id (int): The ID of the guild to create the emoji in. name (str): The name of the emoji. image (str): The image of the emoji. roles (Optional[List[int]]): The list of roles that can use this emoji. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name , \"image\" : bytes_to_data_uri ( image ), \"roles\" : [] if roles is None else roles , } return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /emojis\" , guild_id = guild_id ), json = payload , )","title":"create_guild_emoji()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild_emoji","text":"Makes an API call to edit an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild where the emoji is. required emoji_id int The ID of the emoji. required name str The new name of the emoji. required roles Optional[List[int]] The new list of roles that can use this emoji. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def modify_guild_emoji ( self , guild_id : int , emoji_id : int , * , name : str , roles : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit an emoji. Parameters: guild_id (int): The ID of the guild where the emoji is. emoji_id (int): The ID of the emoji. name (str): The new name of the emoji. roles (Optional[List[int]]): The new list of roles that can use this emoji. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name } update_payload ( payload , roles = roles ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ), json = payload , )","title":"modify_guild_emoji()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_emoji","text":"Makes an API call which deletes an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild where the emoji is in. required emoji_id int The ID of the emoji to delete. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_guild_emoji ( self , guild_id : int , emoji_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which deletes an emoji. Parameters: guild_id (int): The ID of the guild where the emoji is in. emoji_id (int): The ID of the emoji to delete. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ) )","title":"delete_guild_emoji()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild","text":"Makes an API call to create a guild. Parameters: Name Type Description Default name str The name of the guild. required region Optional[str] The region of the guild. None icon Optional[str] The icon of the guild. None verification_level Optional[int] The verification level of the guild. None default_message_notifications Optional[int] The default message notifications of the guild. None explicit_content_filter Optional[int] The explicit content filter of the guild. None roles Optional[List[Dict[str, Any]]] The list of roles to create. None channels Optional[List[Dict[str, Any]]]] The list of channels to create. None afk_channel Optional[int] The ID of the AFK channel. None afk_timeout Optional[int] The AFK timeout of the guild. None system_channel_id Optional[int] The ID of the system channel. None system_channel_flags Optional[int] The flags of the system channel. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_guild ( self , name : str , * , region : Optional [ str ] = None , icon : Optional [ bytes ] = None , verification_level : Optional [ int ] = None , default_message_notifications : Optional [ int ] = None , explicit_content_filter : Optional [ int ] = None , roles : Optional [ List [ Dict [ str , Any ]]] = None , channels : Optional [ List [ Dict [ str , Any ]]] = None , afk_channel : Optional [ int ] = None , afk_timeout : Optional [ int ] = None , system_channel_id : Optional [ int ] = None , system_channel_flags : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild. Parameters: name (str): The name of the guild. region (Optional[str]): The region of the guild. icon (Optional[str]): The icon of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. explicit_content_filter (Optional[int]): The explicit content filter of the guild. roles (Optional[List[Dict[str, Any]]]): The list of roles to create. channels (Optional[List[Dict[str, Any]]]]): The list of channels to create. afk_channel (Optional[int]): The ID of the AFK channel. afk_timeout (Optional[int]): The AFK timeout of the guild. system_channel_id (Optional[int]): The ID of the system channel. system_channel_flags (Optional[int]): The flags of the system channel. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , region = region , icon = icon , verification_level = verification_level , default_message_notifications = default_message_notifications , explicit_content_filter = explicit_content_filter , roles = roles , channels = channels , afk_channel = afk_channel , afk_timeout = afk_timeout , system_channel_id = system_channel_id , system_channel_flags = system_channel_flags , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( \"/guilds\" ), json = payload )","title":"create_guild()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild","text":"Makes an API call to get a guild. Parameters: Name Type Description Default guild_id int The ID of the guild to get. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_guild ( self , guild_id : int , * , with_counts : bool = False ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild. Parameters: guild_id (int): The ID of the guild to get. Returns: The data received from the API after making the call. \"\"\" params = { \"with_counts\" : with_counts } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id ), params = params )","title":"get_guild()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_preview","text":"Makes an API call to get a guild's preview. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_preview ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's preview. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /preview\" , guild_id = guild_id ) )","title":"get_guild_preview()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild","text":"Makes an API call to modify a guild. Parameters guild_id (int): The ID of the guild to edit. name (Optional[str]): The name of the guild. region (Optional[str]): The region of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. afk_channel (Optional[int]): The AFK channel of the guild. afk_timeout (Optional[int]): The AFK timeout of the guild. icon (Optional[str]): The icon of the guild. owner_id (Optional[int]): The ID of the owner of the guild. splash (Optional[str]): The splash of the guild. discovery_splash (Optional[str]): The discovery splash of the guild. banner (Optional[str]): The banner of the guild. system_channel_id (Optional[int]): The ID of the system channel of the guild. system_channel_flags (Optional[int]): The flags of the system channel of the guild. rules_channel_id (Optional[int]): The ID of the rules channel of the guild. public_updates_channel_id (Optional[int]): The ID of the public updates channel of the guild. preferred_locale (Optional[str]): The preferred locale of the guild. features (Optional[List[str]]): The features of the guild. description (Optional[str]): The description of the guild. Returns: Type Description The data returned from the API. Source code in lefi/http.py async def modify_guild ( self , guild_id : int , * , name : Optional [ str ] = None , region : Optional [ str ] = None , verification_level : Optional [ int ] = None , default_message_notifications : Optional [ int ] = None , afk_channel : Optional [ int ] = None , afk_timeout : Optional [ int ] = None , icon : Optional [ bytes ] = None , owner_id : Optional [ int ] = None , splash : Optional [ bytes ] = None , discovery_splash : Optional [ bytes ] = None , banner : Optional [ bytes ] = None , system_channel_id : Optional [ int ] = None , system_channel_flags : Optional [ int ] = None , rules_channel_id : Optional [ int ] = None , public_updates_channel_id : Optional [ int ] = None , preferred_locale : Optional [ str ] = None , features : Optional [ List [ str ]] = None , description : Optional [ str ] = None , ): \"\"\" Makes an API call to modify a guild. Parameters guild_id (int): The ID of the guild to edit. name (Optional[str]): The name of the guild. region (Optional[str]): The region of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. afk_channel (Optional[int]): The AFK channel of the guild. afk_timeout (Optional[int]): The AFK timeout of the guild. icon (Optional[str]): The icon of the guild. owner_id (Optional[int]): The ID of the owner of the guild. splash (Optional[str]): The splash of the guild. discovery_splash (Optional[str]): The discovery splash of the guild. banner (Optional[str]): The banner of the guild. system_channel_id (Optional[int]): The ID of the system channel of the guild. system_channel_flags (Optional[int]): The flags of the system channel of the guild. rules_channel_id (Optional[int]): The ID of the rules channel of the guild. public_updates_channel_id (Optional[int]): The ID of the public updates channel of the guild. preferred_locale (Optional[str]): The preferred locale of the guild. features (Optional[List[str]]): The features of the guild. description (Optional[str]): The description of the guild. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , region = region , verification_level = verification_level , default_message_notifications = default_message_notifications , afk_channel = afk_channel , afk_timeout = afk_timeout , icon = icon , owner_id = owner_id , splash = splash , discovery_splash = discovery_splash , banner = banner , system_channel_id = system_channel_id , system_channel_flags = system_channel_flags , rules_channel_id = rules_channel_id , public_updates_channel_id = public_updates_channel_id , preferred_locale = preferred_locale , features = features , description = description , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) if \"splash\" in payload : payload [ \"splash\" ] = bytes_to_data_uri ( payload [ \"splash\" ]) if \"discovery_splash\" in payload : payload [ \"discovery_splash\" ] = bytes_to_data_uri ( payload [ \"discovery_splash\" ]) if \"banner\" in payload : payload [ \"banner\" ] = bytes_to_data_uri ( payload [ \"banner\" ]) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id ), json = payload )","title":"modify_guild()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild","text":"Makes an API call to delete a guild. Parameters: Name Type Description Default guild_id int The ID of the guild to delete. required Source code in lefi/http.py async def delete_guild ( self , guild_id : int ): \"\"\" Makes an API call to delete a guild. Parameters: guild_id (int): The ID of the guild to delete. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id ))","title":"delete_guild()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_channels","text":"Makes an API call to get a guild's channels. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_channels ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's channels. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /channels\" , guild_id = guild_id ) )","title":"get_guild_channels()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_channel","text":"Makes an API call to create a channel in a guild. Parameters guild_id (int): The ID of the guild. name (str): The name of the channel. type (Optional[int]): The type of the channel. topic (Optional[str]): The topic of the channel. bitrate (Optional[int]): The bitrate of the channel. user_limit (Optional[int]): The user limit of the channel. position (Optional[int]): The position of the channel. permission_overwrites (Optional[List[Dict[str, Any]]]): The permission overwrites of the channel. parent_id (Optional[int]): The ID of the parent of the channel. nsfw (Optional[bool]): Whether the channel is NSFW. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_channel ( self , guild_id : int , name : str , * , type : Optional [ int ] = None , topic : Optional [ str ] = None , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , position : Optional [ int ] = None , permission_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , parent_id : Optional [ int ] = None , nsfw : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a channel in a guild. Parameters guild_id (int): The ID of the guild. name (str): The name of the channel. type (Optional[int]): The type of the channel. topic (Optional[str]): The topic of the channel. bitrate (Optional[int]): The bitrate of the channel. user_limit (Optional[int]): The user limit of the channel. position (Optional[int]): The position of the channel. permission_overwrites (Optional[List[Dict[str, Any]]]): The permission overwrites of the channel. parent_id (Optional[int]): The ID of the parent of the channel. nsfw (Optional[bool]): Whether the channel is NSFW. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , type = type , topic = topic , bitrate = bitrate , user_limit = user_limit , position = position , permission_overwrites = permission_overwrites , parent_id = parent_id , nsfw = nsfw , ) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /channels\" , guild_id = guild_id ), json = payload , )","title":"create_guild_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_active_threads","text":"Makes an API call to get a guild's active threads. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_active_threads ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's active threads. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /threads/active\" , guild_id = guild_id ) )","title":"list_active_threads()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_member","text":"Makes an API call to get a guild member. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_member ( self , guild_id : int , member_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild member. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ) )","title":"get_guild_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_guild_members","text":"Makes an API call to get a guild's members. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_guild_members ( self , guild_id : int , * , limit : int = 1 , after : int = 0 ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's members. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" params = { \"limit\" : limit , \"after\" : after } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members\" , guild_id = guild_id ), params = params , )","title":"list_guild_members()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.search_guild_members","text":"Makes an API call to search a guild's members. Parameters: Name Type Description Default guild_id int The ID of the guild. required query str The query to search for. required limit Optional[int] The number of members to return. 1 Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def search_guild_members ( self , guild_id : int , * , query : str , limit : int = 1 ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to search a guild's members. Parameters: guild_id (int): The ID of the guild. query (str): The query to search for. limit (Optional[int]): The number of members to return. Returns: The data returned from the API. \"\"\" params = { \"limit\" : limit , \"query\" : query } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members/search\" , guild_id = guild_id ), params = params , )","title":"search_guild_members()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.add_guild_member","text":"Makes an API call to add a member to a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required access_token str An oauth2 access token. required nick Optional[str] The nickname of the member. None roles Optional[List[int]] The roles of the member. None mute Optional[bool] Whether the member is muted. None deaf Optional[bool] Whether the member is deafened. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def add_guild_member ( self , guild_id : int , member_id : int , access_token : str , * , nick : Optional [ str ] = None , roles : Optional [ List [ int ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to add a member to a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. access_token (str): An oauth2 access token. nick (Optional[str]): The nickname of the member. roles (Optional[List[int]]): The roles of the member. mute (Optional[bool]): Whether the member is muted. deaf (Optional[bool]): Whether the member is deafened. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, access_token = access_token , nick = nick , roles = roles , mute = mute , deaf = deaf ) return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ), json = payload , )","title":"add_guild_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_guild_member","text":"Makes an API call to edit a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required nick Optional[str] The nickname of the member. None roles Optional[List[int]] The roles of the member. None mute Optional[bool] Whether the member is muted. None deaf Optional[bool] Whether the member is deafened. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_guild_member ( self , guild_id : int , member_id : int , * , nick : Optional [ str ] = None , roles : Optional [ List [ int ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , channel_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. nick (Optional[str]): The nickname of the member. roles (Optional[List[int]]): The roles of the member. mute (Optional[bool]): Whether the member is muted. deaf (Optional[bool]): Whether the member is deafened. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, nick = nick , roles = roles , mute = mute , deaf = deaf , channel_id = channel_id ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ), json = payload , )","title":"edit_guild_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_current_member","text":"Makes an API call to edit the current userin a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required nick Optional[str] The nickname of the member. None Returns: Type Description The data returned from the API. Source code in lefi/http.py async def edit_current_member ( self , guild_id : int , * , nick : Optional [ str ] = None ): \"\"\" Makes an API call to edit the current userin a guild. Parameters: guild_id (int): The ID of the guild. nick (Optional[str]): The nickname of the member. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, nick = nick ) return await self . request ( \"PATCH\" , Route ( f \"/users/@me/guilds/ { guild_id } \" , guild_id = guild_id ), json = payload , )","title":"edit_current_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.add_guild_member_role","text":"Makes an API call to add a role to a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def add_guild_member_role ( self , guild_id : int , member_id : int , role_id : int ): \"\"\" Makes an API call to add a role to a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } /roles/ { role_id } \" , guild_id = guild_id , ), )","title":"add_guild_member_role()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.remove_guild_member_role","text":"Makes an API call to remove a role from a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_member_role ( self , guild_id : int , member_id : int , role_id : int ): \"\"\" Makes an API call to remove a role from a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } /roles/ { role_id } \" , guild_id = guild_id , ), )","title":"remove_guild_member_role()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.remove_guild_member","text":"Makes an API call to remove a member from a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_member ( self , guild_id : int , member_id : int ): \"\"\" Makes an API call to remove a member from a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" ), guild_id = guild_id , )","title":"remove_guild_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_bans","text":"Makes an API call to get the bans of a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_bans ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the bans of a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /bans\" ), guild_id = guild_id )","title":"get_guild_bans()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_ban","text":"Makes an API call to get the ban of a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_ban ( self , guild_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the ban of a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" ), guild_id = guild_id )","title":"get_guild_ban()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_ban","text":"Makes an API call to ban a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required delete_message_days int The number of days to delete messages for. 0 Returns: Type Description The data returned from the API. Source code in lefi/http.py async def create_guild_ban ( self , guild_id : int , user_id : int , * , delete_message_days : int = 0 ): \"\"\" Makes an API call to ban a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. delete_message_days (int): The number of days to delete messages for. Returns: The data returned from the API. \"\"\" payload = { \"delete_message_days\" : delete_message_days } return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" , guild_id = guild_id ), json = payload , )","title":"create_guild_ban()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.remove_guild_ban","text":"Makes an API call to unban a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_ban ( self , guild_id : int , user_id : int ): \"\"\" Makes an API call to unban a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" ), guild_id = guild_id )","title":"remove_guild_ban()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_roles","text":"Makes an API call to get the roles of a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_roles ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the roles of a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /roles\" ), guild_id = guild_id )","title":"get_guild_roles()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_role","text":"Makes an API call to create a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required name Optional[str] The name of the role. None permissions Optional[int] The permissions of the role. None color Optional[int] The color of the role. None hoist bool Whether the role is hoisted. False mentionable bool Whether the role is mentionable. False icon Optional[str] The icon of the role. None unicode_emoji Optional[str] The unicode emoji of the role. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_role ( self , guild_id : int , * , name : Optional [ str ] = None , permissions : Optional [ int ] = None , color : Optional [ int ] = None , hoist : bool = False , mentionable : bool = False , icon : Optional [ bytes ] = None , unicode_emoji : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a role in a guild. Parameters: guild_id (int): The ID of the guild. name (Optional[str]): The name of the role. permissions (Optional[int]): The permissions of the role. color (Optional[int]): The color of the role. hoist (bool): Whether the role is hoisted. mentionable (bool): Whether the role is mentionable. icon (Optional[str]): The icon of the role. unicode_emoji (Optional[str]): The unicode emoji of the role. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , permissions = permissions , color = color , hoist = hoist , mentionable = mentionable , icon = icon , unicode_emoji = unicode_emoji , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /roles\" , guild_id = guild_id ), json = payload )","title":"create_guild_role()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild_role","text":"Makes an API call to modify a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required role_id int The ID of the role. required name Optional[str] The name of the role. None permissions Optional[int] The permissions of the role. None color Optional[int] The color of the role. None hoist Optional[bool] Whether the role is hoisted. None mentionable Optional[bool] Whether the role is mentionable. None icon Optional[str] The icon of the role. None unicode_emoji Optional[str] The unicode emoji of the role. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_role ( self , guild_id : int , role_id : int , * , name : Optional [ str ] = None , permissions : Optional [ int ] = None , color : Optional [ int ] = None , hoist : Optional [ bool ] = None , mentionable : Optional [ bool ] = None , icon : Optional [ bytes ] = None , unicode_emoji : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a role in a guild. Parameters: guild_id (int): The ID of the guild. role_id (int): The ID of the role. name (Optional[str]): The name of the role. permissions (Optional[int]): The permissions of the role. color (Optional[int]): The color of the role. hoist (Optional[bool]): Whether the role is hoisted. mentionable (Optional[bool]): Whether the role is mentionable. icon (Optional[str]): The icon of the role. unicode_emoji (Optional[str]): The unicode emoji of the role. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , permissions = permissions , color = color , hoist = hoist , mentionable = mentionable , icon = icon , unicode_emoji = unicode_emoji , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /roles/ { role_id } \" , guild_id = guild_id ), json = payload , )","title":"modify_guild_role()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_role","text":"Makes an API call to delete a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_guild_role ( self , guild_id : int , role_id : int ): \"\"\" Makes an API call to delete a role in a guild. Parameters: guild_id (int): The ID of the guild. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /roles/ { role_id } \" ), guild_id = guild_id )","title":"delete_guild_role()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_prune_count","text":"Makes an API call to get the number of members to prune in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required days int The number of days to count. 7 include_roles Optional[List[int]] The IDs of the roles to include. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_prune_count ( self , guild_id : int , * , days : int = 7 , include_roles : Optional [ List [ int ]] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the number of members to prune in a guild. Parameters: guild_id (int): The ID of the guild. days (int): The number of days to count. include_roles (Optional[List[int]]): The IDs of the roles to include. Returns: The data returned from the API. \"\"\" payload = { \"days\" : str ( days )} if include_roles is not None : payload [ \"include_roles\" ] = \",\" . join ( map ( str , include_roles )) return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /prune\" , guild_id = guild_id ), json = payload )","title":"get_guild_prune_count()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.begin_guild_prune","text":"Makes an API call to begin pruning a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required days int The number of days to count. 7 compute_prune_count bool Whether to compute the prune count. True include_roles Optional[List[int]] The IDs of the roles to include. None Returns: Type Description The data returned from the API. Source code in lefi/http.py async def begin_guild_prune ( self , guild_id : int , * , days : int = 7 , compute_prune_count : bool = True , include_roles : Optional [ List [ int ]] = None , ): \"\"\" Makes an API call to begin pruning a guild. Parameters: guild_id (int): The ID of the guild. days (int): The number of days to count. compute_prune_count (bool): Whether to compute the prune count. include_roles (Optional[List[int]]): The IDs of the roles to include. Returns: The data returned from the API. \"\"\" payload = { \"days\" : str ( days ), \"compute_prune_count\" : compute_prune_count } if include_roles is not None : payload [ \"include_roles\" ] = \",\" . join ( map ( str , include_roles )) await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /prune\" , guild_id = guild_id ), json = payload )","title":"begin_guild_prune()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_voice_regions","text":"Makes an API call to get the voice regions in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_voice_regions ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the voice regions in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /regions\" ), guild_id = guild_id )","title":"get_guild_voice_regions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_invites","text":"Makes an API call to get the invites in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_invites ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the invites in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /invites\" ), guild_id = guild_id )","title":"get_guild_invites()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_integrations","text":"Makes an API call to get the integrations in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_integrations ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the integrations in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /integrations\" ), guild_id = guild_id )","title":"get_guild_integrations()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_integration","text":"Makes an API call to delete an integration in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required integration_id int The ID of the integration. required Source code in lefi/http.py async def delete_guild_integration ( self , guild_id : int , integration_id : int ): \"\"\" Makes an API call to delete an integration in a guild. Parameters: guild_id (int): The ID of the guild. integration_id (int): The ID of the integration. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /integrations/ { integration_id } \" , guild_id = guild_id ), )","title":"delete_guild_integration()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_widget_settings","text":"Makes an API call to get the widget settings in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget_settings ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget settings in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget\" ), guild_id = guild_id )","title":"get_guild_widget_settings()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_widget","text":"Makes an API call to get the widget in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget.json\" ), guild_id = guild_id )","title":"get_guild_widget()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_vanity_url","text":"Makes an API call to get the vanity URL in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_vanity_url ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the vanity URL in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /vanity-url\" ), guild_id = guild_id )","title":"get_guild_vanity_url()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_widget_image","text":"Makes an API call to get the widget image in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required style Optional[str] The style of the image. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget_image ( self , guild_id : int , * , style : Optional [ str ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget image in a guild. Parameters: guild_id (int): The ID of the guild. style (Optional[str]): The style of the image. Returns: The data returned from the API. \"\"\" payload = { \"style\" : style or \"shield\" } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget.png\" , guild_id = guild_id ), json = payload , )","title":"get_guild_widget_image()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_welcome_screen","text":"Makes an API call to get the welcome screen in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_welcome_screen ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the welcome screen in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /welcome-screen\" ), guild_id = guild_id )","title":"get_guild_welcome_screen()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild_welcome_screen","text":"Makes an API call to modify the welcome screen in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required enabled Optional[bool] Whether the welcome screen is enabled. None description Optional[str] The welcome screen description. None welcome_channels Optional[List[int]] The IDs of the welcome channels. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_welcome_screen ( self , guild_id : int , * , enabled : Optional [ bool ] = None , description : Optional [ str ] = None , welcome_channels : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify the welcome screen in a guild. Parameters: guild_id (int): The ID of the guild. enabled (Optional[bool]): Whether the welcome screen is enabled. description (Optional[str]): The welcome screen description. welcome_channels (Optional[List[int]]): The IDs of the welcome channels. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, enabled = enabled , description = description , welcome_channels = welcome_channels , ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /welcome-screen\" , guild_id = guild_id ), json = payload , )","title":"modify_guild_welcome_screen()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_template","text":"Makes an API call to get a guild template. Parameters: Name Type Description Default code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_template ( self , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild template. Parameters: code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/templates/ { code } \" ))","title":"get_guild_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_from_template","text":"Makes an API call to create a guild from a template. Parameters: Name Type Description Default code str The code of the template. required name str The name of the guild. required icon Optional[str] The icon of the guild. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_from_template ( self , code : str , * , name : str , icon : Optional [ bytes ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild from a template. Parameters: code (str): The code of the template. name (str): The name of the guild. icon (Optional[str]): The icon of the guild. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , icon = icon ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( f \"/guilds/templates/ { code } \" ), json = payload )","title":"create_guild_from_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_templates","text":"Makes an API call to get the templates in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_templates ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the templates in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /templates\" , guild_id = guild_id ) )","title":"get_guild_templates()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_template","text":"Makes an API call to create a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required name str The name of the template. required description Optional[str] The description of the template. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_template ( self , guild_id : int , * , name : str , description : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a template for a guild. Parameters: guild_id (int): The ID of the guild. name (str): The name of the template. description (Optional[str]): The description of the template. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description ) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /templates\" , guild_id = guild_id ), json = payload , )","title":"create_guild_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.sync_guild_template","text":"Makes an API call to sync a template for a guild guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def sync_guild_template ( self , guild_id : int , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to sync a template for a guild guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } /sync\" , guild_id = guild_id ), )","title":"sync_guild_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild_template","text":"Makes an API call to modify a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required name Optional[str] The name of the template. None description Optional[str] The description of the template. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_template ( self , guild_id : int , code : str , * , name : Optional [ str ] = None , description : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a template for a guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. name (Optional[str]): The name of the template. description (Optional[str]): The description of the template. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } \" , guild_id = guild_id ), json = payload , )","title":"modify_guild_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_template","text":"Makes an API call to delete a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_guild_template ( self , guild_id : int , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a template for a guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } \" , guild_id = guild_id ) )","title":"delete_guild_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_invite","text":"Makes an API call to get an invite. Parameters: Name Type Description Default code str The code of the invite. required with_counts bool Whether to include the invite counts. False with_expiration bool Whether to include the invite expiration. False Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_invite ( self , code : str , * , with_counts : bool = False , with_expiration : bool = False ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get an invite. Parameters: code (str): The code of the invite. with_counts (bool): Whether to include the invite counts. with_expiration (bool): Whether to include the invite expiration. Returns: The data returned from the API. \"\"\" params = { \"with_counts\" : with_counts , \"with_expiration\" : with_expiration } return await self . request ( \"GET\" , Route ( f \"/invites/ { code } \" ), params = params )","title":"get_invite()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_invite","text":"Makes an API call to delete an invite. Parameters: Name Type Description Default code str The code of the invite. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_invite ( self , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete an invite. Parameters: code (str): The code of the invite. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/invites/ { code } \" ))","title":"delete_invite()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_stage_instance","text":"Makes an API call to create a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required topic str The topic of the stage instance. required privacy_level Optional[int] The privacy level of the stage instance. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_stage_instance ( self , * , channel_id : int , topic : str , privacy_level : Optional [ int ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a stage instance. Parameters: channel_id (int): The ID of the channel. topic (str): The topic of the stage instance. privacy_level (Optional[int]): The privacy level of the stage instance. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, channel_id = channel_id , topic = topic , privacy_level = privacy_level ) return await self . request ( \"POST\" , Route ( \"/stage-instances\" , channel_id = channel_id ), json = payload )","title":"create_stage_instance()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_stage_instance","text":"Makes an API call to get a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_stage_instance ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a stage instance. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/stage-instances/ { channel_id } \" , channel_id = channel_id ) )","title":"get_stage_instance()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_stage_instance","text":"Makes an API call to modify a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required topic Optional[str] The topic of the stage instance. None privacy_level Optional[int] The privacy level of the stage instance. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_stage_instance ( self , channel_id : int , * , topic : Optional [ str ] = None , privacy_level : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a stage instance. Parameters: channel_id (int): The ID of the channel. topic (Optional[str]): The topic of the stage instance. privacy_level (Optional[int]): The privacy level of the stage instance. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, topic = topic , privacy_level = privacy_level ) return await self . request ( \"PATCH\" , Route ( f \"/stage-instances/ { channel_id } \" , channel_id = channel_id ), json = payload , )","title":"modify_stage_instance()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_stage_instance","text":"Makes an API call to delete a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_stage_instance ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a stage instance. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/stage-instances/ { channel_id } \" ), channel_id = channel_id )","title":"delete_stage_instance()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_sticker","text":"Makes an API call to get a sticker. Parameters: Name Type Description Default sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_sticker ( self , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a sticker. Parameters: sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/stickers/ { sticker_id } \" ))","title":"get_sticker()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_nitro_sticker_packs","text":"Makes an API call to list nitro sticker packs. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_nitro_sticker_packs ( self ) -> Dict [ str , Any ]: \"\"\" Makes an API call to list nitro sticker packs. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/sticker-packs\" ))","title":"list_nitro_sticker_packs()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_guild_stickers","text":"Makes an API call to list stickers for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_guild_stickers ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to list stickers for a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /stickers\" , guild_id = guild_id ) )","title":"list_guild_stickers()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_sticker","text":"Makes an API call to get a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_sticker ( self , guild_id : int , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ) )","title":"get_guild_sticker()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild_sticker","text":"Makes an API call to modify a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required name Optional[str] The name of the sticker. None description Optional[str] The description of the sticker. None tags Optional[str] The tags of the sticker. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_sticker ( self , guild_id : int , sticker_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , tags : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. name (Optional[str]): The name of the sticker. description (Optional[str]): The description of the sticker. tags (Optional[str]): The tags of the sticker. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description , tags = tags ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ), json = payload , )","title":"modify_guild_sticker()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_sticker","text":"Makes an API call to delete a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_guild_sticker ( self , guild_id : int , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ), )","title":"delete_guild_sticker()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_current_user","text":"Makes an API call to get the current user. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_current_user ( self ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the current user. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/users/@me\" ))","title":"get_current_user()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_current_user","text":"Makes an API call to modify the current user. Parameters: Name Type Description Default username Optional[str] The username of the user. None avatar Optional[str] The avatar of the user. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_current_user ( self , * , username : Optional [ str ] = None , avatar : Optional [ bytes ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify the current user. Parameters: username (Optional[str]): The username of the user. avatar (Optional[str]): The avatar of the user. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, username = username , avatar = avatar ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) return await self . request ( \"PATCH\" , Route ( \"/users/@me\" ), json = payload )","title":"modify_current_user()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_current_user_guilds","text":"Makes an API call to get the current user's guilds. Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_current_user_guilds ( self ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the current user's guilds. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/users/@me/guilds\" ))","title":"get_current_user_guilds()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.leave_guild","text":"Makes an API call to leave a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Source code in lefi/http.py async def leave_guild ( self , guild_id : int ): \"\"\" Makes an API call to leave a guild. Parameters: guild_id (int): The ID of the guild. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/users/@me/guilds/ { guild_id } \" , guild_id = guild_id ) )","title":"leave_guild()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_dm_channel","text":"Makes an API call which creates a DM channel to a user. Parameters: Name Type Description Default recipient_id int The ID of the user which to open the DM channel to. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_dm_channel ( self , recipient_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which creates a DM channel to a user. Parameters: recipient_id (int): The ID of the user which to open the DM channel to. Returns: The data received from the API after making the call. \"\"\" payload = { \"recipient_id\" : recipient_id } return await self . request ( \"POST\" , Route ( \"/users/@me/channels\" ), json = payload )","title":"create_dm_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_voice_regions","text":"Makes an API call to list voice regions. Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def list_voice_regions ( self ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to list voice regions. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/voice/regions\" ))","title":"list_voice_regions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_webhook","text":"Makes an API call to create a webhook. Parameters: Name Type Description Default channel_id int The ID of the channel to create the webhook in. required name str The name of the webhook. required avatar Optional[bytes] The avatar of the webhook. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_webhook ( self , channel_id : int , * , name : str , avatar : Optional [ bytes ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a webhook. Parameters: channel_id (int): The ID of the channel to create the webhook in. name (str): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. Returns: The data returned from the API. \"\"\" payload = { \"name\" : name , \"avatar\" : bytes_to_data_uri ( avatar ) if avatar else None , } return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /webhooks\" , channel_id = channel_id ), json = payload , )","title":"create_webhook()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_channel_webhooks","text":"Makes an API call to get the webhooks for a channel. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_channel_webhooks ( self , channel_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the webhooks for a channel. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /webhooks\" , channel_id = channel_id ) )","title":"get_channel_webhooks()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_webhooks","text":"Makes an API call to get the webhooks for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_webhooks ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the webhooks for a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /webhooks\" , guild_id = guild_id ) )","title":"get_guild_webhooks()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_webhook","text":"Makes an API call to get a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook ( self , webhook_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook. Parameters: webhook_id (int): The ID of the webhook. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ) )","title":"get_webhook()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_webhook_with_token","text":"Makes an API call to get a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook_with_token ( self , webhook_id : int , webhook_token : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhookd_token = webhook_token , ), )","title":"get_webhook_with_token()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_webhook","text":"Makes an API call to modify a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required name Optional[str] The name of the webhook. None avatar Optional[bytes] The avatar of the webhook. None channel_id Optional[int] The ID of the channel to move the webhook to. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_webhook ( self , webhook_id : int , * , name : Optional [ str ] = None , avatar : Optional [ bytes ] = None , channel_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a webhook. Parameters: webhook_id (int): The ID of the webhook. name (Optional[str]): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. channel_id (Optional[int]): The ID of the channel to move the webhook to. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , avatar = avatar , channel_id = channel_id ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ), json = payload , )","title":"modify_webhook()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_webhook_with_token","text":"Makes an API call to modify a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required name Optional[str] The name of the webhook. None avatar Optional[bytes] The avatar of the webhook. None Source code in lefi/http.py async def modify_webhook_with_token ( self , webhook_id : int , webhook_token : str , * , name : Optional [ str ] = None , avatar : Optional [ bytes ] = None , ): \"\"\" Makes an API call to modify a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. name (Optional[str]): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. \"\"\" payload = update_payload ( {}, name = name , avatar = avatar , ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , )","title":"modify_webhook_with_token()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_webhook","text":"Makes an API call to delete a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required Source code in lefi/http.py async def delete_webhook ( self , webhook_id : int ) -> None : \"\"\" Makes an API call to delete a webhook. Parameters: webhook_id (int): The ID of the webhook. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ) )","title":"delete_webhook()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_webhook_with_token","text":"Makes an API call to delete a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required Source code in lefi/http.py async def delete_webhook_with_token ( self , webhook_id : int , webhook_token : str ) -> None : \"\"\" Makes an API call to delete a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), )","title":"delete_webhook_with_token()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.execute_webhook","text":"Makes an API call to execute a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required content Optional[str] The content of the message. None username Optional[str] The username of the webhook. None avatar_url Optional[str] The avatar url of the webhook. None tts Optional[bool] Whether the message should be TTS. None file Optional[io.BufferedIOBase] The file to upload. None embeds Optional[List[Dict[str, Any]]] The embeds to send. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions. None componenets Optional[List[Dict[str, Any]]] The components to send. None wait Optional[bool] Whether to wait for server confirmation before response. None thread_id Optional[int] The ID of the thread to post to. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def execute_webhook ( self , webhook_id : int , webhook_token : str , * , content : Optional [ str ] = None , username : Optional [ str ] = None , avatar_url : Optional [ str ] = None , tts : Optional [ bool ] = None , file : Optional [ io . BufferedIOBase ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , wait : Optional [ bool ] = None , thread_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to execute a webhook. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. content (Optional[str]): The content of the message. username (Optional[str]): The username of the webhook. avatar_url (Optional[str]): The avatar url of the webhook. tts (Optional[bool]): Whether the message should be TTS. file (Optional[io.BufferedIOBase]): The file to upload. embeds (Optional[List[Dict[str, Any]]]): The embeds to send. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions. componenets (Optional[List[Dict[str, Any]]]): The components to send. wait (Optional[bool]): Whether to wait for server confirmation before response. thread_id (Optional[int]): The ID of the thread to post to. Returns: The data returned from the API. \"\"\" form = [] payload = update_payload ( {}, content = content , username = username , avatar_url = avatar_url , tts = tts , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , ) params = update_payload ({}, wait = wait , thread_id = thread_id ) if file : form . append ( { \"name\" : \"file\" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) return await self . request ( \"POST\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , form = form , params = params , )","title":"execute_webhook()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_webhook_message","text":"Makes an API call to get a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), )","title":"get_webhook_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_webhook_message","text":"Makes an API call to edit a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required content Optional[str] The content of the message. None embeds Optional[List[Dict[str, Any]]] The embeds to send. None file Optional[io.BufferedIOBase] The file to upload. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions. None componenets Optional[List[Dict[str, Any]]] The components to send. None attachments Optional[List[Dict[str, Any]]] The attachments to send. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ io . BufferedIOBase ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. content (Optional[str]): The content of the message. embeds (Optional[List[Dict[str, Any]]]): The embeds to send. file (Optional[io.BufferedIOBase]): The file to upload. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions. componenets (Optional[List[Dict[str, Any]]]): The components to send. attachments (Optional[List[Dict[str, Any]]]): The attachments to send. Returns: The data returned from the API. \"\"\" form = [] payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) if file : form . append ( { \"name\" : \"file\" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , form = form , )","title":"edit_webhook_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_webhook_message","text":"Makes an API call to delete a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int ): \"\"\" Makes an API call to delete a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), )","title":"delete_webhook_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_global_application_commands","text":"Makes an API call to get global application commands. Parameters: Name Type Description Default application_id int The ID of the application. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_global_application_commands ( self , application_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get global application commands. Parameters: application_id (int): The ID of the application. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /commands\" ) )","title":"get_global_application_commands()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_global_application_command","text":"Makes an API call to create a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required name str The name of the command. required description str The description of the command. required options Optional[List[Dict[str, Any]]] The options of the command. None default_permission bool Whether the command is enabled by default. True type int The type of the command. 1 Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_global_application_command ( self , application_id : int , * , name : str , description : str , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : bool = True , type : int = 1 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a global application command. Parameters: application_id (int): The ID of the application. name (str): The name of the command. description (str): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (bool): Whether the command is enabled by default. type (int): The type of the command. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , type = type , ) return await self . request ( \"POST\" , Route ( f \"/applications/ { application_id } /commands\" ), json = payload )","title":"create_global_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_global_application_command","text":"Makes an API call to get a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_global_application_command ( self , application_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ) )","title":"get_global_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_global_application_command","text":"Makes an API call to edit a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required name Optional[str] The name of the command. None description Optional[str] The description of the command. None options Optional[List[Dict[str, Any]]] The options of the command. None default_permission Optional[bool] Whether the command is enabled by default. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_global_application_command ( self , application_id : int , command_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. name (Optional[str]): The name of the command. description (Optional[str]): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (Optional[bool]): Whether the command is enabled by default. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , ) return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ), json = payload , )","title":"edit_global_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_global_application_command","text":"Makes an API call to delete a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required Source code in lefi/http.py async def delete_global_application_command ( self , application_id : int , command_id : int ) -> None : \"\"\" Makes an API call to delete a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ) )","title":"delete_global_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.bulk_overwrite_global_application_commands","text":"Makes an API call to bulk overwrite global application commands. Parameters: Name Type Description Default application_id int The ID of the application. required commands List[Dict[str, Any]] The commands to overwrite. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def bulk_overwrite_global_application_commands ( self , application_id : int , * , commands : List [ Dict [ str , Any ]] ) -> Dict [ str , Any ]: \"\"\" Makes an API call to bulk overwrite global application commands. Parameters: application_id (int): The ID of the application. commands (List[Dict[str, Any]]): The commands to overwrite. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/applications/ { application_id } /commands\" ), json = commands )","title":"bulk_overwrite_global_application_commands()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_application_commands","text":"Makes an API call to get guild application commands. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_application_commands ( self , application_id : int , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get guild application commands. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), )","title":"get_guild_application_commands()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_application_command","text":"Makes an API call to create a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required name str The name of the command. required description str The description of the command. required options Optional[List[Dict[str, Any]]] The options of the command. None default_permission bool Whether the command is enabled by default. True type int The type of the command. 1 Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_application_command ( self , application_id : int , guild_id : int , * , name : str , description : str , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : bool = True , type : int = 1 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild application command. Parameters: application_id (int): The ID of the application. name (str): The name of the command. description (str): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (bool): Whether the command is enabled by default. type (int): The type of the command. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , type = type , ) return await self . request ( \"POST\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), json = payload , )","title":"create_guild_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_application_command","text":"Makes an API call to get a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_application_command ( self , application_id : int , guild_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), )","title":"get_guild_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_guild_application_command","text":"Makes an API call to edit a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required name Optional[str] The name of the command. None description Optional[str] The description of the command. None options Optional[List[Dict[str, Any]]] The options of the command. None default_permission Optional[bool] Whether the command is enabled by default. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_guild_application_command ( self , application_id : int , guild_id : int , command_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. name (Optional[str]): The name of the command. description (Optional[str]): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (Optional[bool]): Whether the command is enabled by default. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , ) return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), json = payload , )","title":"edit_guild_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_application_command","text":"Makes an API call to delete a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Source code in lefi/http.py async def delete_guild_application_command ( self , application_id : int , guild_id : int , command_id : int ): \"\"\" Makes an API call to delete a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), )","title":"delete_guild_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.bulk_overwrite_guild_application_commands","text":"Makes an API call to bulk overwrite guild application commands. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required commands List[Dict[str, Any]] The commands to overwrite. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def bulk_overwrite_guild_application_commands ( self , application_id : int , guild_id : int , * , commands : List [ Dict [ str , Any ]] ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to bulk overwrite guild application commands. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. commands (List[Dict[str, Any]]): The commands to overwrite. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), json = commands , )","title":"bulk_overwrite_guild_application_commands()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_application_command_permissions","text":"Makes an API call to get guild application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_application_command_permissions ( self , application_id : int , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get guild application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/permissions\" , guild_id = guild_id , ), )","title":"get_guild_application_command_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_application_command_permissions","text":"Makes an API call to get application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_application_command_permissions ( self , application_id : int , guild_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } /permissions\" , guild_id = guild_id , ), )","title":"get_application_command_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_application_command_permissions","text":"Makes an API call to edit application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required permissions List[Dict[str, Any]] The permissions to edit. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def edit_application_command_permissions ( self , application_id : int , guild_id : int , command_id : int , * , permissions : List [ Dict [ str , Any ]], ): \"\"\" Makes an API call to edit application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. permissions (List[Dict[str, Any]]): The permissions to edit. Returns: The data returned from the API. \"\"\" payload = { \"permissions\" : permissions } return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } /permissions\" , guild_id = guild_id , ), json = payload , )","title":"edit_application_command_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.batch_edit_application_command_permissions","text":"Makes an API call to batch edit application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required permissions List[Dict[str, Any]] The permissions to edit. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def batch_edit_application_command_permissions ( self , application_id : int , guild_id : int , * , permissions : List [ Dict [ str , Any ]] ): \"\"\" Makes an API call to batch edit application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. permissions (List[Dict[str, Any]]): The permissions to edit. Returns: The data returned from the API. \"\"\" return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/permissions\" , guild_id = guild_id , ), json = permissions , )","title":"batch_edit_application_command_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_interaction_response","text":"Makes an API call to create an interaction response. Parameters: Name Type Description Default interaction_id int The ID of the interaction. required interaction_token str The token of the interaction. required type int The type of the response. required data Optional[Dict[str, Any]] The data of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_interaction_response ( self , interaction_id : int , interaction_token : str , * , type : int , data : Optional [ Dict [ str , Any ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an interaction response. Parameters: interaction_id (int): The ID of the interaction. interaction_token (str): The token of the interaction. type (int): The type of the response. data (Optional[Dict[str, Any]]): The data of the response. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, type = type , data = data ) return await self . request ( \"POST\" , Route ( f \"/interactions/ { interaction_id } / { interaction_token } /callback\" ), json = payload , )","title":"create_interaction_response()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_original_interaction_response","text":"Makes an API call to get the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_original_interaction_response ( self , application_id : int , interaction_token : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), )","title":"get_original_interaction_response()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_original_interaction_response","text":"Makes an API call to edit the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[io.BufferedIOBase] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_original_interaction_response ( self , application_id : int , interaction_token : str , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ io . BufferedIOBase ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[io.BufferedIOBase]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. Returns: The data returned from the API. \"\"\" form = [] payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) if file : form . append ( { \"name\" : \"file\" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), json = payload , form = form , )","title":"edit_original_interaction_response()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_original_interaction_response","text":"Makes an API call to delete the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_original_interaction_response ( self , application_id : int , interaction_token : str ): \"\"\" Makes an API call to delete the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. Returns: The data returned from the API. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), )","title":"delete_original_interaction_response()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_followup_message","text":"Makes an API call to create a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[io.BufferedIOBase] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None flags Optional[int] The flags of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_followup_message ( self , application_id : int , interaction_token : str , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ io . BufferedIOBase ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , flags : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[io.BufferedIOBase]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. flags (Optional[int]): The flags of the response. Returns: The data returned from the API. \"\"\" form = [] payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , flags = flags , ) if file : form . append ( { \"name\" : \"file\" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) return await self . request ( \"POST\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages\" ), json = payload , form = form , )","title":"create_followup_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_followup_message","text":"Makes an API call to get a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_followup_message ( self , application_id : int , interaction_token : str , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), )","title":"get_followup_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_followup_message","text":"Makes an API call to edit a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[io.BufferedIOBase] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_followup_message ( self , application_id : int , interaction_token : str , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ io . BufferedIOBase ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[io.BufferedIOBase]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. Returns: The data returned from the API. \"\"\" form = [] payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) if file : form . append ( { \"name\" : \"file\" , \"value\" : file , \"filename\" : getattr ( file , \"name\" , None ), \"content_type\" : \"application/octect-stream\" , } ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), json = payload , form = form , )","title":"edit_followup_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_followup_message","text":"Makes an API call to delete a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required Source code in lefi/http.py async def delete_followup_message ( self , application_id : int , interaction_token : str , message_id : int ): \"\"\" Makes an API call to delete a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), )","title":"delete_followup_message()"},{"location":"API-Reference/member/","text":"Represents a member of a guild. Attributes: Name Type Description guild lefi.Guild The lefi.Guild instance which the member belongs to. nick : Optional [ str ] property readonly The nickname of of member. roles : List [ Role ] property readonly The roles of the member. joined_at : datetime . datetime property readonly A datetime.datetime instance representing when the member joined the guild. premium_since : Optional [ datetime . datetime ] property readonly How long the member has been a premium. deaf : bool property readonly Whether or not the member is deafend. mute : bool property readonly Whether or not the member is muted. permissions : Permissions property readonly The permissions of the member. add_role ( self , role ) async Adds a role to the member. Parameters: Name Type Description Default role lefi.Role The role to add. required Source code in lefi/objects/member.py async def add_role ( self , role : Role ) -> Member : \"\"\" Adds a role to the member. Parameters: role (lefi.Role): The role to add. \"\"\" await self . _state . http . add_guild_member_role ( self . guild . id , self . id , role . id ) self . _roles [ role . id ] = role return self remove_role ( self , role ) async Removes a role from the member. Parameters: Name Type Description Default role lefi.Role The role to remove. required Source code in lefi/objects/member.py async def remove_role ( self , role : Role ) -> Member : \"\"\" Removes a role from the member. Parameters: role (lefi.Role): The role to remove. \"\"\" await self . _state . http . remove_guild_member_role ( self . guild . id , self . id , role . id ) self . _roles . pop ( role . id , None ) return self edit ( self , * , nick = None , roles = None , mute = None , deaf = None , channel = None ) async Edits the member. Parameters: Name Type Description Default a dict The attributes to edit. required Source code in lefi/objects/member.py async def edit ( self , * , nick : Optional [ str ] = None , roles : Optional [ List [ Role ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , channel : Optional [ VoiceChannel ] = None ) -> Member : \"\"\" Edits the member. Parameters: a (dict): The attributes to edit. \"\"\" channel_id = channel . id if channel else None roles = roles or [] data = await self . _state . http . edit_guild_member ( guild_id = self . guild . id , member_id = self . id , nick = nick , roles = [ role . id for role in roles ], mute = mute , deaf = deaf , channel_id = channel_id , ) self . _member = data return self kick ( self ) async Kicks the member from the guild. Source code in lefi/objects/member.py async def kick ( self ) -> None : \"\"\" Kicks the member from the guild. \"\"\" await self . guild . kick ( self ) ban ( self , * , delete_message_days = 0 ) async Bans the member from the guild. Parameters: Name Type Description Default delete_message_days int The number of days to delete messages for. 0 Source code in lefi/objects/member.py async def ban ( self , * , delete_message_days : int = 0 ) -> None : \"\"\" Bans the member from the guild. Parameters: delete_message_days (int): The number of days to delete messages for. \"\"\" await self . guild . ban ( self , delete_message_days = delete_message_days ) unban ( self ) async Unbans the member from the guild. Source code in lefi/objects/member.py async def unban ( self ) -> None : \"\"\" Unbans the member from the guild. \"\"\" await self . guild . unban ( self )","title":"Member"},{"location":"API-Reference/member/#lefi.objects.member.Member.nick","text":"The nickname of of member.","title":"nick"},{"location":"API-Reference/member/#lefi.objects.member.Member.roles","text":"The roles of the member.","title":"roles"},{"location":"API-Reference/member/#lefi.objects.member.Member.joined_at","text":"A datetime.datetime instance representing when the member joined the guild.","title":"joined_at"},{"location":"API-Reference/member/#lefi.objects.member.Member.premium_since","text":"How long the member has been a premium.","title":"premium_since"},{"location":"API-Reference/member/#lefi.objects.member.Member.deaf","text":"Whether or not the member is deafend.","title":"deaf"},{"location":"API-Reference/member/#lefi.objects.member.Member.mute","text":"Whether or not the member is muted.","title":"mute"},{"location":"API-Reference/member/#lefi.objects.member.Member.permissions","text":"The permissions of the member.","title":"permissions"},{"location":"API-Reference/member/#lefi.objects.member.Member.add_role","text":"Adds a role to the member. Parameters: Name Type Description Default role lefi.Role The role to add. required Source code in lefi/objects/member.py async def add_role ( self , role : Role ) -> Member : \"\"\" Adds a role to the member. Parameters: role (lefi.Role): The role to add. \"\"\" await self . _state . http . add_guild_member_role ( self . guild . id , self . id , role . id ) self . _roles [ role . id ] = role return self","title":"add_role()"},{"location":"API-Reference/member/#lefi.objects.member.Member.remove_role","text":"Removes a role from the member. Parameters: Name Type Description Default role lefi.Role The role to remove. required Source code in lefi/objects/member.py async def remove_role ( self , role : Role ) -> Member : \"\"\" Removes a role from the member. Parameters: role (lefi.Role): The role to remove. \"\"\" await self . _state . http . remove_guild_member_role ( self . guild . id , self . id , role . id ) self . _roles . pop ( role . id , None ) return self","title":"remove_role()"},{"location":"API-Reference/member/#lefi.objects.member.Member.edit","text":"Edits the member. Parameters: Name Type Description Default a dict The attributes to edit. required Source code in lefi/objects/member.py async def edit ( self , * , nick : Optional [ str ] = None , roles : Optional [ List [ Role ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , channel : Optional [ VoiceChannel ] = None ) -> Member : \"\"\" Edits the member. Parameters: a (dict): The attributes to edit. \"\"\" channel_id = channel . id if channel else None roles = roles or [] data = await self . _state . http . edit_guild_member ( guild_id = self . guild . id , member_id = self . id , nick = nick , roles = [ role . id for role in roles ], mute = mute , deaf = deaf , channel_id = channel_id , ) self . _member = data return self","title":"edit()"},{"location":"API-Reference/member/#lefi.objects.member.Member.kick","text":"Kicks the member from the guild. Source code in lefi/objects/member.py async def kick ( self ) -> None : \"\"\" Kicks the member from the guild. \"\"\" await self . guild . kick ( self )","title":"kick()"},{"location":"API-Reference/member/#lefi.objects.member.Member.ban","text":"Bans the member from the guild. Parameters: Name Type Description Default delete_message_days int The number of days to delete messages for. 0 Source code in lefi/objects/member.py async def ban ( self , * , delete_message_days : int = 0 ) -> None : \"\"\" Bans the member from the guild. Parameters: delete_message_days (int): The number of days to delete messages for. \"\"\" await self . guild . ban ( self , delete_message_days = delete_message_days )","title":"ban()"},{"location":"API-Reference/member/#lefi.objects.member.Member.unban","text":"Unbans the member from the guild. Source code in lefi/objects/member.py async def unban ( self ) -> None : \"\"\" Unbans the member from the guild. \"\"\" await self . guild . unban ( self )","title":"unban()"},{"location":"API-Reference/message/","text":"Represents a message. id : int property readonly The ID of the message. channel : Channels property readonly The lefi.Channel which the message is in. guild : Optional [ Guild ] property readonly The lefi.Guild which the message is in. content : str property readonly The content of the message. author : Union [ User , Member ] property readonly The author of the message. edit ( self , ** kwargs ) async Edits the message. Parameters: Name Type Description Default **kwargs Any The options to pass to lefi.HTTPClient.edit_message {} Returns: Type Description Message The message after being editted. Source code in lefi/objects/message.py async def edit ( self , ** kwargs ) -> Message : \"\"\" Edits the message. Parameters: **kwargs (Any): The options to pass to [lefi.HTTPClient.edit_message][] Returns: The message after being editted. \"\"\" data = await self . _state . http . edit_message ( ** kwargs ) self . _data = data return self crosspost ( self ) async Crossposts the message. Returns: Type Description Message The message being crossposted. Source code in lefi/objects/message.py async def crosspost ( self ) -> Message : \"\"\" Crossposts the message. Returns: The message being crossposted. \"\"\" data = await self . _state . http . crosspost_message ( self . channel . id , self . id ) return self . _state . create_message ( data , self . channel ) add_reaction ( self , reaction ) async Adds a reaction to the message. Parameters: Name Type Description Default reaction str The reaction to add. required Source code in lefi/objects/message.py async def add_reaction ( self , reaction : str ) -> None : \"\"\" Adds a reaction to the message. Parameters: reaction (str): The reaction to add. \"\"\" await self . _state . http . create_reaction ( channel_id = self . channel . id , message_id = self . id , emoji = reaction ) remove_reaction ( self , reaction , user = None ) async Removes a reaction from the message. Parameters: Name Type Description Default reaction str The reaction to remove. required user Optional[Snowflake] The user to remove the reaction from. None Source code in lefi/objects/message.py async def remove_reaction ( self , reaction : str , user : Optional [ Snowflake ] = None ) -> None : \"\"\" Removes a reaction from the message. Parameters: reaction (str): The reaction to remove. user (Optional[Snowflake]): The user to remove the reaction from. \"\"\" await self . _state . http . delete_reaction ( channel_id = self . channel . id , message_id = self . id , emoji = reaction , user_id = user . id if user is not None else user , ) delete ( self ) async Deletes the message. Source code in lefi/objects/message.py async def delete ( self ) -> None : \"\"\" Deletes the message. \"\"\" await self . _state . http . delete_message ( self . channel . id , self . id ) self . _state . _messages . pop ( self . id , None )","title":"Message"},{"location":"API-Reference/message/#lefi.objects.message.Message.id","text":"The ID of the message.","title":"id"},{"location":"API-Reference/message/#lefi.objects.message.Message.channel","text":"The lefi.Channel which the message is in.","title":"channel"},{"location":"API-Reference/message/#lefi.objects.message.Message.guild","text":"The lefi.Guild which the message is in.","title":"guild"},{"location":"API-Reference/message/#lefi.objects.message.Message.content","text":"The content of the message.","title":"content"},{"location":"API-Reference/message/#lefi.objects.message.Message.author","text":"The author of the message.","title":"author"},{"location":"API-Reference/message/#lefi.objects.message.Message.edit","text":"Edits the message. Parameters: Name Type Description Default **kwargs Any The options to pass to lefi.HTTPClient.edit_message {} Returns: Type Description Message The message after being editted. Source code in lefi/objects/message.py async def edit ( self , ** kwargs ) -> Message : \"\"\" Edits the message. Parameters: **kwargs (Any): The options to pass to [lefi.HTTPClient.edit_message][] Returns: The message after being editted. \"\"\" data = await self . _state . http . edit_message ( ** kwargs ) self . _data = data return self","title":"edit()"},{"location":"API-Reference/message/#lefi.objects.message.Message.crosspost","text":"Crossposts the message. Returns: Type Description Message The message being crossposted. Source code in lefi/objects/message.py async def crosspost ( self ) -> Message : \"\"\" Crossposts the message. Returns: The message being crossposted. \"\"\" data = await self . _state . http . crosspost_message ( self . channel . id , self . id ) return self . _state . create_message ( data , self . channel )","title":"crosspost()"},{"location":"API-Reference/message/#lefi.objects.message.Message.add_reaction","text":"Adds a reaction to the message. Parameters: Name Type Description Default reaction str The reaction to add. required Source code in lefi/objects/message.py async def add_reaction ( self , reaction : str ) -> None : \"\"\" Adds a reaction to the message. Parameters: reaction (str): The reaction to add. \"\"\" await self . _state . http . create_reaction ( channel_id = self . channel . id , message_id = self . id , emoji = reaction )","title":"add_reaction()"},{"location":"API-Reference/message/#lefi.objects.message.Message.remove_reaction","text":"Removes a reaction from the message. Parameters: Name Type Description Default reaction str The reaction to remove. required user Optional[Snowflake] The user to remove the reaction from. None Source code in lefi/objects/message.py async def remove_reaction ( self , reaction : str , user : Optional [ Snowflake ] = None ) -> None : \"\"\" Removes a reaction from the message. Parameters: reaction (str): The reaction to remove. user (Optional[Snowflake]): The user to remove the reaction from. \"\"\" await self . _state . http . delete_reaction ( channel_id = self . channel . id , message_id = self . id , emoji = reaction , user_id = user . id if user is not None else user , )","title":"remove_reaction()"},{"location":"API-Reference/message/#lefi.objects.message.Message.delete","text":"Deletes the message. Source code in lefi/objects/message.py async def delete ( self ) -> None : \"\"\" Deletes the message. \"\"\" await self . _state . http . delete_message ( self . channel . id , self . id ) self . _state . _messages . pop ( self . id , None )","title":"delete()"},{"location":"API-Reference/overwrite/","text":"Represents an overwrite. id : int property readonly The ID of the overwrite. type : OverwriteType property readonly The type of the overwrite. allow : Permissions property readonly Value of all allowed permissions. deny : Permissions property readonly Value of all denied permissions.","title":"Overwrite"},{"location":"API-Reference/overwrite/#lefi.objects.permissions.Overwrite.id","text":"The ID of the overwrite.","title":"id"},{"location":"API-Reference/overwrite/#lefi.objects.permissions.Overwrite.type","text":"The type of the overwrite.","title":"type"},{"location":"API-Reference/overwrite/#lefi.objects.permissions.Overwrite.allow","text":"Value of all allowed permissions.","title":"allow"},{"location":"API-Reference/overwrite/#lefi.objects.permissions.Overwrite.deny","text":"Value of all denied permissions.","title":"deny"},{"location":"API-Reference/role/","text":"Represents a role. guild : Guild property readonly The lefi.Guild instance which the role belongs to. id : int property readonly The ID of the role. name : str property readonly The name of the role. color : int property readonly The color of the role. hoist : bool property readonly Whether or not the role is hoisted. position : int property readonly The position of the role. permissions : Permissions property readonly The permissions of the role. managed : bool property readonly Whether or not the role is managed. mentionable : bool property readonly Whether or not the role is mentionable. __init__ ( self , state , data , guild ) special Initialize self. See help(type(self)) for accurate signature. Source code in lefi/objects/role.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : self . _state = state self . _data = data self . _guild = guild delete ( self ) async Deletes the role from its guild. Source code in lefi/objects/role.py async def delete ( self ) -> None : \"\"\" Deletes the role from its guild. \"\"\" await self . _state . http . delete_guild_role ( self . guild . id , self . id ) edit ( self , * , name = None , permissions = None , color = None , hoist = None , mentionable = None ) async Edits the role. Parameters: Name Type Description Default name Optional[str] The new name of the role. None permissions Optional[Permissions] The new permissions of the role. None color Optional[int] The new color of the role. None hoist Optional[bool] Whether or not to hoist the role. None mentionable Optional[bool] Whether or not the role is mentionable. None Returns: Type Description Role The role after editting. Source code in lefi/objects/role.py async def edit ( self , * , name : Optional [ str ] = None , permissions : Optional [ Permissions ] = None , color : Optional [ int ] = None , hoist : Optional [ bool ] = None , mentionable : Optional [ bool ] = None ) -> Role : \"\"\" Edits the role. Parameters: name (Optional[str]): The new name of the role. permissions (Optional[Permissions]): The new permissions of the role. color (Optional[int]): The new color of the role. hoist (Optional[bool]): Whether or not to hoist the role. mentionable (Optional[bool]): Whether or not the role is mentionable. Returns: The role after editting. \"\"\" data = await self . _state . http . modify_guild_role ( guild_id = self . guild . id , role_id = self . id , name = name , permissions = permissions . value if permissions else None , color = color , hoist = hoist , mentionable = mentionable , ) self . _data = data return self","title":"Role"},{"location":"API-Reference/role/#lefi.objects.role.Role.guild","text":"The lefi.Guild instance which the role belongs to.","title":"guild"},{"location":"API-Reference/role/#lefi.objects.role.Role.id","text":"The ID of the role.","title":"id"},{"location":"API-Reference/role/#lefi.objects.role.Role.name","text":"The name of the role.","title":"name"},{"location":"API-Reference/role/#lefi.objects.role.Role.color","text":"The color of the role.","title":"color"},{"location":"API-Reference/role/#lefi.objects.role.Role.hoist","text":"Whether or not the role is hoisted.","title":"hoist"},{"location":"API-Reference/role/#lefi.objects.role.Role.position","text":"The position of the role.","title":"position"},{"location":"API-Reference/role/#lefi.objects.role.Role.permissions","text":"The permissions of the role.","title":"permissions"},{"location":"API-Reference/role/#lefi.objects.role.Role.managed","text":"Whether or not the role is managed.","title":"managed"},{"location":"API-Reference/role/#lefi.objects.role.Role.mentionable","text":"Whether or not the role is mentionable.","title":"mentionable"},{"location":"API-Reference/role/#lefi.objects.role.Role.__init__","text":"Initialize self. See help(type(self)) for accurate signature. Source code in lefi/objects/role.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : self . _state = state self . _data = data self . _guild = guild","title":"__init__()"},{"location":"API-Reference/role/#lefi.objects.role.Role.delete","text":"Deletes the role from its guild. Source code in lefi/objects/role.py async def delete ( self ) -> None : \"\"\" Deletes the role from its guild. \"\"\" await self . _state . http . delete_guild_role ( self . guild . id , self . id )","title":"delete()"},{"location":"API-Reference/role/#lefi.objects.role.Role.edit","text":"Edits the role. Parameters: Name Type Description Default name Optional[str] The new name of the role. None permissions Optional[Permissions] The new permissions of the role. None color Optional[int] The new color of the role. None hoist Optional[bool] Whether or not to hoist the role. None mentionable Optional[bool] Whether or not the role is mentionable. None Returns: Type Description Role The role after editting. Source code in lefi/objects/role.py async def edit ( self , * , name : Optional [ str ] = None , permissions : Optional [ Permissions ] = None , color : Optional [ int ] = None , hoist : Optional [ bool ] = None , mentionable : Optional [ bool ] = None ) -> Role : \"\"\" Edits the role. Parameters: name (Optional[str]): The new name of the role. permissions (Optional[Permissions]): The new permissions of the role. color (Optional[int]): The new color of the role. hoist (Optional[bool]): Whether or not to hoist the role. mentionable (Optional[bool]): Whether or not the role is mentionable. Returns: The role after editting. \"\"\" data = await self . _state . http . modify_guild_role ( guild_id = self . guild . id , role_id = self . id , name = name , permissions = permissions . value if permissions else None , color = color , hoist = hoist , mentionable = mentionable , ) self . _data = data return self","title":"edit()"},{"location":"API-Reference/state/","text":"A class which represents the connection state between the client and discord. Attributes: Name Type Description client lefi.Client The lefi.Client instance being used. loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop being used. http lefi.HTTPClient The lefi.HTTPClient handling requests Danger This class is used internally. It is not meant to called directly __init__ ( self , client , loop ) special Parameters: Name Type Description Default client lefi.Client The client being used. required loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop being used. required Source code in lefi/state.py def __init__ ( self , client : Client , loop : asyncio . AbstractEventLoop ): \"\"\" Parameters: client (lefi.Client): The client being used. loop (asyncio.AbstractEventLoop): The [asyncio.AbstractEventLoop][] being used. \"\"\" self . client = client self . loop = loop self . http = client . http self . _messages = Cache [ Message ]( 1000 ) self . _users = Cache [ User ]() self . _guilds = Cache [ Guild ]() self . _channels = Cache [ Union [ TextChannel , DMChannel , VoiceChannel , CategoryChannel , Channel ] ]() self . _emojis = Cache [ Emoji ]() dispatch ( self , event , * payload ) Dispatches data to callbacks registered to events after parsing is finished. Parameters: Name Type Description Default event str The name of the event to dispatch to. required *payload Any The data after parsing is finished. () Source code in lefi/state.py def dispatch ( self , event : str , * payload : Any ) -> None : \"\"\" Dispatches data to callbacks registered to events after parsing is finished. Parameters: event (str): The name of the event to dispatch to. *payload (Any): The data after parsing is finished. \"\"\" events : dict = self . client . events . get ( event , {}) futures = self . client . futures . get ( event , []) if callbacks := self . client . once_events . get ( event ): for index , callback in enumerate ( callbacks ): self . loop . create_task ( callback ( * payload )) callbacks . pop ( index ) return for future , check in futures : if check ( * payload ): future . set_result ( * payload ) futures . remove (( future , check )) break for callback in events . values (): self . loop . create_task ( callback ( * payload )) parse_ready ( self , data ) async Parses the READY event. Creates a User then dispatches it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_ready ( self , data : Dict ) -> None : \"\"\" Parses the `READY` event. Creates a User then dispatches it afterwards. Parameters: data (Dict): The raw data. \"\"\" user = User ( self , data [ \"user\" ]) self . dispatch ( \"ready\" , user ) parse_guild_create ( self , data ) async Parses GUILD_CREATE event. Creates a Guild then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_guild_create ( self , data : Dict ) -> None : \"\"\" Parses `GUILD_CREATE` event. Creates a Guild then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" guild = Guild ( self , data ) self . create_guild_channels ( guild , data ) self . create_guild_roles ( guild , data ) self . create_guild_members ( guild , data ) self . _guilds [ guild . id ] = guild self . dispatch ( \"guild_create\" , guild ) parse_message_create ( self , data ) async Parses MESSAGE_CREATE event. Creates a Message then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_create ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_CREATE` event. Creates a Message then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" self . add_user ( data [ \"author\" ]) channel = self . _channels . get ( int ( data [ \"channel_id\" ])) message = Message ( self , data , channel ) # type: ignore self . _messages [ message . id ] = message self . dispatch ( \"message_create\" , message ) parse_message_delete ( self , data ) async Parses MESSAGE_DELETE event. Retrieves the message from cache if possible. Else it dispatches a DeletedMessage . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_delete ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_DELETE` event. Retrieves the message from cache if possible. Else it dispatches a `DeletedMessage`. Parameters: data (Dict): The raw data. \"\"\" deleted = DeletedMessage ( data ) message = self . _messages . get ( deleted . id ) if message : self . _messages . pop ( message . id ) else : message = deleted # type: ignore self . dispatch ( \"message_delete\" , message ) parse_message_update ( self , data ) async Parses MESSAGE_UPDATE event. Dispatches before and after . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_update ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_UPDATE` event. Dispatches `before` and `after`. Parameters: data (Dict): The raw data. \"\"\" channel = self . get_channel ( int ( data [ \"channel_id\" ])) if not channel : return after = self . create_message ( data , channel ) if not ( before := self . get_message ( after . id )): msg = await self . http . get_channel_message ( channel . id , after . id ) # type: ignore before = self . create_message ( msg , channel ) else : self . _messages . pop ( before . id ) self . _messages [ after . id ] = after self . dispatch ( \"message_update\" , before , after ) parse_channel_create ( self , data ) async Parses CHANNEL_CREATE event. Creates a Channel then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_create ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_CREATE` event. Creates a Channel then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" if guild_id := data . get ( \"guild_id\" ): guild = self . get_guild ( int ( guild_id )) channel = self . create_channel ( data , guild ) else : channel = self . create_channel ( data ) self . _channels [ channel . id ] = channel self . dispatch ( \"channel_create\" , channel ) parse_channel_update ( self , data ) async Parses CHANNEL_UPDATE event. Dispatches before and after . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_update ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_UPDATE` event. Dispatches `before` and `after`. Parameters: data (Dict): The raw data. \"\"\" guild = self . get_guild ( int ( data [ \"guild_id\" ])) before = self . get_channel ( int ( data [ \"id\" ])) after = self . create_channel ( data , guild ) self . _channels [ after . id ] = after self . dispatch ( \"channel_update\" , before , after ) parse_channel_delete ( self , data ) async Parses CHANNEL_DELETE event. Dispatches the deleted channel. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_delete ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_DELETE` event. Dispatches the deleted channel. Parameters: data (Dict): The raw data. \"\"\" channel = self . get_channel ( int ( data [ \"id\" ])) self . _channels . pop ( channel . id ) # type: ignore self . dispatch ( \"channel_delete\" , channel ) get_message ( self , message_id ) Grabs a message from the cache. Parameters: Name Type Description Default message_id int The ID of the message. required Returns: Type Description Optional[Message] The lefi.Message insance corresponding to the ID if found. Source code in lefi/state.py def get_message ( self , message_id : int ) -> Optional [ Message ]: \"\"\" Grabs a message from the cache. Parameters: message_id (int): The ID of the message. Returns: The [lefi.Message][] insance corresponding to the ID if found. \"\"\" return self . _messages . get ( message_id ) get_user ( self , user_id ) Grabs a user from the cache. Parameters: Name Type Description Default user_id int The ID of the user. required Returns: Type Description Optional[User] The lefi.User instance corresponding to the ID if found. Source code in lefi/state.py def get_user ( self , user_id : int ) -> Optional [ User ]: \"\"\" Grabs a user from the cache. Parameters: user_id (int): The ID of the user. Returns: The [lefi.User][] instance corresponding to the ID if found. \"\"\" return self . _users . get ( user_id ) add_user ( self , data ) Creates a user then caches it. Parameters: Name Type Description Default data Dict The data of the user. required Returns: Type Description User The created lefi.User instance. Source code in lefi/state.py def add_user ( self , data : Dict ) -> User : \"\"\" Creates a user then caches it. Parameters: data (Dict): The data of the user. Returns: The created [lefi.User][] instance. \"\"\" user = User ( self , data ) self . _users [ user . id ] = user return user get_guild ( self , guild_id ) Grabs a guild from the cache. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Optional[Guild] The lefi.Guild instance corresponding to the ID if found. Source code in lefi/state.py def get_guild ( self , guild_id : int ) -> Optional [ Guild ]: \"\"\" Grabs a guild from the cache. Parameters: guild_id (int): The ID of the guild. Returns: The [lefi.Guild][] instance corresponding to the ID if found. \"\"\" return self . _guilds . get ( guild_id ) get_channel ( self , channel_id ) Grabs a channel from the cache. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Optional[Union[TextChannel, DMChannel, VoiceChannel, CategoryChannel, Channel]] The lefi.Channel instance corresponding to the ID if found. Source code in lefi/state.py def get_channel ( self , channel_id : int ) -> Optional [ Union [ TextChannel , DMChannel , VoiceChannel , CategoryChannel , Channel ] ]: \"\"\" Grabs a channel from the cache. Parameters: channel_id (int): The ID of the channel. Returns: The [lefi.Channel][] instance corresponding to the ID if found. \"\"\" return self . _channels . get ( channel_id ) get_emoji ( self , emoji_id ) Grabs an emoji from the cache. Parameters: Name Type Description Default emoji_id int The ID of the emoji. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance corresponding to the ID if found. Source code in lefi/state.py def get_emoji ( self , emoji_id : int ) -> Optional [ Emoji ]: \"\"\" Grabs an emoji from the cache. Parameters: emoji_id (int): The ID of the emoji. Returns: The [lefi.Emoji][] instance corresponding to the ID if found. \"\"\" return self . _emojis . get ( emoji_id ) create_message ( self , data , channel ) Creates a Message instance. Parameters: Name Type Description Default data Dict The data of the message. required channel Any The channel of the message. required Returns: Type Description Message The created lefi.Message instance. Source code in lefi/state.py def create_message ( self , data : Dict , channel : Any ) -> Message : \"\"\" Creates a Message instance. Parameters: data (Dict): The data of the message. channel (Any): The channel of the message. Returns: The created [lefi.Message][] instance. \"\"\" return Message ( self , data , channel ) create_channel ( self , data , * args ) Creates a Channel instance. Parameters: Name Type Description Default data Dict The data of the channel. required *args Any Extra arguments to pass to the channels constructor. () Returns: Type Description Union[TextChannel, VoiceChannel, CategoryChannel, Channel] The created lefi.Channel instance. Source code in lefi/state.py def create_channel ( self , data : Dict , * args ) -> Union [ TextChannel , VoiceChannel , CategoryChannel , Channel ]: \"\"\" Creates a Channel instance. Parameters: data (Dict): The data of the channel. *args (Any): Extra arguments to pass to the channels constructor. Returns: The created [lefi.Channel][] instance. \"\"\" cls = self . CHANNEL_MAPPING . get ( int ( data [ \"type\" ]), Channel ) channel = cls ( self , data , * args ) self . create_overwrites ( channel ) return channel # type: ignore create_guild_channels ( self , guild , data ) Creates the channels of a guild. Parameters: Name Type Description Default guild lefi.Guild The guild which to create the channels for. required data Dict The data of the channels. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_channels ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the channels of a guild. Parameters: guild (lefi.Guild): The guild which to create the channels for. data (Dict): The data of the channels. Returns: The [lefi.Guild][] instance passed in. \"\"\" channels = { int ( payload [ \"id\" ]): self . create_channel ( payload , guild ) for payload in data [ \"channels\" ] } for id , channel in channels . items (): self . _channels [ id ] = channel guild . _channels = channels return guild create_guild_members ( self , guild , data ) Creates the members of a guild. Parameters: Name Type Description Default guild lefi.Guild The guild which to create the channels for. required data Dict The data of the members. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_members ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the members of a guild. Parameters: guild (lefi.Guild): The guild which to create the channels for. data (Dict): The data of the members. Returns: The [lefi.Guild][] instance passed in. \"\"\" members : Dict [ int , Member ] = {} for member_data in data [ \"members\" ]: member = Member ( self , member_data , guild ) member . _roles = { # type: ignore int ( role ): guild . get_role ( int ( role )) for role in member_data [ \"roles\" ] # type: ignore } members [ member . id ] = member guild . _members = members return guild create_guild_roles ( self , guild , data ) Creates the roles of a guild. Parameters: Name Type Description Default guild lefi.Guild The guild which to create the channels for. required data Dict The data of the roles. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_roles ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the roles of a guild. Parameters: guild (lefi.Guild): The guild which to create the channels for. data (Dict): The data of the roles. Returns: The [lefi.Guild][] instance passed in. \"\"\" roles = { int ( payload [ \"id\" ]): Role ( self , payload , guild ) for payload in data [ \"roles\" ] } guild . _roles = roles return guild create_guild_emojis ( self , guild , data ) Creates the emojis of a guild. Parameters: Name Type Description Default guild lefi.Guild The guild which to create the emojis for. required data Dict The data of the emojis. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_emojis ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the emojis of a guild. Parameters: guild (lefi.Guild): The guild which to create the emojis for. data (Dict): The data of the emojis. Returns: The [lefi.Guild][] instance passed in. \"\"\" emojis = { int ( payload [ \"id\" ]): Emoji ( self , payload , guild ) for payload in data [ \"emojis\" ] } for id , emoji in emojis . items (): self . _emojis [ id ] = emoji guild . _emojis = emojis return guild","title":"State"},{"location":"API-Reference/state/#lefi.state.State.__init__","text":"Parameters: Name Type Description Default client lefi.Client The client being used. required loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop being used. required Source code in lefi/state.py def __init__ ( self , client : Client , loop : asyncio . AbstractEventLoop ): \"\"\" Parameters: client (lefi.Client): The client being used. loop (asyncio.AbstractEventLoop): The [asyncio.AbstractEventLoop][] being used. \"\"\" self . client = client self . loop = loop self . http = client . http self . _messages = Cache [ Message ]( 1000 ) self . _users = Cache [ User ]() self . _guilds = Cache [ Guild ]() self . _channels = Cache [ Union [ TextChannel , DMChannel , VoiceChannel , CategoryChannel , Channel ] ]() self . _emojis = Cache [ Emoji ]()","title":"__init__()"},{"location":"API-Reference/state/#lefi.state.State.dispatch","text":"Dispatches data to callbacks registered to events after parsing is finished. Parameters: Name Type Description Default event str The name of the event to dispatch to. required *payload Any The data after parsing is finished. () Source code in lefi/state.py def dispatch ( self , event : str , * payload : Any ) -> None : \"\"\" Dispatches data to callbacks registered to events after parsing is finished. Parameters: event (str): The name of the event to dispatch to. *payload (Any): The data after parsing is finished. \"\"\" events : dict = self . client . events . get ( event , {}) futures = self . client . futures . get ( event , []) if callbacks := self . client . once_events . get ( event ): for index , callback in enumerate ( callbacks ): self . loop . create_task ( callback ( * payload )) callbacks . pop ( index ) return for future , check in futures : if check ( * payload ): future . set_result ( * payload ) futures . remove (( future , check )) break for callback in events . values (): self . loop . create_task ( callback ( * payload ))","title":"dispatch()"},{"location":"API-Reference/state/#lefi.state.State.parse_ready","text":"Parses the READY event. Creates a User then dispatches it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_ready ( self , data : Dict ) -> None : \"\"\" Parses the `READY` event. Creates a User then dispatches it afterwards. Parameters: data (Dict): The raw data. \"\"\" user = User ( self , data [ \"user\" ]) self . dispatch ( \"ready\" , user )","title":"parse_ready()"},{"location":"API-Reference/state/#lefi.state.State.parse_guild_create","text":"Parses GUILD_CREATE event. Creates a Guild then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_guild_create ( self , data : Dict ) -> None : \"\"\" Parses `GUILD_CREATE` event. Creates a Guild then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" guild = Guild ( self , data ) self . create_guild_channels ( guild , data ) self . create_guild_roles ( guild , data ) self . create_guild_members ( guild , data ) self . _guilds [ guild . id ] = guild self . dispatch ( \"guild_create\" , guild )","title":"parse_guild_create()"},{"location":"API-Reference/state/#lefi.state.State.parse_message_create","text":"Parses MESSAGE_CREATE event. Creates a Message then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_create ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_CREATE` event. Creates a Message then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" self . add_user ( data [ \"author\" ]) channel = self . _channels . get ( int ( data [ \"channel_id\" ])) message = Message ( self , data , channel ) # type: ignore self . _messages [ message . id ] = message self . dispatch ( \"message_create\" , message )","title":"parse_message_create()"},{"location":"API-Reference/state/#lefi.state.State.parse_message_delete","text":"Parses MESSAGE_DELETE event. Retrieves the message from cache if possible. Else it dispatches a DeletedMessage . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_delete ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_DELETE` event. Retrieves the message from cache if possible. Else it dispatches a `DeletedMessage`. Parameters: data (Dict): The raw data. \"\"\" deleted = DeletedMessage ( data ) message = self . _messages . get ( deleted . id ) if message : self . _messages . pop ( message . id ) else : message = deleted # type: ignore self . dispatch ( \"message_delete\" , message )","title":"parse_message_delete()"},{"location":"API-Reference/state/#lefi.state.State.parse_message_update","text":"Parses MESSAGE_UPDATE event. Dispatches before and after . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_update ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_UPDATE` event. Dispatches `before` and `after`. Parameters: data (Dict): The raw data. \"\"\" channel = self . get_channel ( int ( data [ \"channel_id\" ])) if not channel : return after = self . create_message ( data , channel ) if not ( before := self . get_message ( after . id )): msg = await self . http . get_channel_message ( channel . id , after . id ) # type: ignore before = self . create_message ( msg , channel ) else : self . _messages . pop ( before . id ) self . _messages [ after . id ] = after self . dispatch ( \"message_update\" , before , after )","title":"parse_message_update()"},{"location":"API-Reference/state/#lefi.state.State.parse_channel_create","text":"Parses CHANNEL_CREATE event. Creates a Channel then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_create ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_CREATE` event. Creates a Channel then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" if guild_id := data . get ( \"guild_id\" ): guild = self . get_guild ( int ( guild_id )) channel = self . create_channel ( data , guild ) else : channel = self . create_channel ( data ) self . _channels [ channel . id ] = channel self . dispatch ( \"channel_create\" , channel )","title":"parse_channel_create()"},{"location":"API-Reference/state/#lefi.state.State.parse_channel_update","text":"Parses CHANNEL_UPDATE event. Dispatches before and after . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_update ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_UPDATE` event. Dispatches `before` and `after`. Parameters: data (Dict): The raw data. \"\"\" guild = self . get_guild ( int ( data [ \"guild_id\" ])) before = self . get_channel ( int ( data [ \"id\" ])) after = self . create_channel ( data , guild ) self . _channels [ after . id ] = after self . dispatch ( \"channel_update\" , before , after )","title":"parse_channel_update()"},{"location":"API-Reference/state/#lefi.state.State.parse_channel_delete","text":"Parses CHANNEL_DELETE event. Dispatches the deleted channel. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_delete ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_DELETE` event. Dispatches the deleted channel. Parameters: data (Dict): The raw data. \"\"\" channel = self . get_channel ( int ( data [ \"id\" ])) self . _channels . pop ( channel . id ) # type: ignore self . dispatch ( \"channel_delete\" , channel )","title":"parse_channel_delete()"},{"location":"API-Reference/state/#lefi.state.State.get_message","text":"Grabs a message from the cache. Parameters: Name Type Description Default message_id int The ID of the message. required Returns: Type Description Optional[Message] The lefi.Message insance corresponding to the ID if found. Source code in lefi/state.py def get_message ( self , message_id : int ) -> Optional [ Message ]: \"\"\" Grabs a message from the cache. Parameters: message_id (int): The ID of the message. Returns: The [lefi.Message][] insance corresponding to the ID if found. \"\"\" return self . _messages . get ( message_id )","title":"get_message()"},{"location":"API-Reference/state/#lefi.state.State.get_user","text":"Grabs a user from the cache. Parameters: Name Type Description Default user_id int The ID of the user. required Returns: Type Description Optional[User] The lefi.User instance corresponding to the ID if found. Source code in lefi/state.py def get_user ( self , user_id : int ) -> Optional [ User ]: \"\"\" Grabs a user from the cache. Parameters: user_id (int): The ID of the user. Returns: The [lefi.User][] instance corresponding to the ID if found. \"\"\" return self . _users . get ( user_id )","title":"get_user()"},{"location":"API-Reference/state/#lefi.state.State.add_user","text":"Creates a user then caches it. Parameters: Name Type Description Default data Dict The data of the user. required Returns: Type Description User The created lefi.User instance. Source code in lefi/state.py def add_user ( self , data : Dict ) -> User : \"\"\" Creates a user then caches it. Parameters: data (Dict): The data of the user. Returns: The created [lefi.User][] instance. \"\"\" user = User ( self , data ) self . _users [ user . id ] = user return user","title":"add_user()"},{"location":"API-Reference/state/#lefi.state.State.get_guild","text":"Grabs a guild from the cache. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Optional[Guild] The lefi.Guild instance corresponding to the ID if found. Source code in lefi/state.py def get_guild ( self , guild_id : int ) -> Optional [ Guild ]: \"\"\" Grabs a guild from the cache. Parameters: guild_id (int): The ID of the guild. Returns: The [lefi.Guild][] instance corresponding to the ID if found. \"\"\" return self . _guilds . get ( guild_id )","title":"get_guild()"},{"location":"API-Reference/state/#lefi.state.State.get_channel","text":"Grabs a channel from the cache. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Optional[Union[TextChannel, DMChannel, VoiceChannel, CategoryChannel, Channel]] The lefi.Channel instance corresponding to the ID if found. Source code in lefi/state.py def get_channel ( self , channel_id : int ) -> Optional [ Union [ TextChannel , DMChannel , VoiceChannel , CategoryChannel , Channel ] ]: \"\"\" Grabs a channel from the cache. Parameters: channel_id (int): The ID of the channel. Returns: The [lefi.Channel][] instance corresponding to the ID if found. \"\"\" return self . _channels . get ( channel_id )","title":"get_channel()"},{"location":"API-Reference/state/#lefi.state.State.get_emoji","text":"Grabs an emoji from the cache. Parameters: Name Type Description Default emoji_id int The ID of the emoji. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance corresponding to the ID if found. Source code in lefi/state.py def get_emoji ( self , emoji_id : int ) -> Optional [ Emoji ]: \"\"\" Grabs an emoji from the cache. Parameters: emoji_id (int): The ID of the emoji. Returns: The [lefi.Emoji][] instance corresponding to the ID if found. \"\"\" return self . _emojis . get ( emoji_id )","title":"get_emoji()"},{"location":"API-Reference/state/#lefi.state.State.create_message","text":"Creates a Message instance. Parameters: Name Type Description Default data Dict The data of the message. required channel Any The channel of the message. required Returns: Type Description Message The created lefi.Message instance. Source code in lefi/state.py def create_message ( self , data : Dict , channel : Any ) -> Message : \"\"\" Creates a Message instance. Parameters: data (Dict): The data of the message. channel (Any): The channel of the message. Returns: The created [lefi.Message][] instance. \"\"\" return Message ( self , data , channel )","title":"create_message()"},{"location":"API-Reference/state/#lefi.state.State.create_channel","text":"Creates a Channel instance. Parameters: Name Type Description Default data Dict The data of the channel. required *args Any Extra arguments to pass to the channels constructor. () Returns: Type Description Union[TextChannel, VoiceChannel, CategoryChannel, Channel] The created lefi.Channel instance. Source code in lefi/state.py def create_channel ( self , data : Dict , * args ) -> Union [ TextChannel , VoiceChannel , CategoryChannel , Channel ]: \"\"\" Creates a Channel instance. Parameters: data (Dict): The data of the channel. *args (Any): Extra arguments to pass to the channels constructor. Returns: The created [lefi.Channel][] instance. \"\"\" cls = self . CHANNEL_MAPPING . get ( int ( data [ \"type\" ]), Channel ) channel = cls ( self , data , * args ) self . create_overwrites ( channel ) return channel # type: ignore","title":"create_channel()"},{"location":"API-Reference/state/#lefi.state.State.create_guild_channels","text":"Creates the channels of a guild. Parameters: Name Type Description Default guild lefi.Guild The guild which to create the channels for. required data Dict The data of the channels. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_channels ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the channels of a guild. Parameters: guild (lefi.Guild): The guild which to create the channels for. data (Dict): The data of the channels. Returns: The [lefi.Guild][] instance passed in. \"\"\" channels = { int ( payload [ \"id\" ]): self . create_channel ( payload , guild ) for payload in data [ \"channels\" ] } for id , channel in channels . items (): self . _channels [ id ] = channel guild . _channels = channels return guild","title":"create_guild_channels()"},{"location":"API-Reference/state/#lefi.state.State.create_guild_members","text":"Creates the members of a guild. Parameters: Name Type Description Default guild lefi.Guild The guild which to create the channels for. required data Dict The data of the members. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_members ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the members of a guild. Parameters: guild (lefi.Guild): The guild which to create the channels for. data (Dict): The data of the members. Returns: The [lefi.Guild][] instance passed in. \"\"\" members : Dict [ int , Member ] = {} for member_data in data [ \"members\" ]: member = Member ( self , member_data , guild ) member . _roles = { # type: ignore int ( role ): guild . get_role ( int ( role )) for role in member_data [ \"roles\" ] # type: ignore } members [ member . id ] = member guild . _members = members return guild","title":"create_guild_members()"},{"location":"API-Reference/state/#lefi.state.State.create_guild_roles","text":"Creates the roles of a guild. Parameters: Name Type Description Default guild lefi.Guild The guild which to create the channels for. required data Dict The data of the roles. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_roles ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the roles of a guild. Parameters: guild (lefi.Guild): The guild which to create the channels for. data (Dict): The data of the roles. Returns: The [lefi.Guild][] instance passed in. \"\"\" roles = { int ( payload [ \"id\" ]): Role ( self , payload , guild ) for payload in data [ \"roles\" ] } guild . _roles = roles return guild","title":"create_guild_roles()"},{"location":"API-Reference/state/#lefi.state.State.create_guild_emojis","text":"Creates the emojis of a guild. Parameters: Name Type Description Default guild lefi.Guild The guild which to create the emojis for. required data Dict The data of the emojis. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_emojis ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the emojis of a guild. Parameters: guild (lefi.Guild): The guild which to create the emojis for. data (Dict): The data of the emojis. Returns: The [lefi.Guild][] instance passed in. \"\"\" emojis = { int ( payload [ \"id\" ]): Emoji ( self , payload , guild ) for payload in data [ \"emojis\" ] } for id , emoji in emojis . items (): self . _emojis [ id ] = emoji guild . _emojis = emojis return guild","title":"create_guild_emojis()"},{"location":"API-Reference/user/","text":"Represents a user. username : str property readonly The username of the user. discriminator : str property readonly The discriminator of the user. id : int property readonly The ID of the user. bot : bool property readonly Whether or not the user is a bot. system : bool property readonly Whether or not the user is a discord system user.. mfa_enabled : bool property readonly Whether or not the user has 2fa enabled. accent_color : int property readonly The accent color of the user. locale : Optional [ str ] property readonly The locale of the user. verified : bool property readonly Whether the email on the users account is verified. email : Optional [ str ] property readonly The email of the user. flags : UserFlags property readonly The flags of the user. premium_type : PremiumType property readonly The premium type of the user. public_flags : UserFlags property readonly The users public flags. channel : Optional [ DMChannel ] property readonly The users DMChannel. __init__ ( self , state , data ) special Initialize self. See help(type(self)) for accurate signature. Source code in lefi/objects/user.py def __init__ ( self , state : State , data : Dict ) -> None : self . _state = state self . _data = data self . _channel : Optional [ DMChannel ] = None create_dm_channel ( self ) async Creates a DMChannel for the user if one isn't open already. Source code in lefi/objects/user.py async def create_dm_channel ( self ) -> DMChannel : \"\"\" Creates a DMChannel for the user if one isn't open already. \"\"\" if self . _channel is not None : return self . _channel data = await self . _state . http . create_dm_channel ( self . id ) self . _channel = DMChannel ( self . _state , data ) return self . _channel send ( self , content ) async Sends a message to the user. Parameters: Name Type Description Default content str The content of the message. required Returns: Type Description Message The lefi.Message instance of the message sent. Source code in lefi/objects/user.py async def send ( self , content : str ) -> Message : \"\"\" Sends a message to the user. Parameters: content (str): The content of the message. Returns: The [lefi.Message][] instance of the message sent. \"\"\" if self . _channel is None : self . _channel = await self . create_dm_channel () return await self . _channel . send ( content )","title":"User"},{"location":"API-Reference/user/#lefi.objects.user.User.username","text":"The username of the user.","title":"username"},{"location":"API-Reference/user/#lefi.objects.user.User.discriminator","text":"The discriminator of the user.","title":"discriminator"},{"location":"API-Reference/user/#lefi.objects.user.User.id","text":"The ID of the user.","title":"id"},{"location":"API-Reference/user/#lefi.objects.user.User.bot","text":"Whether or not the user is a bot.","title":"bot"},{"location":"API-Reference/user/#lefi.objects.user.User.system","text":"Whether or not the user is a discord system user..","title":"system"},{"location":"API-Reference/user/#lefi.objects.user.User.mfa_enabled","text":"Whether or not the user has 2fa enabled.","title":"mfa_enabled"},{"location":"API-Reference/user/#lefi.objects.user.User.accent_color","text":"The accent color of the user.","title":"accent_color"},{"location":"API-Reference/user/#lefi.objects.user.User.locale","text":"The locale of the user.","title":"locale"},{"location":"API-Reference/user/#lefi.objects.user.User.verified","text":"Whether the email on the users account is verified.","title":"verified"},{"location":"API-Reference/user/#lefi.objects.user.User.email","text":"The email of the user.","title":"email"},{"location":"API-Reference/user/#lefi.objects.user.User.flags","text":"The flags of the user.","title":"flags"},{"location":"API-Reference/user/#lefi.objects.user.User.premium_type","text":"The premium type of the user.","title":"premium_type"},{"location":"API-Reference/user/#lefi.objects.user.User.public_flags","text":"The users public flags.","title":"public_flags"},{"location":"API-Reference/user/#lefi.objects.user.User.channel","text":"The users DMChannel.","title":"channel"},{"location":"API-Reference/user/#lefi.objects.user.User.__init__","text":"Initialize self. See help(type(self)) for accurate signature. Source code in lefi/objects/user.py def __init__ ( self , state : State , data : Dict ) -> None : self . _state = state self . _data = data self . _channel : Optional [ DMChannel ] = None","title":"__init__()"},{"location":"API-Reference/user/#lefi.objects.user.User.create_dm_channel","text":"Creates a DMChannel for the user if one isn't open already. Source code in lefi/objects/user.py async def create_dm_channel ( self ) -> DMChannel : \"\"\" Creates a DMChannel for the user if one isn't open already. \"\"\" if self . _channel is not None : return self . _channel data = await self . _state . http . create_dm_channel ( self . id ) self . _channel = DMChannel ( self . _state , data ) return self . _channel","title":"create_dm_channel()"},{"location":"API-Reference/user/#lefi.objects.user.User.send","text":"Sends a message to the user. Parameters: Name Type Description Default content str The content of the message. required Returns: Type Description Message The lefi.Message instance of the message sent. Source code in lefi/objects/user.py async def send ( self , content : str ) -> Message : \"\"\" Sends a message to the user. Parameters: content (str): The content of the message. Returns: The [lefi.Message][] instance of the message sent. \"\"\" if self . _channel is None : self . _channel = await self . create_dm_channel () return await self . _channel . send ( content )","title":"send()"},{"location":"API-Reference/wsclient/","text":"A class which is used to communicate to the gateway. Attributes: Name Type Description intents lefi.Intents The intents to use when connecting. ws aiohttp.ClientWebSocketResponse The websocket which we are connected to. heartbeat_deylay float The delay inbetween sending each heartbeat. client lefi.Client The lefi.Client currently connected. closed bool Whether or not the websocket is closed. seq int The sequence received from READY . Danger This class is used internally. THIS IS NOT MEANT TO BE TOUCHED. . Doing so can cause bugs. __init__ ( self , client , intents = None ) special Parameters: Name Type Description Default client lefi.Client The lefi.Client instance connected. required intents lefi.Intents The lefi.Intents to pass when connecting. None Source code in lefi/ws/wsclient.py def __init__ ( self , client : Client , intents : Optional [ Intents ] = None ) -> None : \"\"\" Parameters: client (lefi.Client): The [lefi.Client][] instance connected. intents (lefi.Intents): The [lefi.Intents][] to pass when connecting. \"\"\" self . intents = Intents . default () if intents is None else intents self . ws : aiohttp . ClientWebSocketResponse = None # type: ignore self . heartbeat_delay : float = 0 self . client : Client = client self . closed : bool = False self . seq : int = 0 self . EVENT_MAPPING : Dict [ str , Callable ] = { \"ready\" : self . client . _state . parse_ready , \"message_create\" : self . client . _state . parse_message_create , \"message_update\" : self . client . _state . parse_message_update , \"message_delete\" : self . client . _state . parse_message_delete , \"guild_create\" : self . client . _state . parse_guild_create , \"channel_create\" : self . client . _state . parse_channel_create , \"channel_update\" : self . client . _state . parse_channel_update , \"channel_delete\" : self . client . _state . parse_channel_delete , } start ( self ) async Starts the connection to the websocket and begins parsing messages received from the websocket. Source code in lefi/ws/wsclient.py async def start ( self ) -> None : \"\"\" Starts the connection to the websocket and begins parsing messages received from the websocket. \"\"\" data = await self . client . http . get_bot_gateway () self . ws = await self . client . http . ws_connect ( data [ \"url\" ]) await self . identify () await asyncio . gather ( self . start_heartbeat (), self . read_messages ()) parse_event_data ( self , event_name , data ) async Finds the parsers for the passed in event. Parameters: Name Type Description Default event_name str The name of the event. required data Dict The raw data to parse. required Source code in lefi/ws/wsclient.py async def parse_event_data ( self , event_name : str , data : Dict ) -> None : \"\"\" Finds the parsers for the passed in event. Parameters: event_name (str): The name of the event. data (Dict): The raw data to parse. \"\"\" if event_parse := self . EVENT_MAPPING . get ( event_name ): await event_parse ( data ) reconnect ( self ) async Closes the websocket if it isn't then tries to establish a new connection. Source code in lefi/ws/wsclient.py async def reconnect ( self ) -> None : \"\"\" Closes the websocket if it isn't then tries to establish a new connection. \"\"\" if not self . ws . closed and self . ws : await self . ws . close () self . closed = True await self . start () read_messages ( self ) async Reads the messages from received from the websocket and parses them. Source code in lefi/ws/wsclient.py async def read_messages ( self ) -> None : \"\"\" Reads the messages from received from the websocket and parses them. \"\"\" async for message in self . ws : if message . type is aiohttp . WSMsgType . TEXT : recieved_data = message . json () if recieved_data [ \"op\" ] == OpCodes . DISPATCH : await self . dispatch ( recieved_data [ \"t\" ], recieved_data [ \"d\" ]) if recieved_data [ \"op\" ] == OpCodes . HEARTBEAT_ACK : logger . info ( \"HEARTBEAT ACKNOWLEDGED\" ) if recieved_data [ \"op\" ] == OpCodes . RESUME : logger . info ( \"RESUMED\" ) await self . resume () if recieved_data [ \"op\" ] == OpCodes . RECONNECT : logger . info ( \"RECONNECT\" ) await self . reconnect () dispatch ( self , event , data ) async Dispatches an event and its data to the parsers. Parameters: Name Type Description Default event str The event being dispatched. required data Dict The raw data of the event. required Source code in lefi/ws/wsclient.py async def dispatch ( self , event : str , data : Dict ) -> None : \"\"\" Dispatches an event and its data to the parsers. Parameters: event (str): The event being dispatched. data (Dict): The raw data of the event. \"\"\" logger . debug ( f \"DISPATCHED EVENT: { event } \" ) if event == \"READY\" : self . session_id = data [ \"session_id\" ] await self . parse_event_data ( event . lower (), data ) resume ( self ) async Sends a resume payload to the websocket. Source code in lefi/ws/wsclient.py async def resume ( self ) -> None : \"\"\" Sends a resume payload to the websocket. \"\"\" payload = { \"op\" : 6 , \"token\" : self . client . http . token , \"session_id\" : self . session_id , \"seq\" : self . seq , } await self . ws . send_json ( payload ) identify ( self ) async Sends an identify payload to the websocket. Source code in lefi/ws/wsclient.py async def identify ( self ) -> None : \"\"\" Sends an identify payload to the websocket. \"\"\" data = await self . ws . receive () self . heartbeat_delay = data . json ()[ \"d\" ][ \"heartbeat_interval\" ] payload = { \"op\" : 2 , \"d\" : { \"token\" : self . client . http . token , \"intents\" : self . intents . value , \"properties\" : { \"$os\" : sys . platform , \"$browser\" : \"Lefi\" , \"$device\" : \"Lefi\" , }, }, } await self . ws . send_json ( payload ) start_heartbeat ( self ) async Starts the heartbeat loop. Info This can be blocked, which causes the heartbeat to stop. Source code in lefi/ws/wsclient.py async def start_heartbeat ( self ) -> None : \"\"\" Starts the heartbeat loop. Info: This can be blocked, which causes the heartbeat to stop. \"\"\" while not self . closed : self . seq += 1 await self . ws . send_json ({ \"op\" : 1 , \"d\" : self . seq }) logger . info ( \"HEARTBEAT SENT\" ) await asyncio . sleep ( self . heartbeat_delay / 1000 )","title":"WebSocketClient"},{"location":"API-Reference/wsclient/#lefi.ws.wsclient.WebSocketClient.__init__","text":"Parameters: Name Type Description Default client lefi.Client The lefi.Client instance connected. required intents lefi.Intents The lefi.Intents to pass when connecting. None Source code in lefi/ws/wsclient.py def __init__ ( self , client : Client , intents : Optional [ Intents ] = None ) -> None : \"\"\" Parameters: client (lefi.Client): The [lefi.Client][] instance connected. intents (lefi.Intents): The [lefi.Intents][] to pass when connecting. \"\"\" self . intents = Intents . default () if intents is None else intents self . ws : aiohttp . ClientWebSocketResponse = None # type: ignore self . heartbeat_delay : float = 0 self . client : Client = client self . closed : bool = False self . seq : int = 0 self . EVENT_MAPPING : Dict [ str , Callable ] = { \"ready\" : self . client . _state . parse_ready , \"message_create\" : self . client . _state . parse_message_create , \"message_update\" : self . client . _state . parse_message_update , \"message_delete\" : self . client . _state . parse_message_delete , \"guild_create\" : self . client . _state . parse_guild_create , \"channel_create\" : self . client . _state . parse_channel_create , \"channel_update\" : self . client . _state . parse_channel_update , \"channel_delete\" : self . client . _state . parse_channel_delete , }","title":"__init__()"},{"location":"API-Reference/wsclient/#lefi.ws.wsclient.WebSocketClient.start","text":"Starts the connection to the websocket and begins parsing messages received from the websocket. Source code in lefi/ws/wsclient.py async def start ( self ) -> None : \"\"\" Starts the connection to the websocket and begins parsing messages received from the websocket. \"\"\" data = await self . client . http . get_bot_gateway () self . ws = await self . client . http . ws_connect ( data [ \"url\" ]) await self . identify () await asyncio . gather ( self . start_heartbeat (), self . read_messages ())","title":"start()"},{"location":"API-Reference/wsclient/#lefi.ws.wsclient.WebSocketClient.parse_event_data","text":"Finds the parsers for the passed in event. Parameters: Name Type Description Default event_name str The name of the event. required data Dict The raw data to parse. required Source code in lefi/ws/wsclient.py async def parse_event_data ( self , event_name : str , data : Dict ) -> None : \"\"\" Finds the parsers for the passed in event. Parameters: event_name (str): The name of the event. data (Dict): The raw data to parse. \"\"\" if event_parse := self . EVENT_MAPPING . get ( event_name ): await event_parse ( data )","title":"parse_event_data()"},{"location":"API-Reference/wsclient/#lefi.ws.wsclient.WebSocketClient.reconnect","text":"Closes the websocket if it isn't then tries to establish a new connection. Source code in lefi/ws/wsclient.py async def reconnect ( self ) -> None : \"\"\" Closes the websocket if it isn't then tries to establish a new connection. \"\"\" if not self . ws . closed and self . ws : await self . ws . close () self . closed = True await self . start ()","title":"reconnect()"},{"location":"API-Reference/wsclient/#lefi.ws.wsclient.WebSocketClient.read_messages","text":"Reads the messages from received from the websocket and parses them. Source code in lefi/ws/wsclient.py async def read_messages ( self ) -> None : \"\"\" Reads the messages from received from the websocket and parses them. \"\"\" async for message in self . ws : if message . type is aiohttp . WSMsgType . TEXT : recieved_data = message . json () if recieved_data [ \"op\" ] == OpCodes . DISPATCH : await self . dispatch ( recieved_data [ \"t\" ], recieved_data [ \"d\" ]) if recieved_data [ \"op\" ] == OpCodes . HEARTBEAT_ACK : logger . info ( \"HEARTBEAT ACKNOWLEDGED\" ) if recieved_data [ \"op\" ] == OpCodes . RESUME : logger . info ( \"RESUMED\" ) await self . resume () if recieved_data [ \"op\" ] == OpCodes . RECONNECT : logger . info ( \"RECONNECT\" ) await self . reconnect ()","title":"read_messages()"},{"location":"API-Reference/wsclient/#lefi.ws.wsclient.WebSocketClient.dispatch","text":"Dispatches an event and its data to the parsers. Parameters: Name Type Description Default event str The event being dispatched. required data Dict The raw data of the event. required Source code in lefi/ws/wsclient.py async def dispatch ( self , event : str , data : Dict ) -> None : \"\"\" Dispatches an event and its data to the parsers. Parameters: event (str): The event being dispatched. data (Dict): The raw data of the event. \"\"\" logger . debug ( f \"DISPATCHED EVENT: { event } \" ) if event == \"READY\" : self . session_id = data [ \"session_id\" ] await self . parse_event_data ( event . lower (), data )","title":"dispatch()"},{"location":"API-Reference/wsclient/#lefi.ws.wsclient.WebSocketClient.resume","text":"Sends a resume payload to the websocket. Source code in lefi/ws/wsclient.py async def resume ( self ) -> None : \"\"\" Sends a resume payload to the websocket. \"\"\" payload = { \"op\" : 6 , \"token\" : self . client . http . token , \"session_id\" : self . session_id , \"seq\" : self . seq , } await self . ws . send_json ( payload )","title":"resume()"},{"location":"API-Reference/wsclient/#lefi.ws.wsclient.WebSocketClient.identify","text":"Sends an identify payload to the websocket. Source code in lefi/ws/wsclient.py async def identify ( self ) -> None : \"\"\" Sends an identify payload to the websocket. \"\"\" data = await self . ws . receive () self . heartbeat_delay = data . json ()[ \"d\" ][ \"heartbeat_interval\" ] payload = { \"op\" : 2 , \"d\" : { \"token\" : self . client . http . token , \"intents\" : self . intents . value , \"properties\" : { \"$os\" : sys . platform , \"$browser\" : \"Lefi\" , \"$device\" : \"Lefi\" , }, }, } await self . ws . send_json ( payload )","title":"identify()"},{"location":"API-Reference/wsclient/#lefi.ws.wsclient.WebSocketClient.start_heartbeat","text":"Starts the heartbeat loop. Info This can be blocked, which causes the heartbeat to stop. Source code in lefi/ws/wsclient.py async def start_heartbeat ( self ) -> None : \"\"\" Starts the heartbeat loop. Info: This can be blocked, which causes the heartbeat to stop. \"\"\" while not self . closed : self . seq += 1 await self . ws . send_json ({ \"op\" : 1 , \"d\" : self . seq }) logger . info ( \"HEARTBEAT SENT\" ) await asyncio . sleep ( self . heartbeat_delay / 1000 )","title":"start_heartbeat()"}]}